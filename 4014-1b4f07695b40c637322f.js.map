{"version":3,"file":"4014-1b4f07695b40c637322f.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Edit.js","webpack://jacdac-docs/./src/components/ui/CodeSandboxButton.tsx","webpack://jacdac-docs/./src/components/ui/ReactCodeButton.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;","import React, { useState } from \"react\"\nimport EditIcon from \"@mui/icons-material/Edit\"\nimport IconButtonWithTooltip from \"./IconButtonWithTooltip\"\nimport useMediaQueries from \"../hooks/useMediaQueries\"\nimport { Button } from \"gatsby-material-ui-components\"\nimport useSnackbar from \"../hooks/useSnackbar\"\n\nexport default function CodeSandboxButton(props: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    files: () => Record<string, any>\n    startFile?: string\n}) {\n    const { files, startFile } = props\n    const { setError } = useSnackbar()\n    const { mobile } = useMediaQueries()\n    const [importing, setImporting] = useState(false)\n\n    const handleClick = async () => {\n        const f = files()\n        const file =\n            startFile ||\n            Object.keys(f).filter(fn => /\\.js$/.test(fn))[0] ||\n            \"index.js\"\n        try {\n            setImporting(true)\n            const x = await fetch(\n                \"https://codesandbox.io/api/v1/sandboxes/define?json=1\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Accept: \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        files: f,\n                    }),\n                }\n            )\n            const data = await x.json()\n            const url = `https://codesandbox.io/s/${data.sandbox_id}?file=/${file}`\n            window.open(url, \"_blank\", \"noreferrer\")\n        } catch (error) {\n            setError(error)\n        } finally {\n            setImporting(false)\n        }\n    }\n\n    return mobile ? (\n        <IconButtonWithTooltip\n            color=\"primary\"\n            onClick={handleClick}\n            disabled={importing}\n            title=\"Try in CodeSandbox\"\n        >\n            <EditIcon />\n        </IconButtonWithTooltip>\n    ) : (\n        <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={handleClick}\n            startIcon={<EditIcon />}\n            disabled={importing}\n        >\n            Try in CodeSandbox\n        </Button>\n    )\n}\n","import React, { useCallback } from \"react\"\nimport CodeSandboxButton from \"./CodeSandboxButton\"\nimport packageJson from \"../../../jacdac-ts/package.json\"\nimport reactPackageJson from \"../../../react-jacdac/package.json\"\n\nconst AppTsx = `import * as React from \"react\";\nimport { JacdacProvider } from \"react-jacdac\";\nimport { bus } from \"./bus\";\nimport Connect from \"./Connect\";\nimport Demo from \"./Demo\";\n\nexport default function App() {\n  return (\n    // wrap your application with the jacdac provider\n    <JacdacProvider initialBus={bus}>\n      <Connect />\n      <Demo />\n    </JacdacProvider>\n  );\n}\n`\nconst ConnectTsx = `import * as React from \"react\";\nimport { injectDevTools } from \"jacdac-ts\";\nimport { useBus, useChange } from \"react-jacdac\";\n\n/**\n * A barebone connect button for Jacdac. Rewrite to your taste.\n */\nexport default function Connect() {\n  // fetch the bus from the jacdac context\n  const bus = useBus();\n  // fetch the connect state, useChange will trigger a re-render when connected changes\n  const connected = useChange(bus, (_) => _.connected);\n  // connect or disconnect in a handler\n  const handleConnect = () => (connected ? bus.disconnect() : bus.connect());\n  // inject dev tools window\n  const handleDevTools = () => injectDevTools(bus)\n\n  return (\n    <div>\n        <button onClick={handleConnect}>\n            jacdac {connected ? \"disconnect\" : \"connect\"}\n        </button>\n        <button onClick={handleDevTools} className=\"button-clear\">dev tools</button>\n    </div>\n  );\n}\n`\nconst indexTsx = `import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"milligram\";\n\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\nroot.render(<App />);\n`\nconst busTs = `import { createWebBus } from \"jacdac-ts\";\n\n/**\n * The Jacdac bus singleton.\n *\n * Declare this instance in a separate file from your components, to avoid\n * reloading the bus in the development hot-reload cycles.\n */\nexport const bus = createWebBus();\n`\n\nexport default function ReactCodeButton(props: {\n    title?: string\n    source: { tsx?: string }\n}) {\n    const { title, source } = props\n    const { tsx = \"\" } = source\n\n    const files = useCallback(() => {\n        const DemoTsx = tsx\n        const indexHtml = `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        \n        <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n            <meta name=\"theme-color\" content=\"#000000\">\n        </head>\n        <body>\n            <noscript>\n                You need to enable JavaScript to run this app.\n            </noscript>\n            <div id=\"root\"></div>\n            <footer>\n            <small>\n            Need to learn more about Jacdac?\n            <a target=\"_blank\" href=\"https://aka.ms/jacdac\">Read the docs</a>\n            or\n            <a\n                target=\"_blank\"\n                href=\"https://github.com/microsoft/jacdac/discussions\"\n                >start a discussion</a\n            >.\n            </small>\n        </footer>\n    \n        </body>        \n        </html>  \n        `\n\n        return {\n            \"package.json\": {\n                content: {\n                    name: \"react-jacdac-starter\",\n                    version: \"1.0.0\",\n                    description: \"React, Jacdac and TypeScript start\",\n                    keywords: [\"typescript\", \"react\", \"starter\", \"jacdac\"],\n                    main: \"src/index.tsx\",\n                    dependencies: {\n                        milligram: \"1.4.1\",\n                        react: \"18.1.0\",\n                        \"react-dom\": \"18.1.0\",\n                        \"react-scripts\": \"5.0.1\",\n                        \"jacdac-ts\": `^${packageJson.version}`,\n                        \"react-jacdac\": `^${reactPackageJson.version}`,\n                    },\n                    devDependencies: {\n                        \"@types/react\": \"^18.0.12\",\n                        \"@types/react-dom\": \"^18.0.5\",\n                        typescript: \"^4.7.3\",\n                    },\n                    scripts: {\n                        start: \"react-scripts start\",\n                        build: \"react-scripts build\",\n                        test: \"react-scripts test --env=jsdom\",\n                        eject: \"react-scripts eject\",\n                    },\n                    browserslist: [\n                        \">0.2%\",\n                        \"not dead\",\n                        \"not ie <= 11\",\n                        \"not op_mini all\",\n                    ],\n                },\n            },\n            \"src/bus.ts\": { content: busTs },\n            \"src/App.tsx\": { content: AppTsx },\n            \"src/Connect.tsx\": { content: ConnectTsx },\n            \"src/Demo.tsx\": { content: DemoTsx },\n            \"src/index.tsx\": {\n                content: indexTsx,\n            },\n            \"public/index.html\": {\n                content: indexHtml,\n            },\n        }\n    }, [title, source, tsx])\n\n    return <CodeSandboxButton files={files} startFile=\"src/Demo.tsx\" />\n}\n"],"names":["useSnackbar","useMediaQueries","useState","handleClick","f","files","file","startFile","Object","fn","setImporting","x","fetch","method","headers","Accept","body","JSON","data","url","window","setError","mobile","AppTsx","ConnectTsx","indexTsx","busTs","tsx","useCallback","DemoTsx","indexHtml","content","name","version","description","keywords","main","dependencies","milligram","react","packageJson","reactPackageJson","devDependencies","typescript","scripts","start","build","test","eject","browserslist"],"sourceRoot":""}