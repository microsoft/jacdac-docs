{"version":3,"file":"8685-1add8e0c3c4ec8e3d82a.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAce,sCAA8D,CACzE,GAAM,UAAN,MAEA,GAAMA,CAAAA,iBAAiB,CAAGC,uEAAW,SAEjCC,kHAFiC,CAArC,CAIA,GAAM,YAAcC,4FAAwB,mBAA5C,KAA4C,CAA5C,CAKA,GAAMC,CAAAA,MAAM,CAAGC,4EAAgB,CAA/B,OAA+B,CAA/B,CACA,GAAMC,CAAAA,KAAK,CAAGF,MAAM,aAApB,UACA,GAAM,sCAA4CG,4EAAc,CAAhE,KAAgE,CAAhE,CACA,GAAMC,CAAAA,WAAW,CAAGC,4CAApB,GACA,GAAMC,CAAAA,UAAU,CAAhB,0BAEA,GAAMC,CAAAA,CAAC,CAAGC,6EAAiB,WAA3B,GAA2B,CAA3B,CAEA,GAAIC,SAAS,GAAb,UACI,mBAAO,mIAAgC,QAAQ,CAA/C,iBAAO,EAAP,CAEJ,GAAMC,CAAAA,CAAC,CAAP,GACA,GAAMC,CAAAA,CAAC,CAAP,GACA,GAAMC,CAAAA,EAAE,CAAR,EACA,GAAMC,CAAAA,EAAE,CAAR,IACA,GAAMC,CAAAA,CAAC,CAAG,CAACJ,CAAC,EAAF,GAAV,EACA,GAAMK,CAAAA,EAAE,CAAR,EACA,GAAMC,CAAAA,EAAE,CAAGN,CAAC,EAAZ,EACA,GAAMO,CAAAA,EAAE,CAAIN,CAAC,CAAF,CAACA,CAAZ,EACA,GAAMO,CAAAA,GAAG,CAAIP,CAAC,CAAF,CAACA,CAAb,EAEA,GAAMQ,CAAAA,YAAY,mIAAG,sBAAoD,CACrE,KAAMnB,CAAAA,MAAN,OAAMA,EAAAA,MAAN,SAAMA,CAAN,MAAMA,CAAAA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,CAA0B,CAAhC,QAAgC,CAA1BA,CAAN,CACAJ,iBAAiB,CAAjBA,OAAAA,GAFc,SAAZuB,SAAAA,CAAAA,YAAAA,CAAY,EAAZA,CAAY,GAAZA,CAAY,qCAAlB,CAAkB,EAAlB,CAKA,mBACI,mHAAM,SAAS,CAAf,KAAgB,SAAS,CAAzB,uBACI,mHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,sHAAW,KAAK,CAAhB,EAAqB,MAAM,CAA3B,EAAgC,IAAI,CAApC,yBACI,0EACI,2DACI,EAAE,CADN,YAEI,WAAW,CAFf,GAGI,YAAY,CAHhB,GAII,IAAI,CAJR,EAKI,IAAI,CAAEN,EAAE,CALZ,EAMI,MAAM,CANV,qBAQI,4DACI,IAAI,CADR,OAEI,MAAM,gBAAgBA,EAAE,CAAlB,SAZtB,EAUY,EARJ,CADJ,CADJ,cAgBI,sDAAG,SAAS,mBAAkBH,CAAC,EAAnB,SAA6BC,CAAC,EAA9B,GAAZ,kBACI,2DACI,EAAE,CAAED,CAAC,EADT,EAEI,EAAE,CAAEC,CAAC,EAFT,EAGI,CAAC,CAHL,EAII,IAAI,CAJR,kBAKI,MAAM,CALV,WAMI,WAAW,CAPnB,EACI,EADJ,cASI,yDACI,EAAE,CADN,GAEI,EAAE,CAFN,GAGI,EAAE,CAHN,GAII,EAAE,CAJN,IAKI,MAAM,CALV,OAMI,WAAW,CANf,GAOI,SAAS,qBAPb,IAQI,yCAnCpB,MA2BgB,EATJ,CAhBJ,CADJ,CADJ,CAwCKX,MAAM,eACH,mHAAM,IAAI,CAAV,mBACI,mHACI,KAAK,CADT,MAEI,iBAAiB,CAFrB,OAGI,GAAG,CAHP,EAII,GAAG,CAJP,IAKI,IAAI,CALR,EAMI,KAAK,CANT,UAOI,QAAQ,CAlD5B,YA2CgB,EADJ,CAzCR,CADJ,CAwDH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardWindDirection.tsx"],"sourcesContent":["import React from \"react\"\nimport { WindDirectionReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { useId } from \"react\"\nimport useThrottledValue from \"../hooks/useThrottledValue\"\nimport { Grid, Slider } from \"@mui/material\"\nimport { SensorServer } from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport useRegister from \"../hooks/useRegister\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\n\nexport default function DashboardWindDirection(props: DashboardServiceProps) {\n    const { service } = props\n\n    const directionRegister = useRegister(\n        service,\n        WindDirectionReg.WindDirection\n    )\n    const [direction] = useRegisterUnpackedValue<[number]>(\n        directionRegister,\n        props\n    )\n\n    const server = useServiceServer<SensorServer<[number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const arrowHeadId = useId()\n    const widgetSize = `clamp(3rem, 10vw, 10vh)`\n\n    const a = useThrottledValue(direction, 360)\n\n    if (direction === undefined)\n        return <DashboardRegisterValueFallback register={directionRegister} />\n\n    const w = 64\n    const h = 64\n    const mw = 5\n    const mh = 4.5\n    const r = (w >> 1) - 4\n    const sw = 3\n    const cx = w >> 1\n    const cy = (h * 4) / 5\n    const cy2 = (h * 2) / 5\n\n    const handleChange = async (ev: unknown, newValue: number | number[]) => {\n        await server?.reading.setValues([newValue as number])\n        directionRegister.refresh()\n    }\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h} size={widgetSize}>\n                    <defs>\n                        <marker\n                            id={arrowHeadId}\n                            markerWidth={mw}\n                            markerHeight={mh}\n                            refX={0}\n                            refY={mh / 2}\n                            orient=\"auto\"\n                        >\n                            <polygon\n                                fill={active}\n                                points={`0 0, ${mw} ${mh / 2}, 0 ${mh}`}\n                            />\n                        </marker>\n                    </defs>\n                    <g transform={`rotate(${a}, ${w >> 1}, ${h >> 1})`}>\n                        <circle\n                            cx={w >> 1}\n                            cy={h >> 1}\n                            r={r}\n                            fill={controlBackground}\n                            stroke={background}\n                            strokeWidth={sw}\n                        />\n                        <line\n                            x1={cx}\n                            y1={cy}\n                            x2={cx}\n                            y2={cy2}\n                            stroke={active}\n                            strokeWidth={sw}\n                            markerEnd={`url(#${arrowHeadId})`}\n                            aria-label={`arrow point at ${direction}Â°`}\n                        />\n                    </g>\n                </SvgWidget>\n            </Grid>\n            {server && (\n                <Grid item>\n                    <Slider\n                        color={color}\n                        valueLabelDisplay=\"auto\"\n                        min={0}\n                        max={360}\n                        step={5}\n                        value={direction}\n                        onChange={handleChange}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"names":["directionRegister","useRegister","WindDirectionReg","useRegisterUnpackedValue","server","useServiceServer","color","useWidgetTheme","arrowHeadId","useId","widgetSize","a","useThrottledValue","direction","w","h","mw","mh","r","sw","cx","cy","cy2","handleChange"],"sourceRoot":""}