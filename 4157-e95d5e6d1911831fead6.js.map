{"version":3,"file":"4157-e95d5e6d1911831fead6.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/material/DialogActions/dialogActionsClasses.js","webpack://jacdac-docs/./node_modules/@mui/material/DialogActions/DialogActions.js","webpack://jacdac-docs/./src/components/CmdButton.tsx","webpack://jacdac-docs/./jacdac-ts/src/clients/cloudconfigurationclient.ts","webpack://jacdac-docs/./src/components/dashboard/DashboardCloudConfiguration.tsx","webpack://jacdac-docs/./src/components/hooks/useMounted.ts","webpack://jacdac-docs/./src/components/ui/ChipList.tsx","webpack://jacdac-docs/./src/jacdac/useEventCount.ts","webpack://jacdac-docs/./src/jacdac/useServiceClient.ts"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getDialogActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogActions', slot);\n}\nconst dialogActionsClasses = generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);\nexport default dialogActionsClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disableSpacing\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogActionsUtilityClass } from './dialogActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getDialogActionsUtilityClass, classes);\n};\nconst DialogActionsRoot = styled('div', {\n  name: 'MuiDialogActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8,\n  justifyContent: 'flex-end',\n  flex: '0 0 auto'\n}, !ownerState.disableSpacing && {\n  '& > :not(:first-of-type)': {\n    marginLeft: 8\n  }\n}));\nconst DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogActions'\n  });\n  const {\n      className,\n      disableSpacing = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogActions;","import { darken, lighten } from \"@mui/material\"\nimport { styled } from \"@mui/material/styles\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport React, { CSSProperties, ReactNode, useEffect, useState } from \"react\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport ErrorIcon from \"@mui/icons-material/Error\"\nimport IconButtonWithTooltip from \"./ui/IconButtonWithTooltip\"\nimport useAnalytics, { EventProperties } from \"./hooks/useAnalytics\"\nimport useMounted from \"./hooks/useMounted\"\nimport clsx from \"clsx\"\nimport useSnackbar from \"./hooks/useSnackbar\"\nimport useBus from \"../jacdac/useBus\"\nimport OptionalTooltip from \"./widgets/OptionalTooltip\"\n\nconst PREFIX = \"CmdButton\"\n\nconst classes = {\n    ack: `${PREFIX}Ack`,\n    error: `${PREFIX}Error`,\n}\n\nconst Root = styled(\"span\")(({ theme }) => ({\n    [`& .${classes.ack}`]: {\n        color: \"#fff\",\n        fontWeight: theme.typography.fontWeightMedium,\n        backgroundColor: theme.palette.success.main,\n    },\n\n    [`& .${classes.error}`]: {\n        color: \"#fff\",\n        backgroundColor: (theme.palette.mode === \"light\" ? lighten : darken)(\n            theme.palette.error.main,\n            0.6\n        ),\n    },\n}))\n\nconst ACK_RESET_DELAY = 500\nconst ERROR_RESET_DELAY = 2000\n\nexport default function CmdButton(props: {\n    onClick: (mounted: () => boolean) => Promise<void>\n    className?: string\n    style?: CSSProperties\n    title?: string\n    children?: ReactNode\n    icon?: JSX.Element\n    size?: \"small\" | \"large\" | undefined\n    variant?: \"outlined\" | \"contained\" | undefined\n    disabled?: boolean\n    disableReset?: boolean\n    autoRun?: boolean\n    trackName?: string\n    trackProperties?: EventProperties\n    ackResetDelay?: number\n    color?:\n        | \"inherit\"\n        | \"primary\"\n        | \"secondary\"\n        | \"error\"\n        | \"info\"\n        | \"success\"\n        | \"warning\"\n}) {\n    const {\n        onClick,\n        className,\n        style,\n        children,\n        icon,\n        title,\n        disabled,\n        disableReset,\n        autoRun,\n        trackName,\n        trackProperties,\n        ackResetDelay,\n        color,\n        ...others\n    } = props\n    const bus = useBus()\n    const { setError: setAppError } = useSnackbar()\n\n    const [working, setWorking] = useState(false)\n    const [ack, setAck] = useState(false)\n    const [error, setError] = useState(undefined)\n    const { trackEvent } = useAnalytics()\n    const mounted = useMounted()\n\n    const _disabled = disabled || working\n\n    const run = async () => {\n        if (working) return // already working\n\n        if (trackName) trackEvent(\"cmd.\" + trackName, trackProperties)\n        try {\n            setError(undefined)\n            setAck(false)\n            setWorking(true)\n            await onClick(mounted)\n            if (!mounted()) return\n            setAck(true)\n            if (!disableReset) {\n                await bus.delay(ackResetDelay || ACK_RESET_DELAY)\n                if (!mounted()) return\n                setAck(false)\n            }\n        } catch (e) {\n            if (!mounted()) return\n            setAppError(e)\n            setError(e)\n            if (!disableReset) {\n                await bus.delay(ERROR_RESET_DELAY)\n                if (!mounted()) return\n                setError(undefined)\n            }\n        } finally {\n            if (mounted()) setWorking(false)\n        }\n    }\n\n    const handleClick = async (ev: React.MouseEvent<HTMLButtonElement>) => {\n        ev.stopPropagation()\n        ev.preventDefault()\n        run()\n    }\n\n    const statusIcon = error ? <ErrorIcon /> : undefined\n    const modeClassName = error ? classes.error : ack ? classes.ack : undefined\n    const elClassName = clsx(className, modeClassName)\n\n    // run once\n    useEffect(() => {\n        if (autoRun && mounted()) run()\n    }, [autoRun])\n\n    return (\n        <Root>\n            {!children && icon ? (\n                <IconButtonWithTooltip\n                    className={elClassName}\n                    style={style}\n                    onClick={handleClick}\n                    aria-label={title}\n                    title={title}\n                    disabled={_disabled}\n                    color={color}\n                    {...others}\n                >\n                    {statusIcon || icon}\n                </IconButtonWithTooltip>\n            ) : (\n                <OptionalTooltip title={title} placement=\"bottom\">\n                    <Button\n                        className={elClassName}\n                        style={style}\n                        startIcon={icon}\n                        endIcon={statusIcon}\n                        onClick={handleClick}\n                        aria-label={title}\n                        title=\"\"\n                        disabled={_disabled}\n                        color={color}\n                        {...others}\n                    >\n                        {children}\n                    </Button>\n                </OptionalTooltip>\n            )}\n        </Root>\n    )\n}\n","import {\n    CloudConfigurationCmd,\n    CloudConfigurationConnectionStatus,\n    CloudConfigurationEvent,\n    CloudConfigurationReg,\n    CHANGE,\n    EVENT,\n    REPORT_UPDATE,\n    SRV_CLOUD_CONFIGURATION,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport { JDRegister } from \"../jdom/register\"\nimport { JDService } from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { assert } from \"../jdom/utils\"\n\n/**\n * A generic client for cloud configuration servers.\n */\nexport class CloudConfigurationClient extends JDServiceClient {\n    private readonly serverNameRegister: JDRegister\n    private readonly cloudDeviceIdRegister: JDRegister\n    private readonly cloudTypeRegister: JDRegister\n    private readonly connectionStatusRegister: JDRegister\n\n    constructor(service: JDService) {\n        super(service)\n        assert(service.serviceClass === SRV_CLOUD_CONFIGURATION)\n\n        // tell the bus to refresh these register\n        this.serverNameRegister = this.service.register(\n            CloudConfigurationReg.ServerName,\n        )\n        this.cloudDeviceIdRegister = this.service.register(\n            CloudConfigurationReg.CloudDeviceId,\n        )\n        this.cloudTypeRegister = this.service.register(\n            CloudConfigurationReg.CloudType,\n        )\n        this.connectionStatusRegister = this.service.register(\n            CloudConfigurationReg.ConnectionStatus,\n        )\n        this.mount(() =>\n            this.serverNameRegister.subscribe(REPORT_UPDATE, () =>\n                this.emit(CHANGE),\n            ),\n        )\n        this.mount(() =>\n            this.connectionStatusRegister.subscribe(REPORT_UPDATE, () => {\n                this.emit(CHANGE)\n            }),\n        )\n        this.mount(() =>\n            this.service\n                .event(CloudConfigurationEvent.ConnectionStatusChange)\n                .on(EVENT, () => {\n                    this.connectionStatusRegister.scheduleRefresh()\n                }),\n        )\n    }\n\n    get serverName() {\n        return this.serverNameRegister.stringValue\n    }\n\n    get cloudDeviceId() {\n        return this.cloudDeviceIdRegister.stringValue\n    }\n\n    get cloudType() {\n        return this.cloudTypeRegister.stringValue\n    }\n\n    get connectionStatus(): CloudConfigurationConnectionStatus {\n        const reg = this.connectionStatusRegister\n        const status = reg\n            .unpackedValue?.[0] as CloudConfigurationConnectionStatus\n        if (status === undefined) reg.scheduleRefresh()\n        return status\n    }\n\n    /**\n     * Sends a connect command to the hub\n     */\n    async connect() {\n        await this.service.sendCmdAsync(\n            CloudConfigurationCmd.Connect,\n            undefined,\n            true,\n        )\n    }\n\n    /**\n     * Sends a disconnect command to the hub\n     */\n    async disconnect() {\n        await this.service.sendCmdAsync(\n            CloudConfigurationCmd.Disconnect,\n            undefined,\n            true,\n        )\n    }\n\n    /**\n     * Sends a new connection string to the iot debice\n     * @param connectionString\n     */\n    async setConnectionString(connectionString: string) {\n        const data = jdpack<[string]>(\"s\", [connectionString || \"\"])\n        await this.service.sendCmdAsync(\n            CloudConfigurationCmd.SetConnectionString,\n            data,\n            true,\n        )\n    }\n}\n","import React, {\n    ChangeEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n} from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    Chip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    TextField,\n    Typography,\n} from \"@mui/material\"\nimport useServiceClient from \"../../jacdac/useServiceClient\"\nimport { CloudConfigurationClient } from \"../../../jacdac-ts/src/clients/cloudconfigurationclient\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport {\n    CloudConfigurationCmd,\n    CloudConfigurationConnectionStatus,\n    CloudConfigurationEvent,\n    CloudConfigurationReg,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { useId } from \"react\"\nimport SettingsIcon from \"@mui/icons-material/Settings\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport CmdButton from \"../CmdButton\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport ChipList from \"../ui/ChipList\"\nimport useEvent from \"../hooks/useEvent\"\nimport useEventCount from \"../../jacdac/useEventCount\"\nimport DialogTitleWithClose from \"../ui/DialogTitleWithClose\"\nimport useChange from \"../../jacdac/useChange\"\nimport useEffectAsync from \"../useEffectAsync\"\nimport useRegister from \"../hooks/useRegister\"\n\nfunction ConnectionStringDialog(props: {\n    open: boolean\n    setOpen: (v: boolean) => void\n    client: CloudConfigurationClient\n}) {\n    const { client, open, setOpen } = props\n    const [value, setValue] = useState(\"\")\n    const connectionStringId = useId()\n    const handleCancel = () => {\n        setValue(\"\")\n        setOpen(false)\n    }\n    const handleValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value)\n    }\n    const handleOk = async mounted => {\n        await client.setConnectionString(value || \"\")\n        if (!mounted()) return\n        setValue(\"\")\n        setOpen(false)\n    }\n    return (\n        <Dialog open={open} fullWidth={true} maxWidth={\"md\"}>\n            <DialogTitleWithClose onClose={handleCancel}>\n                Enter device connection string\n            </DialogTitleWithClose>\n            <DialogContent>\n                <Typography component=\"p\" variant=\"caption\">\n                    Open your IoT Hub in the Azure portal, select IoT Devices,\n                    select or create a device, copy the primary or secondary\n                    connection string.\n                </Typography>\n                <TextField\n                    sx={{ mt: 2 }}\n                    id={connectionStringId}\n                    value={value}\n                    label=\"Value\"\n                    fullWidth={true}\n                    type=\"password\"\n                    size=\"small\"\n                    placeholder=\"Connection string\"\n                    onChange={handleValueChange}\n                />\n            </DialogContent>\n            <DialogActions>\n                <CmdButton\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!client}\n                    onClick={handleOk}\n                >\n                    Save\n                </CmdButton>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default function DashboardCloudConfiguration(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n    const [open, setOpen] = useState(false)\n\n    const serverNameRegister = useRegister(\n        service,\n        CloudConfigurationReg.ServerName\n    )\n    const cloudDeviceIdRegister = useRegister(\n        service,\n        CloudConfigurationReg.CloudDeviceId\n    )\n    const cloudTypeRegister = useRegister(\n        service,\n        CloudConfigurationReg.CloudType\n    )\n    const [serverName] = useRegisterUnpackedValue<[string]>(\n        serverNameRegister,\n        props\n    )\n    const [cloudDeviceId] = useRegisterUnpackedValue<[string]>(\n        cloudDeviceIdRegister,\n        props\n    )\n    const [cloudType] = useRegisterUnpackedValue<[string]>(\n        cloudTypeRegister,\n        props\n    )\n    const connectionStatusRegister = service.register(\n        CloudConfigurationReg.ConnectionStatus\n    )\n    const [connectionStatus] = useRegisterUnpackedValue<\n        [CloudConfigurationConnectionStatus]\n    >(connectionStatusRegister, props)\n    const messageSentEvent = useEvent(\n        service,\n        CloudConfigurationEvent.MessageSent\n    )\n    const messageSent = useEventCount(messageSentEvent)\n    const factory = useCallback(srv => new CloudConfigurationClient(srv), [])\n    const client = useServiceClient(service, factory)\n    const color = \"primary\"\n    const connected =\n        connectionStatus === CloudConfigurationConnectionStatus.Connected\n\n    const handleConnect = async () => {\n        const cmd = connected\n            ? CloudConfigurationCmd.Disconnect\n            : CloudConfigurationCmd.Connect\n        await service.sendCmdAsync(cmd)\n    }\n    const handleConfigure = () => setOpen(true)\n    return (\n        <>\n            {cloudType && (\n                <Typography component=\"span\" variant=\"subtitle2\">\n                    {cloudType}\n                </Typography>\n            )}\n            <ChipList>\n                {serverName && (\n                    <Chip\n                        color={connected ? \"primary\" : \"default\"}\n                        label={serverName}\n                        onClick={handleConnect}\n                        disabled={connectionStatus === undefined}\n                        title={\n                            CloudConfigurationConnectionStatus[\n                                connectionStatus\n                            ] || \"Waiting...\"\n                        }\n                    />\n                )}\n                {cloudDeviceId && <Chip label={`device: ${cloudDeviceId}`} />}\n                {messageSent !== undefined && (\n                    <Chip label={`messages: ${messageSent}`} />\n                )}\n                <IconButtonWithTooltip\n                    title=\"Configure\"\n                    onClick={handleConfigure}\n                >\n                    <SettingsIcon />\n                </IconButtonWithTooltip>\n            </ChipList>\n            {client && (\n                <ConnectionStringDialog\n                    client={client}\n                    open={open}\n                    setOpen={setOpen}\n                />\n            )}\n        </>\n    )\n}\n","import { useEffect, useRef } from \"react\"\n\nexport default function useMounted(): () => boolean {\n    const mounted = useRef(false)\n    useEffect(() => {\n        mounted.current = true\n        return () => {\n            mounted.current = false\n        }\n    }, [])\n    return () => mounted.current\n}\n","import { styled } from \"@mui/material/styles\"\nimport React, { ReactNode } from \"react\"\n\nconst PREFIX = \"ChipList\"\n\nconst classes = {\n    root: `${PREFIX}root`,\n}\n\nconst Root = styled(\"span\")(({ theme }) => ({\n    [`&.${classes.root}`]: {\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        flexWrap: \"wrap\",\n        \"& > *\": {\n            margin: theme.spacing(0.5),\n        },\n    },\n}))\n\nexport default function ChipList(props: { children: ReactNode }) {\n    const { children } = props\n\n    if (!children) return null\n\n    return <Root className={classes.root}>{children}</Root>\n}\n","import { useState, useEffect } from \"react\"\nimport { JDEvent } from \"../../jacdac-ts/src/jdom/event\"\nimport { CHANGE } from \"../../jacdac-ts/src/jdom/constants\"\n\nexport default function useEventCount(event: JDEvent) {\n    const [count, setCount] = useState(event?.count || 0)\n    useEffect(\n        () =>\n            event?.subscribe(CHANGE, () => {\n                setCount(event.count)\n            }),\n        [event]\n    )\n\n    return count\n}\n","import { useEffect, useState } from \"react\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<T extends JDServiceClient>(\n    service: JDService,\n    factory: (service: JDService) => T,\n    deps: React.DependencyList = []\n) {\n    const [client, setClient] = useState<T>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, ...deps]) // don't use factory in cache!\n\n    return client\n}\n"],"names":["PREFIX","classes","ack","error","Root","styled","color","fontWeight","theme","backgroundColor","ACK_RESET_DELAY","ERROR_RESET_DELAY","others","bus","useBus","setError","useSnackbar","useState","useAnalytics","mounted","useMounted","_disabled","disabled","run","trackEvent","setAck","setWorking","onClick","ackResetDelay","setAppError","handleClick","ev","statusIcon","modeClassName","elClassName","clsx","useEffect","autoRun","CloudConfigurationClient","assert","service","CloudConfigurationReg","CloudConfigurationEvent","reg","status","CloudConfigurationCmd","data","jdpack","connectionString","connectionStringId","useId","handleCancel","setValue","setOpen","handleValueChange","event","handleOk","client","value","mt","serverNameRegister","useRegister","cloudDeviceIdRegister","cloudTypeRegister","useRegisterUnpackedValue","connectionStatusRegister","messageSentEvent","useEvent","messageSent","useEventCount","factory","useCallback","srv","useServiceClient","connected","connectionStatus","CloudConfigurationConnectionStatus","handleConnect","cmd","handleConfigure","cloudType","serverName","cloudDeviceId","useRef","root","display","justifyContent","flexWrap","margin","setCount","deps","c","setClient"],"sourceRoot":""}