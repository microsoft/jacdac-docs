{"componentChunkName":"component---src-templates-service-tsx","path":"/services/wifi/","result":{"pageContext":{"classIdentifier":413852154,"source":"# WIFI\n\n    identifier: 0x18aae1fa\n    camel: wifi\n    group: iot\n    status: rc\n\nDiscovery and connection to WiFi networks. Separate TCP service can be used for data transfer.\n\n## Connection\n\nThe device controlled by this service is meant to connect automatically, once configured.\nTo that end, it keeps a list of known WiFi networks, with priorities and passwords.\nIt will connect to the available network with numerically highest priority,\nbreaking ties in priority by signal strength (typically all known networks have priority of `0`).\nIf the connection fails (due to wrong password, radio failure, or other problem)\nan `connection_failed` event is emitted, and the device will try to connect to the next eligible network.\nWhen networks are exhausted, the scan is performed again and the connection process restarts.\n\nUpdating networks (setting password, priorties, forgetting) does not trigger an automatic reconnect.\n\n## Captive portals\n\nIf the Wifi is not able to join an AP because it needs to receive a password, it may decide to enter a mode\nwhere it waits for user input. Typical example of this mode would be a captive portal or waiting for a BLE interaction.\nIn that situation, the `status_code` should set to `WaitingForInput`.\n\n## Commands\n\n    flags APFlags : u32 {\n        HasPassword = 0x0001\n        WPS = 0x0002\n        HasSecondaryChannelAbove = 0x0004\n        HasSecondaryChannelBelow = 0x0008\n        IEEE_802_11B = 0x0100\n        IEEE_802_11A = 0x0200\n        IEEE_802_11G = 0x0400\n        IEEE_802_11N = 0x0800\n        IEEE_802_11AC = 0x1000\n        IEEE_802_11AX = 0x2000\n        IEEE_802_LongRange = 0x8000\n    }\n    command last_scan_results @ 0x80 {\n        results: pipe\n    }\n    pipe report results {\n        flags: APFlags\n        reserved: u32\n        rssi: i8 dB {typical_min = -100, typical_max = -20}\n        channel: u8 {typical_min = 1, typical_max = 13}\n        bssid: u8[6]\n        ssid: string {max_bytes = 33}\n    }\n\nReturn list of WiFi network from the last scan.\nScans are performed periodically while not connected (in particular, on startup and after current connection drops),\nas well as upon `reconnect` and `scan` commands.\n\n    command add_network @ 0x81 {\n        ssid: string0\n        password?: string0\n    }\n\nAutomatically connect to named network if available. Also set password if network is not open.\n\n    command reconnect @ 0x82 {}\n\nEnable the WiFi (if disabled), initiate a scan, wait for results, disconnect from current WiFi network if any,\nand then reconnect (using regular algorithm, see `set_network_priority`).\n\n    command forget_network @ 0x83 {\n        ssid: string\n    }\n\nPrevent from automatically connecting to named network in future.\nForgetting a network resets its priority to `0`.\n\n    command forget_all_networks @ 0x84 {}\n\nClear the list of known networks.\n\n    command set_network_priority @ 0x85 {\n        priority: i16\n        ssid: string\n    }\n\nSet connection priority for a network.\nBy default, all known networks have priority of `0`.\n\n    command scan @ 0x86 {}\n\nInitiate search for WiFi networks. Generates `scan_complete` event.\n\n    command list_known_networks @ 0x87 {\n        results: pipe\n    }\n    pipe report network_results {\n        priority: i16\n        flags: i16\n        ssid: string\n    }\n\nReturn list of known WiFi networks.\n`flags` is currently always 0.\n\n## Registers\n\n    ro rssi: i8 dB {typical_min = -128, typical_max = -20, preferred_interval=15000 } @ reading\n\nCurrent signal strength. Returns -128 when not connected.\n\n    rw enabled: bool @ intensity\n\nDetermines whether the WiFi radio is enabled. It starts enabled upon reset.\n\n    ro ip_address: bytes {max_bytes = 16} @ 0x181\n\n0, 4 or 16 byte buffer with the IPv4 or IPv6 address assigned to device if any.\n\n    const eui_48: bytes {max_bytes = 6} @ 0x182\n\nThe 6-byte MAC address of the device. If a device does MAC address randomization it will have to \"restart\".\n\n    ro ssid: string {max_bytes = 32} @ 0x183\n\nSSID of the access-point to which device is currently connected.\nEmpty string if not connected.\n\n## Events\n\n    event got_ip @ active\n\nEmitted upon successful join and IP address assignment.\n\n    event lost_ip @ inactive\n\nEmitted when disconnected from network.\n\n    event scan_complete @ 0x80 {\n        num_networks: u16\n        num_known_networks: u16\n    }\n\nA WiFi network scan has completed. Results can be read with the `last_scan_results` command.\nThe event indicates how many networks where found, and how many are considered\nas candidates for connection.\n\n    event networks_changed @ 0x81\n\nEmitted whenever the list of known networks is updated.\n\n    event connection_failed @ 0x82 {\n        ssid: string\n    }\n\nEmitted when when a network was detected in scan, the device tried to connect to it\nand failed.\nThis may be because of wrong password or other random failure.\n","title":"WIFI"}},"staticQueryHashes":["1089213825","2744294623","3360859391","3610498499","3868184074","4022945823","413816803","63159454"]}