{"componentChunkName":"component---src-templates-service-tsx","path":"/services/_system/","result":{"pageContext":{"classIdentifier":536870897,"source":"# Common registers and commands\n\n    camel: system\n\nThis file describes common register and command codes.\n\nThese are defined in ranges separate from the per-service ones.\nNo service actually derives from this file, but services can include packets\ndefined here.\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).\n\n## Commands\n\nCommand codes are subdivided as follows:\n\n-   Commands `0x000-0x07f` - common to all services\n-   Commands `0x080-0xeff` - defined per-service\n-   Commands `0xf00-0xfff` - reserved for implementation\n\nCommands follow.\n\n    define announce_interval 500\n    command announce @ 0x00 { }\n    report { ... }\n\nEnumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every `announce_interval`ms, but other service have to be queried to provide it.\n\n    command get_register @ 0x1000 {}\n    report { ... }\n\nRegisters number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.\n\n    command set_register @ 0x2000 { ... }\n\nRegisters number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.\n\n    command calibrate @ 0x02 { }\n    report { }\n\nRequest to calibrate a sensor. The report indicates the calibration is done.\n\n    report command_not_implemented @ 0x03 {\n        service_command: u16\n        packet_crc: u16\n    }\n\nThis report may be emitted by a server in response to a command (action or register operation)\nthat it does not understand.\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\nNote that it's possible to get an ACK, followed by such an error report.\n\n## Registers\n\nRegister codes are subdivided as follows:\n\n-   Registers `0x001-0x07f` - r/w common to all services\n-   Registers `0x080-0x0ff` - r/w defined per-service\n-   Registers `0x100-0x17f` - r/o common to all services\n-   Registers `0x180-0x1ff` - r/o defined per-service\n-   Registers `0x200-0xeff` - custom, defined per-service\n-   Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n\nThe types listed are typical. Check spec for particular service for exact type,\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\nAll registers default to `0` unless otherwise indicated.\n\n    rw intensity: u32 @ 0x01\n\nThis is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\n\n    rw value: i32 @ 0x02\n\nThe primary value of actuator (eg. servo pulse length, or motor duty cycle).\n\n    const min_value: i32 @ 0x110\n\nThe lowest value that can be reported for the value register.\n\n    const max_value: i32 @ 0x111\n\nThe highest value that can be reported for the value register.\n\n    rw max_power = 500: u16 mA {typical_max = 500} @ 0x07\n\nLimit the power drawn by the service, in mA.\n\n    rw streaming_samples: u8 # @ 0x03\n\nAsks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).\n\n    rw streaming_interval = 100: u32 ms @ 0x04\n\nPeriod between packets of data when streaming in milliseconds.\n\n    ro volatile reading: i32 @ 0x101\n\nRead-only value of the sensor, also reported in streaming.\n\n    rw reading_range: u32 @ 0x08\n\nFor sensors that support it, sets the range (sometimes also described `min`/`max_reading`).\nTypically only a small set of values is supported.\nSetting it to `X` will select the smallest possible range that is at least `X`,\nor if it doesn't exist, the largest supported range.\n\n    const supported_ranges @ 0x10a {\n    repeats:\n        range: u32\n    }\n\nLists the values supported as `reading_range`.\n\n    const min_reading: i32 @ 0x104\n\nThe lowest value that can be reported by the sensor.\n\n    const max_reading: i32 @ 0x105\n\nThe highest value that can be reported by the sensor.\n\n    ro volatile reading_error: u32 @ 0x106\n\nThe real value of whatever is measured is between `reading - reading_error` and `reading + reading_error`. It should be computed from the internal state of the sensor. This register is often, but not always `const`. If the register value is modified,\nsend a report in the same frame of the `reading` report.\n\n    const reading_resolution: u32 @ 0x108\n\nSmallest, yet distinguishable change in reading.\n\n    enum ReadingThreshold: u8 {\n        Neutral = 1\n        Inactive = 2\n        Active = 3\n    }\n    rw inactive_threshold: i32 @ 0x05\n\nThreshold when reading data gets inactive and triggers a `inactive`.\n\n    rw active_threshold: i32 @ 0x06\n\nThresholds when reading data gets active and triggers a `active` event.\n\n    const streaming_preferred_interval: u32 ms @ 0x102\n\nPreferred default streaming interval for sensor in milliseconds.\n\n    const variant: u32 @ 0x107\n\nThe hardware variant of the service.\nFor services which support this, there's an enum defining the meaning.\n\n    rw client_variant: string @ 0x09\n\nAn optional register in the format of a URL query string where the client can provide hints how\nthe device twin should be rendered. If the register is not implemented, the client library can simulate the register client side.\n\n    enum StatusCodes: u16 {\n        Ready = 0\n\n        Initializing = 1\n        Calibrating = 2\n\n        Sleeping = 3\n        WaitingForInput = 4\n\n        CalibrationNeeded = 100\n    }\n    ro status_code? @ 0x103 {\n        code: StatusCodes\n        vendor_code: u16\n    }\n\nReports the current state or error status of the device. `code` is a standardized value from\nthe Jacdac status/error codes. `vendor_code` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet.\n\n    const instance_name?: string @ 0x109\n\nA friendly name that describes the role of this service instance in the device.\n\n## Events\n\nEvents codes are 8-bit and are subdivided as follows:\n\n-   Events `0x00-0x7f` - common to all services\n-   Events `0x80-0xff` - defined per-service\n\n    event active @ 0x01 { }\n\nNotifies that the service has been activated (eg. button pressed, network connected, etc.)\n\n    event inactive @ 0x02 { }\n\nNotifies that the service has been dis-activated.\n\n    event change @ 0x03 { }\n\nNotifies that the some state of the service changed.\n\n    event status_code_changed @ 0x04 {\n        code: StatusCodes\n        vendor_code: u16\n    }\n\nNotifies that the status code of the service changed.\n\n    event neutral @ 0x07 {}\n\nNotifies that the threshold is back between `low` and `high`.\n","title":"Common registers and commands"}},"staticQueryHashes":["1089213825","2744294623","3360859391","3610498499","3868184074","4022945823","413816803","63159454"]}