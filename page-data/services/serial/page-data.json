{"componentChunkName":"component---src-templates-service-tsx","path":"/services/serial/","result":{"pageContext":{"classIdentifier":297461188,"source":"# Serial\n\n    identifier: 0x11bae5c4\n    tags: io\n    \nAn asynchronous serial communication service capable of sending and receiving buffers of data.\nSettings default to 115200 baud 8N1.\n\n## Registers\n\n    rw connected: bool @ intensity\n    \nIndicates if the serial connection is active.\n\n    ro connection_name?: string @ 0x181\n\nUser-friendly name of the connection.\n\n    rw baud_rate = 115200: u32 baud @ 0x80\n    \nA positive, non-zero value indicating the baud rate at which serial communication is be established.\n\n    rw data_bits = 8: u8 { absolute_min: 7, absolute_max: 8 } # @ 0x81\n    \nThe number of data bits per frame. Either 7 or 8.\n\n    rw stop_bits = 1: u8 # { absolute_min: 1, absolute_max: 2 } @ 0x82\n    \nThe number of stop bits at the end of a frame. Either 1 or 2.\n\n    enum ParityType: u8 {\n      None = 0,\n      Even = 1,\n      Odd = 2\n    }\n    rw parity_mode = 0: ParityType @ 0x83\n\nThe parity mode.\n\n    rw buffer_size: u8 # @ 0x84\n    \nA positive, non-zero value indicating the size of the read and write buffers that should be created.\n\n## Commands\n\n    unique command send @ 0x80 {\n        data: bytes\n    }\n\nSend a buffer of data over the serial transport.\n\n    report received @ 0x80 {\n       data: bytes\n    }\n    \nRaised when a buffer of data is received.\n","title":"Serial"}},"staticQueryHashes":["1089213825","2744294623","3360859391","3610498499","3868184074","4022945823","413816803","63159454"]}