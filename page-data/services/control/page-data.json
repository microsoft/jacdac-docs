{"componentChunkName":"component---src-templates-service-tsx","path":"/services/control/","result":{"pageContext":{"classIdentifier":0,"source":"# Control\n\n    identifier: 0x00000000\n    tags: C, 8bit\n    status: stable\n\nControl service is always service index `0`.\nIt handles actions common to all services on a device.\n\nNote: some of the optional features (including `flood_ping`, `mcu_temperature`, and all string registers)\nare not implemented in `8bit` version.\n\n## Commands\n\n    flags AnnounceFlags : u16 {\n        RestartCounterSteady =        0x000F,\n        RestartCounter1 =             0x0001,\n        RestartCounter2 =             0x0002,\n        RestartCounter4 =             0x0004,\n        RestartCounter8 =             0x0008,\n        StatusLightNone =             0x0000,\n        StatusLightMono =             0x0010,\n        StatusLightRgbNoFade =        0x0020,\n        StatusLightRgbFade =          0x0030,\n        SupportsACK =                 0x0100,\n        SupportsBroadcast =           0x0200,\n        SupportsFrames =              0x0400,\n        IsClient =                    0x0800,\n        SupportsReliableCommands =    0x1000,\n    }\n    command services @ announce { }\n    report {\n        flags: AnnounceFlags\n        packet_count: u8\n        reserved: u8\n    repeats:\n        service_class: u32\n    }\n\nThe `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of reports sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.\n\n    command noop @ 0x80 { }\n\nDo nothing. Always ignored. Can be used to test ACKs.\n\n    command identify? @ 0x81 { }\n\nBlink the status LED (262ms on, 262ms off, four times, with the blue LED) or otherwise draw user's attention to device with no status light.\nFor devices with status light (this can be discovered in the announce flags), the client should\nsend the sequence of status light command to generate the identify animation.\n\n    command reset? @ 0x82 { }\n\nReset device. ACK may or may not be sent.\n\n    unique command flood_ping? @ 0x83 {\n        num_responses: u32\n        start_counter: u32\n        size: u8 B\n    }\n    report {\n        counter: u32\n        dummy_payload: bytes\n    }\n\nThe device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\n\n    command set_status_light @ 0x84 {\n        to_red: u8\n        to_green: u8\n        to_blue: u8\n        speed: u8\n    }\n\nInitiates a color transition of the status light from its current color to the one specified.\nThe transition will complete in about `512 / speed` frames\n(each frame is currently 100ms, so speed of `51` is about 1 second and `26` 0.5 second).\nAs a special case, if speed is `0` the transition is immediate.\nIf MCU is not capable of executing transitions, it can consider `speed` to be always `0`.\nIf a monochrome LEDs is fitted, the average value of `red`, `green`, `blue` is used.\nIf intensity of a monochrome LED cannot be controlled, any value larger than `0` should be considered\non, and `0` (for all three channels) should be considered off.\n\n    command proxy? @ 0x85 {}\n\nForce client device into proxy mode.\n\n    command reliable_commands? @ 0x86 {\n        seed: u32\n    }\n    report {\n        commands: pipe\n    }\n    pipe command wrapped_command {\n        service_size: u8\n        service_index: u8\n        service_command: u16\n        payload: bytes\n    }\n\nThis opens a pipe to the device to provide an alternative, reliable transport of actions\n(and possibly other commands).\nThe commands are wrapped as pipe data packets.\nMultiple invocations of this command with the same `seed` are dropped\n(and thus the command is not `unique`); otherwise `seed` carries no meaning\nand should be set to a random value by the client.\nNote that while the commands sends this way are delivered exactly once, the\nresponses might get lost.\n\n    command standby? @ 0x87 {\n        duration: u32 ms\n    }\n\nAttempt to put devices into lowest power sleep mode for a specified time - most likely involving a full reset on wake-up.\n\n## Registers\n\n    rw internal reset_in? : u32 us @ 0x80\n\nWhen set to value other than `0`, it asks the device to reset after specified number of microseconds.\nThis is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\nsay 1.6s every 0.5s.\n\n    const device_description?: string @ 0x180\n\nIdentifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\n\n    const product_identifier? : u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x181\n\nA numeric code for the string above; used to identify firmware images and devices.\n\n    const bootloader_product_identifier?: u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x184\n\nTypically the same as `product_identifier` unless device was flashed by hand; the bootloader will respond to that code.\n\n    const firmware_version?: string @ 0x185\n\nA string describing firmware version; typically semver.\n\n    ro volatile mcu_temperature?: i16 Â°C { preferred_interval=60000, typical_min = -10, typical_max = 150 } @ 0x182\n\nMCU temperature in degrees Celsius (approximate).\n\n    ro volatile uptime?: u64 us { preferred_interval=60000 } @ 0x186\n\nNumber of microseconds since boot.\n","title":"Control"}},"staticQueryHashes":["1089213825","2744294623","3360859391","3610498499","3868184074","4022945823","413816803","63159454"]}