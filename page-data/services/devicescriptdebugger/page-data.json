{"componentChunkName":"component---src-templates-service-tsx","path":"/services/devicescriptdebugger/","result":{"pageContext":{"classIdentifier":358308672,"source":"# DeviceScript Debugger\n\n    identifier: 0x155b5b40\n    tags: management, devicescript\n    restricted: true\n    camel: devsDbg\n\nAllows for inspecting and affecting the state of a running DeviceScript program.\n\n## Commands\n\n    enum ValueTag : u8 {\n        Number = 0x01         // v0:v1 - f64\n        Special = 0x02        // v0 - ValueSpecial\n        Fiber = 0x03          // v0 - FiberHandle\n        BuiltinObject = 0x05  // v0 - DEVS_BUILTIN_OBJECT_*\n\n        Exotic = 0x06\n        Unhandled = 0x07\n\n        // index in v0\n        ImgBuffer = 0x20\n        ImgStringBuiltin = 0x21\n        ImgStringAscii = 0x22\n        ImgStringUTF8 = 0x23\n        ImgRole = 0x30          // v1 has number of attached properties\n        ImgFunction = 0x31      // never returned, can be used in read_*\n        ImgRoleMember = 0x32    // v0 has role in low DEVS_ROLE_BITS (15) and offset into embedded specs in the high bits\n\n        // pointer in v0\n        // v1 has number of properties (for map) or indexed length (otherwise)\n        //   if highest bit of v1 is set, named properties are also present\n        ObjArray = 0x51\n        ObjMap = 0x52\n        ObjBuffer = 0x53\n        ObjString = 0x54\n        ObjStackFrame = 0x55\n        ObjPacket = 0x56\n        ObjBoundFunction = 0x57\n        ObjOpaque = 0x58\n\n        ObjAny = 0x50    // never returned, can be used in read_*\n        ObjMask = 0xF0\n\n        User1 = 0xF1\n        User2 = 0xF2\n        User3 = 0xF3\n        User4 = 0xF4\n    }\n\n    enum ValueSpecial : u8 {\n        Undefined = 0\n        True = 1\n        False = 2\n        Null = 3\n\n        // These can be used in read_* and are never returned\n        Globals = 100\n        CurrentException = 101\n    }\n\n    type FunIdx : u16 {\n        None = 0\n        Main = 49999\n        FirstBuiltIn = 50000\n    }\n\n    type FiberHandle : u32 {\n        None = 0\n    }\n    type ProgramCounter : u32\n\n    type ObjStackFrame : u32 {\n        Null = 0\n    }\n\n    // either ObjString or one of ImgString*\n    type String : u32 {\n        StaticIndicatorMask = 0x8000_0001\n        StaticTagMask = 0x7f00_0000\n        StaticIndexMask = 0x00ff_fffe\n\n        Unhandled = 0\n    }\n\n    command read_fibers @ 0x80 {\n        results: pipe\n    }\n    pipe report fiber {\n        handle: FiberHandle\n        initial_fn: FunIdx\n        curr_fn: FunIdx\n    }\n\nList the currently running fibers (threads).\n\n    command read_stack @ 0x81 {\n        results: pipe\n        fiber_handle: FiberHandle\n    }\n    pipe report stackframe {\n        self: ObjStackFrame\n        pc: ProgramCounter\n        closure: ObjStackFrame\n        fn_idx: FunIdx\n        reserved: u16\n    }\n\nList stack frames in a fiber.\n\n    command read_indexed_values @ 0x82 {\n        results: pipe\n        v0: u32\n        tag: ValueTag\n        reserved: u8\n        start: u16\n        length: u16\n    }\n    pipe report value {\n        v0: u32\n        v1: u32\n        fn_idx: FunIdx\n        tag: ValueTag\n    }\n\nRead variable slots in a stack frame, elements of an array, etc.\n\n    command read_named_values @ 0x83 {\n        results: pipe\n        v0: u32\n        tag: ValueTag\n    }\n    pipe report key_value {\n        key: String\n        v0: u32\n        v1: u32\n        fn_idx: FunIdx\n        tag: ValueTag\n    }\n\nRead variable slots in an object.\n\n    command read_value @ 0x84 {\n        v0: u32\n        tag: ValueTag\n    }\n    report {\n        v0: u32\n        v1: u32\n        fn_idx: FunIdx\n        tag: ValueTag\n    }\n\nRead a specific value.\n\n    command read_bytes @ 0x85 {\n        results: pipe\n        v0: u32\n        tag: ValueTag\n        reserved: u8\n        start: u16\n        length: u16\n    }\n    pipe report bytes_value {\n        data: bytes\n    }\n\nRead bytes of a string (UTF8) or buffer value.\n\n    command set_breakpoints @ 0x90 {\n    repeats:\n        break_pc: ProgramCounter\n    }\n\nSet breakpoint(s) at a location(s).\n\n    command clear_breakpoints @ 0x91 {\n    repeats:\n        break_pc: ProgramCounter\n    }\n\nClear breakpoint(s) at a location(s).\n\n    command clear_all_breakpoints @ 0x92 {}\n\nClear all breakpoints.\n\n    command resume @ 0x93 {}\n\nResume program execution after a breakpoint was hit.\n\n    command halt @ 0x94 {}\n\nTry suspending current program. Client needs to wait for `suspended` event afterwards.\n\n    command restart_and_halt @ 0x95 {}\n\nRun the program from the beginning and halt on first instruction.\n\n    flags StepFlags: u16 {\n        StepOut = 0x0001 // also stop when the stackframe returns\n        StepIn = 0x0002  // also stop when the stackframe calls something\n        Throw = 0x0004   // also stop on throw which would pop the stackframe\n    }\n    command step @ 0x96 {\n        stackframe: ObjStackFrame\n        flags: StepFlags\n        reserved: u16\n    repeats:\n        break_pc: ProgramCounter\n    }\n\nSet breakpoints that only trigger in the specified stackframe and resume program.\nThe breakpoints are cleared automatically on next suspension (regardless of the reason).\n\n## Registers\n\n    rw enabled: bool @ intensity\n\nTurn on/off the debugger interface.\n\n    rw break_at_unhandled_exn: bool @ 0x80\n\nWheather to place breakpoint at unhandled exception.\n\n    rw break_at_handled_exn: bool @ 0x81\n\nWheather to place breakpoint at handled exception.\n\n    ro is_suspended: bool @ 0x180\n\nIndicates if the program is currently suspended.\nMost commands can only be executed when the program is suspended.\n\n## Events\n\n    enum SuspensionType : u8 {\n        None = 0\n        Breakpoint = 1\n        UnhandledException = 2\n        HandledException = 3\n        Halt = 4\n        Panic = 5\n        Restart = 6\n        DebuggerStmt = 7\n        Step = 8\n    }\n\n    event suspended @ 0x80 {\n        fiber: FiberHandle\n        type: SuspensionType\n    }\n\nEmitted when the program hits a breakpoint or similar event in the specified fiber.\n","title":"DeviceScript Debugger"}},"staticQueryHashes":["1089213825","2744294623","3360859391","3610498499","3868184074","4022945823","413816803","63159454"]}