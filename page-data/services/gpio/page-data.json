{"componentChunkName":"component---src-templates-service-tsx","path":"/services/gpio/","result":{"pageContext":{"classIdentifier":282614377,"source":"# GPIO\n\n    identifier: 0x10d85a69\n    tags: io\n    camel: GPIO\n    extends: _sensor\n\nAccess to General Purpose Input/Output (GPIO) pins on a board.\nThe pins are indexed `0 ... num_pins-1`.\nThe indexing does not correspond to hardware pin names, nor labels on the board (see `get_pin_info` command for that),\nand should **not** be exposed to the user.\n\n## Registers\n\n    ro state @ reading {\n        digital_values: bytes\n    }\n\nFor every pin set to `Input*` the corresponding **bit** in `digital_values` will be `1` if and only if\nthe pin is high.\nFor other pins, the bit is `0`.\nThis is normally streamed at low-ish speed, but it's also automatically reported whenever\na digital input pin changes value (throttled to ~100Hz).\nThe analog values can be read with the `ADC` service.\n\n    ro num_pins: u8 # { absolute_max=128 } @ 0x180\n\nNumber of pins that can be operated through this service.\n\n\n## Commands\n\n    enum Mode : u8 {\n        Off            = 0x00\n        OffPullUp      = 0x10\n        OffPullDown    = 0x20\n        Input          = 0x01\n        InputPullUp    = 0x11\n        InputPullDown  = 0x21\n        Output         = 0x02\n        OutputHigh     = 0x12\n        OutputLow      = 0x22\n        AnalogIn       = 0x03\n        Alternative    = 0x04\n        BaseModeMask   = 0x0F\n    }\n    command configure @ 0x80 {\n    repeats:\n        pin: u8\n        mode: Mode\n    }\n\nConfigure (including setting the value) zero or more pins.\n`Alternative` settings means the pin is controlled by other service (SPI, I2C, UART, PWM, etc.).\n\n    flags Capabilities : u16 {\n        PullUp     = 0x0001\n        PullDown   = 0x0002\n        Input      = 0x0004\n        Output     = 0x0008\n        Analog     = 0x0010\n    }\n    command pin_info @ 0x81 {\n        pin: u8\n    }\n    report {\n        pin: u8\n        hw_pin: u8\n        capabilities: Capabilities\n        mode: Mode\n        label: string\n    }\n\nReport capabilities and name of a pin.\n\n    command pin_by_label @ 0x83 {\n        label: string\n    }\n    report {\n        pin: u8\n        hw_pin: u8\n        capabilities: Capabilities\n        mode: Mode\n        label: string\n    }\n\nThis responds with `pin_info` report.\n\n    command pin_by_hw_pin @ 0x84 {\n        hw_pin: u8\n    }\n    report {\n        pin: u8\n        hw_pin: u8\n        capabilities: Capabilities\n        mode: Mode\n        label: string\n    }\n\nThis responds with `pin_info` report.\n","title":"GPIO"}},"staticQueryHashes":["1089213825","2744294623","3360859391","3610498499","3868184074","4022945823","413816803","63159454"]}