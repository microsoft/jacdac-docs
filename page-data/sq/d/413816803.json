{"data":{"allPlainText":{"nodes":[{"content":"import React from \"react\"\n\nexport default function Page(props: { location: { pathname: string } }) {\n    const { location } = props\n    const { pathname } = location\n\n    return (\n        <>\n            <h1>404 Not Found</h1>\n            <p>\n                You just hit <code>{pathname}</code> that doesn&#39;t exist...\n                the sadness.\n            </p>\n        </>\n    )\n}\n","parent":{"name":"404","ext":".tsx"}},{"content":"import React, { useContext, useEffect } from \"react\"\nimport Dashboard from \"../components/dashboard/Dashboard\"\nimport { UIFlags } from \"../jacdac/providerbus\"\n\nexport const frontmatter = {\n    title: \"Dashboard\",\n}\nimport CoreHead from \"../components/shell/Head\"\nimport AppContext, { DrawerType } from \"../components/AppContext\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    const { drawerType, setDrawerType } = useContext(AppContext)\n    useEffect(() => {\n        if (drawerType === DrawerType.Dashboard) setDrawerType(DrawerType.None)\n    }, [])\n\n    return (\n        <Dashboard\n            showAvatar={true}\n            showHeader={true}\n            showConnect={UIFlags.connect}\n            showStartSimulators={true}\n            showStartRoleSimulators={true}\n            showDeviceProxyAlert={true}\n        />\n    )\n}\n","parent":{"name":"dashboard","ext":".tsx"}},{"content":"import React from \"react\"\nimport FilteredDeviceSpecificationList from \"../components/specification/FilteredDeviceSpecificationList\"\n\nexport const frontmatter = {\n    title: \"Devices\",\n}\nimport CoreHead from \"../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    return (\n        <FilteredDeviceSpecificationList\n            showServiceList={true}\n            showSearch={true}\n        />\n    )\n}\n","parent":{"name":"devices","ext":".tsx"}},{"content":"import { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport PageLinkList from \"../components/ui/PageLinkList\"\n\nexport const frontmatter = {\n    title: \"GitHub repositories\",\n}\nimport CoreHead from \"../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    return (\n        <>\n            <h1>GitHub Repositories</h1>\n            <p>\n                Jacdac is Open Source on GitHub. Here is a map to help you find\n                the part you want:\n            </p>\n            <h2>Discussions</h2>\n            <p>\n                Post your questions, bugs, suggestions on the centralized\n                discussions at{\" \"}\n                <a href=\"https://github.com/microsoft/jacdac/discussions\">\n                    https://github.com/microsoft/jacdac/discussions\n                </a>\n                .\n            </p>\n            <h2>Videos on Youtube</h2>\n            <p>\n                The{\" \"}\n                <a href=\"https://www.youtube.com/channel/UCDDeOurixeITal31eI4Ga2g\">\n                    Jacdac channel\n                </a>{\" \"}\n                hosts various videos on using Jacdac.\n            </p>\n            <h2>Specification and Schematics</h2>\n            <PageLinkList\n                dense\n                nodes={[\n                    {\n                        title: \"microsoft/jacdac\",\n                        description:\n                            \"Service specifications and device catalog\",\n                        href: \"https://github.com/microsoft/jacdac\",\n                    },\n                    {\n                        title: \"microsoft/jacdac-ddk\",\n                        description: \"Device Development Kit\",\n                        href: \"https://github.com/microsoft/jacdac-ddk\",\n                    },\n                ]}\n            />\n            <h2>Module Development</h2>\n\n            <h3>Server SDKs</h3>\n            <PageLinkList\n                dense\n                nodes={[\n                    {\n                        title: \"microsoft/jacdac-c\",\n                        description: \"C Firmware library\",\n                        href: \"https://github.com/microsoft/jacdac-c\",\n                    },\n                    {\n                        title: \"microsoft/jacdac-stm32x0\",\n                        description: \"Firmware library for STM32F0 and similar\",\n                        href: \"https://github.com/microsoft/jacdac-stm32x0\",\n                    },\n                    {\n                        title: \"microsoft/jacdac-msr-modules\",\n                        description:\n                            \"Firmware for prototype Jacdac modules made by Microsoft Research\",\n                        href: \"https://github.com/microsoft/jacdac-msr-modules\",\n                    },\n                    {\n                        title: \"microsoft/jacdac-module-template\",\n                        description:\n                            \"Template repository for firmware for a STM32G0-based Jacdac module\",\n                        href: \"https://github.com/microsoft/jacdac-module-template\",\n                    },\n                    {\n                        title: \"microsoft/jacdac-esp32\",\n                        description: \"Firmware library for ESP32 IDF\",\n                        href: \"https://github.com/microsoft/jacdac-esp32\",\n                    },\n                    {\n                        title: \"microsoft/jacdac-pico\",\n                        description: \"Firmware library for Raspberry Pi Pico\",\n                        href: \"https://github.com/microsoft/jacdac-pico\",\n                    },\n                    {\n                        title: \"microsoft/jacdac-padauk\",\n                        description: \"Firmware library for PADAUK\",\n                        href: \"https://github.com/microsoft/jacdac-padauk\",\n                    },\n                    {\n                        title: \"microsoft/jacdac-posix\",\n                        description:\n                            \"Firmware library for native Jacdac on desktop\",\n                        href: \"https://github.com/microsoft/jacdac-posix\",\n                    },\n                    {\n                        title: \"microsoft/codal-jacdac\",\n                        description: \"Jacdac-C SDK integration for CODAL\",\n                        href: \"https://github.com/microsoft/codal-jacdac\",\n                    },\n                ]}\n            />\n\n            <h2>Client SDKs</h2>\n\n            <PageLinkList\n                dense\n                nodes={[\n                    {\n                        title: \"microsoft/jacdac-ts\",\n                        description: \"TypeScript/JavaScript library\",\n                        href: \"https://github.com/microsoft/jacdac-ts\",\n                    },\n                    {\n                        title: \"microsoft/devicescript\",\n                        description: \"DeviceScript compiler and runtime\",\n                        href: \"https://github.com/microsoft/devicescript\",\n                    },\n                    {\n                        title: \"microsoft/pxt-jacdac\",\n                        description: \"MakeCode library\",\n                        href: \"https://github.com/microsoft/pxt-jacdac\",\n                    },\n                ]}\n            />\n\n            <h2>Integrations</h2>\n\n            <PageLinkList\n                dense\n                nodes={[\n                    {\n                        title: \"microsoft/jacdac-docs\",\n                        description: \"Documentation, web tools and dashboard\",\n                        href: \"https://github.com/microsoft/jacdac-docs\",\n                    },\n                    {\n                        title: \"microsoft/jacdac-cli\",\n                        description: \"Command line interface\",\n                        href: \"https://github.com/microsoft/jacdac-cli\",\n                    },\n                    {\n                        title: \"microsoft/react-jacdac\",\n                        description: \"React library\",\n                        href: \"https://github.com/microsoft/react-jacdac\",\n                    },\n                    {\n                        title: \"microsoft/microcode\",\n                        description: \"MicroCode\",\n                        href: \"https://github.com/microsoft/microcode\",\n                    },\n                    {\n                        title: \"microsoft/devicescript\",\n                        description: \"DeviceScript\",\n                        href: \"https://github.com/microsoft/devicescript\",\n                    },\n                ]}\n            />\n\n            <h2> Microsoft Open Source Code of Conduct</h2>\n\n            <p>\n                This project is hosted at{\" \"}\n                <Link href=\"https://github.com/microsoft/jacdac-docs\">\n                    https://github.com/microsoft/jacdac-docs\n                </Link>\n                . This project has adopted the{\" \"}\n                <Link href=\"https://opensource.microsoft.com/codeofconduct/\">\n                    Microsoft Open Source Code of Conduct\n                </Link>\n                .\n            </p>\n\n            <h3>Resources</h3>\n            <ul>\n                <li>\n                    <Link href=\"https://opensource.microsoft.com/codeofconduct/\">\n                        Microsoft Open Source Code of Conduct\n                    </Link>\n                </li>\n                <li>\n                    <Link href=\"https://opensource.microsoft.com/codeofconduct/faq/\">\n                        Microsoft Code of Conduct FAQ\n                    </Link>\n                </li>\n                <li>\n                    Contact{\" \"}\n                    <Link href=\"mailto:opencode@microsoft.com\">\n                        opencode@microsoft.com\n                    </Link>{\" \"}\n                    with questions or concerns\n                </li>\n            </ul>\n        </>\n    )\n}\n","parent":{"name":"github","ext":".tsx"}},{"content":"import React from \"react\"\nimport Home from \"../components/home/Home\"\n\nimport CoreHead from \"../components/shell/Head\"\nexport const frontmatter = {\n    title: \"Jacdac\",\n}\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default Home\n","parent":{"name":"index","ext":".tsx"}},{"content":"import React from \"react\"\nexport const frontmatter = {\n    title: \"Application Programming\",\n    hideBreadcrumbs: true,\n}\nimport CoreHead from \"../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nimport Clients from \"../components/home/Clients\"\nexport default Clients\n","parent":{"name":"clients","ext":".tsx"}},{"content":"import { Divider, Grid, InputAdornment, TextField } from \"@mui/material\"\nimport React, { useMemo, useState } from \"react\"\nimport ServiceSpecificationList from \"../components/specification/ServiceSpecificationList\"\nimport { useDebounce } from \"use-debounce\"\nimport SearchIcon from \"@mui/icons-material/Search\"\nimport ChipList from \"../components/ui/ChipList\"\nimport { isSensor, serviceSpecifications } from \"../../jacdac-ts/src/jdom/spec\"\nimport { arrayConcatMany, unique } from \"../../jacdac-ts/src/jdom/utils\"\nimport MakeCodeIcon from \"../components/icons/MakeCodeIcon\"\nimport KindIcon from \"../components/KindIcon\"\nimport { serviceProviderDefinitionFromServiceClass } from \"../../jacdac-ts/src/servers/servers\"\nimport JacdacIcon from \"../components/icons/JacdacIcon\"\nimport SpeedIcon from \"@mui/icons-material/Speed\"\nimport {\n    SERVICE_MIXIN_NODE_NAME,\n    VIRTUAL_DEVICE_NODE_NAME,\n} from \"../../jacdac-ts/src/jdom/constants\"\nimport { useId } from \"react\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport { resolveMakecodeServiceFromClassIdentifier } from \"../components/makecode/services\"\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\"\nimport { isMixinService } from \"../../jacdac-ts/jacdac-spec/spectool/jdutils\"\nimport useDeviceCatalog from \"../components/devices/useDeviceCatalog\"\nimport FilterChip from \"../components/ui/FilterChip\"\n\nimport CoreHead from \"../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} title=\"Services\" />\n\ninterface ServiceFilter {\n    query: string\n    tag?: string\n    sensors?: boolean\n    makeCode?: boolean\n    mixin?: boolean\n    simulators?: boolean\n    devices?: boolean\n    test?: boolean\n}\n\nexport default function ServiceCatalog() {\n    const [filter, setFilter] = useState<ServiceFilter>({\n        query: \"\",\n    })\n    const [deboundedFilter] = useDebounce(filter, 200)\n    const { query, tag, makeCode, mixin, simulators, devices, sensors, test } =\n        filter\n    const deviceCatalog = useDeviceCatalog()\n    const searchId = useId()\n    const allTags = useMemo(\n        () =>\n            unique(\n                arrayConcatMany(\n                    serviceSpecifications().map(srv => [srv.group, ...srv.tags])\n                ).filter(t => !!t)\n            ),\n        []\n    )\n    const services = useMemo(() => {\n        const m = query.toLowerCase().trim()\n        let r = serviceSpecifications()\n        if (m) {\n            const filter = (s: string) => s?.toLowerCase().indexOf(m) > -1\n            r = r.filter(\n                srv =>\n                    filter(srv.name) ||\n                    filter(srv.notes[\"short\"]) ||\n                    m.indexOf(srv.classIdentifier.toString()) > -1 ||\n                    m.indexOf(srv.classIdentifier.toString(16)) > -1\n            )\n        }\n        if (tag) {\n            r = r.filter(srv => srv.group === tag || srv.tags.indexOf(tag) > -1)\n        }\n        if (makeCode)\n            r = r.filter(\n                srv =>\n                    !!resolveMakecodeServiceFromClassIdentifier(\n                        srv.classIdentifier\n                    )\n            )\n        if (mixin) r = r.filter(srv => isMixinService(srv.classIdentifier))\n        if (simulators)\n            r = r.filter(\n                srv =>\n                    !!serviceProviderDefinitionFromServiceClass(\n                        srv.classIdentifier\n                    )\n            )\n        if (devices)\n            r = r.filter(\n                srv =>\n                    !!deviceCatalog.specificationsForService(\n                        srv.classIdentifier\n                    )?.length\n            )\n        if (sensors) r = r.filter(srv => isSensor(srv))\n        return r\n    }, [deboundedFilter])\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        setFilter({\n            ...filter,\n            query: event.target.value,\n        })\n    const handleTagClick = (t: string) => () => {\n        setFilter({ ...filter, tag: tag === t ? \"\" : t })\n    }\n    const handleMakeCodeClick = () =>\n        setFilter({ ...filter, makeCode: !makeCode })\n    const handleMixinClick = () => setFilter({ ...filter, mixin: !mixin })\n    const handleTestClick = () => setFilter({ ...filter, test: !test })\n    const handleSimulatorClick = () =>\n        setFilter({ ...filter, simulators: !simulators })\n    const handleDevicesClick = () => setFilter({ ...filter, devices: !devices })\n    const handleSensorsClick = () => setFilter({ ...filter, sensors: !sensors })\n\n    return (\n        <>\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <TextField\n                        id={searchId}\n                        margin=\"normal\"\n                        type=\"search\"\n                        size=\"small\"\n                        variant=\"outlined\"\n                        label=\"Search services\"\n                        aria-label=\"Search services\"\n                        fullWidth={true}\n                        value={query}\n                        onChange={handleChange}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <SearchIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ChipList>\n                        {allTags.map(t => (\n                            <FilterChip\n                                key={t}\n                                label={t}\n                                onClick={handleTagClick(t)}\n                                value={tag === t}\n                            />\n                        ))}\n                        <Divider orientation=\"vertical\" flexItem />\n                        <FilterChip\n                            label=\"Sensors\"\n                            icon={<SpeedIcon />}\n                            value={sensors}\n                            onClick={handleSensorsClick}\n                        />\n                        <FilterChip\n                            label=\"Simulator\"\n                            icon={<KindIcon kind={VIRTUAL_DEVICE_NODE_NAME} />}\n                            value={simulators}\n                            onClick={handleSimulatorClick}\n                        />\n                        <FilterChip\n                            label=\"Devices\"\n                            icon={<JacdacIcon />}\n                            onClick={handleDevicesClick}\n                            value={devices}\n                        />\n                        <FilterChip\n                            label=\"Mixin\"\n                            icon={<KindIcon kind={SERVICE_MIXIN_NODE_NAME} />}\n                            value={mixin}\n                            onClick={handleMixinClick}\n                        />\n                        <FilterChip\n                            label=\"MakeCode\"\n                            icon={<MakeCodeIcon />}\n                            value={makeCode}\n                            onClick={handleMakeCodeClick}\n                        />\n                        <FilterChip\n                            label=\"Test\"\n                            icon={<CheckCircleIcon />}\n                            value={test}\n                            onClick={handleTestClick}\n                        />\n                    </ChipList>\n                </Grid>\n                {!services.length && (\n                    <Grid item>\n                        There are no services matching this request.\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    <ServiceSpecificationList\n                        title=\"Stable\"\n                        status={[\"stable\"]}\n                        infrastructure={false}\n                        services={services}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ServiceSpecificationList\n                        title=\"Release Candidate\"\n                        status={[\"rc\"]}\n                        infrastructure={false}\n                        services={services}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ServiceSpecificationList\n                        title=\"Experimental\"\n                        status={[\"experimental\"]}\n                        infrastructure={false}\n                        services={services}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ServiceSpecificationList\n                        title=\"Jacdac\"\n                        infrastructure={true}\n                        services={services}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ServiceSpecificationList\n                        title=\"Deprecated\"\n                        status={[\"deprecated\"]}\n                        infrastructure={false}\n                        services={services}\n                    />\n                </Grid>\n            </Grid>\n            <h2>See Also</h2>\n            <ul>\n                <li>\n                    Add a new service using the{\" \"}\n                    <Link to=\"/tools/service-editor/\">\n                        Service Specification Editor\n                    </Link>\n                    .\n                </li>\n                <li>\n                    See the{\" \"}\n                    <Link to=\"/tools/service-status/\">service status</Link> page\n                    for the current level of support a services .\n                </li>\n            </ul>\n        </>\n    )\n}\n","parent":{"name":"services","ext":".tsx"}},{"content":"import React, { useEffect, useState } from \"react\"\nimport { JDClient } from \"../../../jacdac-ts/src/jdom/client\"\nimport { CHANGE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport useChange from \"../../jacdac/useChange\"\nimport { Button, Grid } from \"@mui/material\"\n\n/**\n * Razor Chroma SDK client\n * Docs: https://assets.razerzone.com/dev_portal/REST/html/index.html\n */\nclass ChromaClient extends JDClient {\n    private connectionInfo: {\n        sessionid: string\n        uri: string\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private heartbeatInterval: any\n    private supported = true\n\n    constructor() {\n        super()\n        this.mount(() => this.stop())\n    }\n\n    get connected() {\n        return !!this.connectionInfo\n    }\n\n    private startHeartbeat() {\n        this.heartbeatInterval = setInterval(() => {\n            if (this.unmounted) clearInterval(this.heartbeatInterval)\n            this.fetch(\"/heartbeat\", \"PUT\")\n        }, 2000)\n    }\n\n    async start() {\n        if (!this.supported || this.connected) return\n\n        console.debug(\"razor: connecting\", { conn: this.connectionInfo })\n        const resp = await fetch(\"https://chromasdk.io:54236/razer/chromasdk\", {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                title: \"Microsoft Jacdac\",\n                description: \"Jacdac interface to Razer\",\n                author: {\n                    name: \"Microsoft\",\n                    contact: \"jacdac@microsoft.com\",\n                },\n                device_supported: [\n                    \"keyboard\",\n                    \"mouse\",\n                    \"headset\",\n                    \"mousepad\",\n                    \"keypad\",\n                    \"chromalink\",\n                ],\n                category: \"application\",\n            }),\n        })\n        console.log({ resp })\n        if (this.unmounted) return\n        if (resp.status === 200) {\n            this.connectionInfo = await resp.json()\n            if (this.unmounted) return\n            this.startHeartbeat()\n            this.emit(CHANGE)\n        } else if (resp.status == 404) {\n            this.supported = false\n            console.log(`razor not supported`)\n            this.emit(CHANGE)\n        }\n    }\n\n    private async stop() {\n        console.debug(\"razor: disconnecting\")\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval)\n            this.heartbeatInterval = undefined\n        }\n        if (this.connectionInfo) {\n            const { uri } = this.connectionInfo\n            this.connectionInfo = undefined\n            try {\n                await fetch(uri, {\n                    method: \"DELETE\",\n                    headers: { \"content-type\": \"application/json\" },\n                })\n            } catch (e) {\n                console.debug(e)\n            }\n        }\n    }\n\n    async startHeadsetEffect(\n        effect: \"none\" | \"custom\" | \"static\",\n        data: number | [number, number, number, number, number]\n    ) {\n        let body: unknown\n        const ceffect = `CHROMA_${effect.toUpperCase()}`\n        if (ceffect === \"CHROMA_NONE\") {\n            body = { effect: ceffect }\n        } else if (ceffect === \"CHROMA_CUSTOM\") {\n            body = { effect: ceffect, param: data }\n        } else if (ceffect === \"CHROMA_STATIC\") {\n            const color = { color: data }\n            body = { effect: ceffect, param: color }\n        }\n        await this.fetch(\"/headset\", \"PUT\", body)\n    }\n\n    private async fetch(path: string, method: string, body?: unknown) {\n        await this.start()\n        if (!this.connected) return\n        try {\n            await fetch(this.connectionInfo.uri + path, {\n                method,\n                body: body && JSON.stringify(body),\n                headers: { \"content-type\": \"application/json\" },\n            })\n        } catch (e) {\n            this.connectionInfo = undefined\n        }\n    }\n}\n\nexport default function Chroma() {\n    const [client] = useState(new ChromaClient())\n    const connected = useChange(client, c => c.connected)\n    // make sure to cleanup\n    useEffect(() => {\n        client.start() // async\n        return () => client.unmount()\n    }, [])\n\n    const handleStatic = (v: number) => async () => {\n        await client.startHeadsetEffect(\"static\", v)\n    }\n    const handleCustom =\n        (v: [number, number, number, number, number]) => async () => {\n            await client.startHeadsetEffect(\"custom\", v)\n        }\n\n    // color: BGR\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item>\n                <div>connected: {connected ? \"connected\" : \"disconnected\"}</div>\n            </Grid>\n            <Grid item>\n                <Button onClick={handleStatic(0xff0000)}>headset 255</Button>\n                <Button onClick={handleStatic(0x00ff00)}>headset 128</Button>\n                <Button onClick={handleStatic(0x0000ff)}>headset 0</Button>\n                <Button onClick={handleCustom([0, 64, 128, 196, 255])}>\n                    headset custom\n                </Button>\n            </Grid>\n        </Grid>\n    )\n}\n","parent":{"name":"razor-chroma","ext":".tsx"}},{"content":"import React, { useState, useContext, useEffect } from \"react\"\nimport {\n    Grid,\n    Button,\n    TextField,\n    InputAdornment,\n    Switch,\n    Card,\n    CardActions,\n} from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport StopIcon from \"@mui/icons-material/Stop\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport SaveIcon from \"@mui/icons-material/Save\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport HourglassEmptyIcon from \"@mui/icons-material/HourglassEmpty\"\nimport { JDBus } from \"../../../jacdac-ts/src/jdom/bus\"\nimport FieldDataSet from \"../../components/FieldDataSet\"\nimport Trend from \"../../components/Trend\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../../components/ui/Alert\"\nimport SelectEvent from \"../../components/select/SelectEvent\"\nimport { JDEvent } from \"../../../jacdac-ts/src/jdom/event\"\nimport {\n    EVENT,\n    SRV_SENSOR_AGGREGATOR,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport {\n    arrayConcatMany,\n    throttle,\n    uniqueMap,\n} from \"../../../jacdac-ts/src/jdom/utils\"\nimport DataSetGrid from \"../../components/DataSetGrid\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport ReadingFieldGrid from \"../../components/ReadingFieldGrid\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport { SensorAggregatorClient } from \"../../../jacdac-ts/src/clients/sensoraggregatorclient\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport ServiceManagerContext from \"../../components/ServiceManagerContext\"\nimport useChartPalette from \"../../components/useChartPalette\"\nimport { isSensor } from \"../../../jacdac-ts/src/jdom/spec\"\nimport useEvents from \"../../components/hooks/useEvents\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport { useId } from \"react\"\nimport DashboardDeviceItem from \"../../components/dashboard/DashboardDeviceItem\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport useServices from \"../../components/hooks/useServices\"\nimport { delay } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useLocalStorage from \"../../components/hooks/useLocalStorage\"\nimport FileTabs from \"../../components/fs/FileTabs\"\nimport useFileSystem from \"../../components/FileSystemContext\"\nimport useChange from \"../../jacdac/useChange\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport useSnackbar from \"../../components/hooks/useSnackbar\"\nimport SimulatorDialogsContext from \"../../components/SimulatorsDialogContext\"\nimport useBus from \"../../jacdac/useBus\"\n\nexport const frontmatter = {\n    title: \"Data Collector\",\n    description: \"Record data from one or many services into files.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = (props) => <CoreHead {...props} {...frontmatter} />\n\nconst LIVE_HORIZON = 24\nfunction createDataSet(\n    bus: JDBus,\n    registers: JDRegister[],\n    name: string,\n    live: boolean,\n    palette: string[]\n) {\n    const fields = arrayConcatMany(registers.map(reg => reg.fields))\n    const colors = fields.map((f, i) => palette[i % palette.length])\n    const set = new FieldDataSet(bus, name, fields, colors)\n    if (live) set.maxRows = LIVE_HORIZON + 4\n\n    return set\n}\n\nconst COLLECTOR_PREFIX = \"jacdac:collector:prefix\"\nconst COLLECTOR_SAMPLING_INTERVAL = \"jacdac:collector:samplinginterval\"\nconst COLLECTOR_SAMPLING_DURATION = \"jacdac:collector:samplingduration\"\nconst COLLECTOR_START_DELAY = \"jacdac:collector:startdelay\"\n\nexport default function Collector() {\n    const bus = useBus()\n    const { toggleShowDeviceHostsDialog } = useContext(SimulatorDialogsContext)\n    const { enqueueSnackbar } = useSnackbar()\n    const handleShowStartSimulator = () =>\n        toggleShowDeviceHostsDialog({ sensor: true })\n    const { fileSystem } = useFileSystem()\n    const root = useChange(fileSystem, _ => _?.root)\n    const { fileStorage } = useContext(ServiceManagerContext)\n    const [registerIdsChecked, setRegisterIdsChecked] = useState<string[]>([])\n    const [aggregatorId, setAggregatorId] = useState<string>(\"\")\n    const [recording, setRecording] = useState(false)\n    const [tables, setTables] = useState<FieldDataSet[]>([])\n    const [, setRecordingLength] = useState(0)\n\n    const [prefix, setPrefix] = useLocalStorage(COLLECTOR_PREFIX, \"data\")\n    const [samplingIntervalDelay, setSamplingIntervalDelay] = useLocalStorage(\n        COLLECTOR_SAMPLING_INTERVAL,\n        100\n    )\n    const [samplingDuration, setSamplingDuration] = useLocalStorage(\n        COLLECTOR_SAMPLING_DURATION,\n        10\n    )\n    const [startDelay, setStartDelay] = useLocalStorage(\n        COLLECTOR_START_DELAY,\n        0\n    )\n\n    const [liveDataSet, setLiveDataSet] = useState<FieldDataSet>(undefined)\n    const [, setLiveDataTimestamp] = useState(0)\n    const [triggerEventId, setTriggerEventId] = useState<string>(\"\")\n    const [countdown, setCountdown] = useState(-1)\n    const starting = countdown > 0\n    const chartPalette = useChartPalette()\n    const devices = useDevices({ ignoreInfrastructure: true, announced: true })\n    const readingRegisters = arrayConcatMany(\n        devices.map(device =>\n            device\n                .services()\n                .filter(srv => isSensor(srv.specification))\n                .map(srv => srv.readingRegister)\n        )\n    )\n    const recordingRegisters = readingRegisters.filter(\n        reg => registerIdsChecked.indexOf(reg.id) > -1\n    )\n    const recordingDevices = uniqueMap(\n        recordingRegisters,\n        reg => reg.service.device.deviceId,\n        reg => reg.service.device\n    )\n    const aggregators: JDService[] = useServices({\n        serviceClass: SRV_SENSOR_AGGREGATOR,\n    })\n    const aggregator: JDService = aggregators.find(\n        srv => srv.id == aggregatorId\n    )\n    const samplingCount = Math.ceil(\n        (samplingDuration * 1000) / samplingIntervalDelay\n    )\n    const triggerEvent = bus.node(triggerEventId) as JDEvent\n    const startEnabled = !starting && !!recordingRegisters?.length\n    const events = useEvents({ ignoreChange: true })\n    const id = useId()\n    const samplingIntervalId = id + \"-samplinginterval\"\n    const samplingDurationId = id + \"-samplingduration\"\n    const startDelayId = id + \"-startdelay\"\n    const prefixId = id + \"-prefix\"\n\n    useEffect(() => {\n        //console.log(`trigger event`, triggerEventId, triggerEvent)\n        const un = triggerEvent?.subscribe(EVENT, () => {\n            //console.log(`trigger toggle recoring`, recording)\n            toggleRecording()\n        })\n        //console.log(`mounted`, triggerEvent)\n        return () => {\n            //console.log(`unmount trigger`)\n            if (un) un()\n        }\n    }, [triggerEvent, recording, registerIdsChecked, liveDataSet])\n\n    const createSensorConfig = () => ({\n        samplingInterval: samplingIntervalDelay,\n        samplesInWindow: 10,\n        inputs: recordingRegisters.map(reg => ({\n            serviceClass: reg.service.serviceClass,\n        })),\n    })\n    const saveConfig = () => {\n        const sensorConfig = JSON.stringify(createSensorConfig(), null, 2)\n        fileStorage.saveText(\n            `${prefix || \"jacdac\"}-sensor-config.json`,\n            sensorConfig\n        )\n    }\n    const newDataSet = (registerIds: string[], live: boolean) =>\n        registerIds.length\n            ? createDataSet(\n                  bus,\n                  readingRegisters.filter(\n                      reg => registerIds.indexOf(reg.id) > -1\n                  ),\n                  `${prefix || \"data\"}${tables.length}`,\n                  live,\n                  chartPalette\n              )\n            : undefined\n    const handleRegisterCheck = (reg: JDRegister) => {\n        const i = registerIdsChecked.indexOf(reg.id)\n        if (i > -1) registerIdsChecked.splice(i, 1)\n        else registerIdsChecked.push(reg.id)\n        registerIdsChecked.sort()\n        setRegisterIdsChecked([...registerIdsChecked])\n        setLiveDataSet(newDataSet(registerIdsChecked, true))\n    }\n    const stopRecording = () => {\n        if (recording) {\n            if (root) {\n                const csv = liveDataSet.toCSV()\n                // write async\n                const now = new Date()\n                const name = `data-${now.getFullYear()}-${\n                    now.getMonth() + 1\n                }-${now.getDate()}-${now.getHours()}-${now.getMinutes()}-${now.getSeconds()}.csv`\n                root.fileAsync(name, { create: true }).then(f => f.write(csv))\n            }\n            setTables([liveDataSet, ...tables])\n            setLiveDataSet(newDataSet(registerIdsChecked, true))\n            setRecording(false)\n\n            enqueueSnackbar(`recording stopped`)\n        }\n    }\n    const startRecording = async () => {\n        if (!starting && !recording && recordingRegisters.length) {\n            // do countdown\n            if (startDelay > 0) {\n                let countdown = Math.ceil(startDelay)\n                while (countdown > 0) {\n                    setCountdown(countdown)\n                    await delay(1000)\n                    countdown--\n                }\n            }\n            setCountdown(-1)\n            setLiveDataSet(newDataSet(registerIdsChecked, false))\n            setRecording(true)\n            if (aggregator) {\n                const client = new SensorAggregatorClient(aggregator)\n                await client.setInputs(createSensorConfig())\n                client.collect(samplingCount)\n            }\n            enqueueSnackbar(`recording started`)\n        }\n    }\n    const toggleRecording = () => {\n        if (recording) stopRecording()\n        else startRecording()\n    }\n    const handleSamplingIntervalChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const v = parseInt(event.target.value)\n        if (!isNaN(v)) setSamplingIntervalDelay(v)\n    }\n    const handleSamplingDurationChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const v = parseInt(event.target.value)\n        if (!isNaN(v)) setSamplingDuration(v)\n    }\n    const handleStartDelayChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const v = parseInt(event.target.value)\n        if (!isNaN(v)) setStartDelay(v)\n    }\n    const handlePrefixChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPrefix(event.target.value.trim())\n    }\n    const handleTriggerChange = (eventId: string) => setTriggerEventId(eventId)\n    const handleDeleteTable = (table: FieldDataSet) => {\n        const i = tables.indexOf(table)\n        if (i > -1) {\n            tables.splice(i, 1)\n            setTables([...tables])\n        }\n    }\n    const handleAggregatorChecked = (srv: JDService) => () => {\n        const id = srv?.id == aggregatorId ? \"\" : srv?.id\n        setAggregatorId(id)\n    }\n    const updateLiveData = () => {\n        setLiveDataSet(liveDataSet)\n        setRecordingLength(liveDataSet.rows.length)\n        setLiveDataTimestamp(bus.timestamp)\n    }\n    const throttleUpdate = throttle(() => updateLiveData(), 30)\n    // data collection\n    // interval add data entry\n    const addRow = (values?: number[]) => {\n        if (!liveDataSet) return\n        //console.log(values)\n        liveDataSet.addRow(values)\n        if (recording && liveDataSet.length >= samplingCount) {\n            // stop recording\n            updateLiveData()\n            stopRecording()\n        } else {\n            throttleUpdate()\n        }\n    }\n    // stream data\n    useEffect(() => {\n        bus.streaming = true\n        return () => {\n            bus.streaming = false\n        }\n    }, [])\n    // collecting\n    useEffect(() => {\n        if (aggregator && recording) return undefined\n        const interval = setInterval(() => addRow(), samplingIntervalDelay)\n        return () => {\n            clearInterval(interval)\n        }\n    }, [\n        recording,\n        samplingIntervalDelay,\n        samplingCount,\n        registerIdsChecked,\n        aggregator,\n    ])\n    useEffect(() => {\n        if (aggregator) {\n            const client = new SensorAggregatorClient(aggregator)\n            return client.subscribeSample(values => addRow(values))\n        }\n        return () => {}\n    }, [recording, liveDataSet, registerIdsChecked, aggregator])\n\n    return (\n        <>\n            <h1>Data Collector</h1>\n            <p>\n                Use this page to collect streaming data from Jacdac devices into\n                various output formats.\n            </p>\n            <Grid container spacing={1}>\n                {!!aggregators.length && (\n                    <>\n                        <GridHeader title=\"(Optional) Choose a data aggregator\" />\n                        {aggregators.map(aggregator => (\n                            <Grid key={aggregator.id} item xs={4}>\n                                <Card>\n                                    <DeviceCardHeader\n                                        device={aggregator.device}\n                                        showAvatar={true}\n                                    />\n                                    <CardActions>\n                                        <Switch\n                                            checked={\n                                                aggregatorId == aggregator.id\n                                            }\n                                            disabled={recording}\n                                            onChange={handleAggregatorChecked(\n                                                aggregator\n                                            )}\n                                        />\n                                    </CardActions>\n                                </Card>\n                            </Grid>\n                        ))}\n                    </>\n                )}\n                <GridHeader\n                    title=\"Sensors\"\n                    action={\n                        <IconButtonWithTooltip\n                            title=\"start simulator\"\n                            onClick={handleShowStartSimulator}\n                        >\n                            <AddIcon />\n                        </IconButtonWithTooltip>\n                    }\n                />\n                {!readingRegisters.length && (\n                    <Grid item xs={12}>\n                        <Alert severity=\"info\">Waiting for sensor...</Alert>\n                    </Grid>\n                )}\n                {!!readingRegisters.length && (\n                    <Grid item xs={12}>\n                        <ReadingFieldGrid\n                            readingRegisters={readingRegisters}\n                            registerIdsChecked={registerIdsChecked}\n                            recording={recording}\n                            liveDataSet={liveDataSet}\n                            handleRegisterCheck={handleRegisterCheck}\n                        />\n                    </Grid>\n                )}\n                <GridHeader title=\"Recorder\" />\n                {aggregator && (\n                    <Grid item xs={12}>\n                        <Alert severity=\"info\">\n                            Record the sensor input configuration in order to up\n                            your ML model later on.\n                        </Alert>\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    <Button\n                        size=\"large\"\n                        variant=\"contained\"\n                        color={recording ? \"secondary\" : \"primary\"}\n                        title={\n                            starting\n                                ? `starting in ${countdown}`\n                                : recording\n                                ? \"stop recording\"\n                                : \"start recording\"\n                        }\n                        onClick={toggleRecording}\n                        startIcon={\n                            starting ? (\n                                <HourglassEmptyIcon />\n                            ) : recording ? (\n                                <StopIcon />\n                            ) : (\n                                <PlayArrowIcon />\n                            )\n                        }\n                        disabled={!startEnabled}\n                    >\n                        {starting\n                            ? countdown + \"\"\n                            : recording\n                            ? \"Stop\"\n                            : \"Start\"}\n                    </Button>\n                </Grid>\n                <Grid item xs={12} mt={1}>\n                    <Grid container direction=\"row\" spacing={1}>\n                        {aggregator && (\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    title=\"save sensor input configuration\"\n                                    onClick={saveConfig}\n                                    startIcon={<SaveIcon />}\n                                    disabled={recording}\n                                >\n                                    Save configuration\n                                </Button>\n                            </Grid>\n                        )}\n                        <Grid item>\n                            <TextField\n                                id={samplingIntervalId}\n                                disabled={recording}\n                                type=\"number\"\n                                label=\"Sampling interval\"\n                                value={samplingIntervalDelay}\n                                variant=\"outlined\"\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment position=\"start\">\n                                            ms\n                                        </InputAdornment>\n                                    ),\n                                }}\n                                onChange={handleSamplingIntervalChange}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                id={samplingDurationId}\n                                type=\"number\"\n                                disabled={recording}\n                                label=\"Sampling duration\"\n                                value={samplingDuration}\n                                variant=\"outlined\"\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment position=\"start\">\n                                            s\n                                        </InputAdornment>\n                                    ),\n                                }}\n                                onChange={handleSamplingDurationChange}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                id={startDelayId}\n                                type=\"number\"\n                                disabled={recording}\n                                label=\"Start delay\"\n                                value={startDelay}\n                                variant=\"outlined\"\n                                InputProps={{\n                                    startAdornment: (\n                                        <InputAdornment position=\"start\">\n                                            s\n                                        </InputAdornment>\n                                    ),\n                                }}\n                                onChange={handleStartDelayChange}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                id={prefixId}\n                                disabled={recording}\n                                label=\"File name prefix\"\n                                value={prefix}\n                                variant=\"outlined\"\n                                onChange={handlePrefixChange}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <SelectEvent\n                                events={events}\n                                eventId={triggerEventId}\n                                onChange={handleTriggerChange}\n                                label={\"Start Event\"}\n                                friendlyName={true}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                {recordingDevices?.map(device => (\n                    <DashboardDeviceItem\n                        key={device.id}\n                        device={device}\n                        showAvatar={true}\n                        showHeader={true}\n                    />\n                ))}\n                {liveDataSet && (\n                    <Grid item xs={12}>\n                        <Trend\n                            key=\"trends\"\n                            height={12}\n                            dataSet={liveDataSet}\n                            horizon={LIVE_HORIZON}\n                            dot={true}\n                            gradient={true}\n                            yAxis={false}\n                        />\n                    </Grid>\n                )}\n                <GridHeader title=\"Recordings\" />\n                <Grid item xs={12}>\n                    <FileTabs hideFiles={true} hideDirectories={true} />\n                </Grid>\n                {!!tables.length && (\n                    <Grid item xs={12}>\n                        <DataSetGrid\n                            tables={tables}\n                            handleDeleteTable={handleDeleteTable}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n        </>\n    )\n}\n","parent":{"name":"collector","ext":".tsx"}},{"content":"import React from \"react\"\nexport const frontmatter = {\n    title: \"Web Tools\",\n    hideBreadcrumbs: true,\n}\nimport CoreHead from \"../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nimport Tools from \"../components/home/Tools\"\nexport default Tools\n","parent":{"name":"tools","ext":".tsx"}},{"content":"import { Alert, Grid, TextField } from \"@mui/material\"\nimport React, { ChangeEvent, lazy, startTransition, useState } from \"react\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport SwitchWithLabel from \"../../components/ui/SwitchWithLabel\"\nconst SilkQRCode = lazy(() => import(\"../../components/widgets/SilkQrCode\"))\n\nexport const frontmatter = {\n    title: \"Device QR Code Generator\",\n    description: \"Generating QR codes for various PCB design software.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = (props) => <CoreHead {...props} {...frontmatter} />\n\nexport default function DeviceQRCodeGenerator() {\n    const [url, setURL] = useState(``)\n    const [mirror, setMirror] = useState(false)\n    const [size, setSize] = useState(0.3)\n    const [error, setError] = useState(\"\")\n    const handleUrlChange = (ev: ChangeEvent<HTMLInputElement>) =>\n        startTransition(() => {\n            const vanity = (ev.target.value || \"\").trim().toLocaleUpperCase()\n            setURL(vanity)\n            setError(\n                !/^https?:\\/\\/./i.test(vanity)\n                    ? \"Must start with http:// or https://\"\n                    : undefined\n            )\n        })\n    const handleSizeChange = (ev: ChangeEvent<HTMLInputElement>) =>\n        startTransition(() => {\n            const s = Number(ev.target.value)\n            if (!isNaN(s)) setSize(s)\n        })\n    const handleMirror = (ev: ChangeEvent<HTMLInputElement>) =>\n        startTransition(() => {\n            setMirror(!!ev.target.checked)\n        })\n    return (\n        <>\n            <h1>Device Silk QR Code generator</h1>\n            <p>Enter a short URL to be encoded as a silk compatible QR code.</p>\n            <Grid container spacing={1}>\n                <Grid item xs>\n                    <TextField\n                        fullWidth={true}\n                        label=\"url\"\n                        value={url}\n                        placeholder=\"\"\n                        onChange={handleUrlChange}\n                        error={!!error}\n                        helperText={\n                            error ||\n                            \"Use _very_ short URL and only CAPITAL letters and numbers for best results, eg., HTTP://.../123ABC\"\n                        }\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"block size (mm)\"\n                        type=\"number\"\n                        value={size}\n                        inputProps={{ step: 0.1 }}\n                        onChange={handleSizeChange}\n                        helperText=\"Image size equals block size times number of blocks needed to encode URL.\"\n                    />\n                </Grid>\n                <Grid item>\n                    <SwitchWithLabel\n                        checked={mirror}\n                        onChange={handleMirror}\n                        label=\"mirror\"\n                    />\n                </Grid>\n            </Grid>\n            <Alert severity=\"info\" sx={{ mb: 1 }}>\n                Keep the url as short as possible and use capital letters to get\n                the smallest QR code.\n            </Alert>\n            {url && !error && (\n                <>\n                    <h2>\n                        QR codes for{\" \"}\n                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            {url}\n                        </a>\n                    </h2>\n                    <Suspense>\n                        <SilkQRCode url={url} mirror={mirror} size={size} />\n                    </Suspense>\n                </>\n            )}\n        </>\n    )\n}\n","parent":{"name":"device-qr-code","ext":".tsx"}},{"content":"import React, { lazy } from \"react\"\nimport Suspense from \"../../components/ui/Suspense\"\nconst Console = lazy(() => import(\"../../components/console/Console\"))\n\nexport const frontmatter = {\n    title: \"Console view\",\n    description: \"Console message viewer.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    return (\n        <Suspense>\n            <Console\n                showToolbar={true}\n                showFiles={true}\n                showLevel={true}\n                showPopout={false}\n                showSerial={true}\n                showFilter={true}\n            />\n        </Suspense>\n    )\n}\n","parent":{"name":"console","ext":".tsx"}},{"content":"import { Grid, Tab, Tabs } from \"@mui/material\"\nimport React, { useMemo, useState } from \"react\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport useDeviceProductIdentifier from \"../../jacdac/useDeviceProductIdentifier\"\nimport FirmwareLoader from \"../../components/firmware/FirmwareLoader\"\nimport FirmwareCardGrid from \"../../components/firmware/FirmwareCardGrid\"\nimport useChange from \"../../jacdac/useChange\"\nimport {\n    filterTestDevice,\n    filterTestService,\n} from \"../../components/testdom/filters\"\nimport DeviceTestItem from \"../../components/testdom/DeviceTestItem\"\nimport {\n    DeviceTestSpec,\n    OracleTestSpec,\n} from \"../../../jacdac-ts/src/testdom/spec\"\nimport useDeviceTest from \"../../components/testdom/useDeviceTest\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport { isDualDeviceId } from \"../../../jacdac-ts/src/jdom/spec\"\nimport PowerSupplySection from \"../../components/testdom/PowerSupplySection\"\nimport TabPanel from \"../../components/ui/TabPanel\"\nimport AlertSwitch from \"../../components/ui/AlertSwitch\"\nimport useProxy from \"../../jacdac/useProxy\"\nimport useBusWithMode from \"../../jacdac/useBusWithMode\"\nimport useLocalStorage from \"../../components/hooks/useLocalStorage\"\nimport DeviceTestExporter from \"../../components/testdom/DeviceTestExporter\"\nimport { Flags } from \"../../../jacdac-ts/src/jdom/flags\"\nimport DashboardDeviceItem from \"../../components/dashboard/DashboardDeviceItem\"\nimport SwitchWithLabel from \"../../components/ui/SwitchWithLabel\"\nimport { arrayConcatMany, splitFilter } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { resolveReadingTolerage } from \"../../../jacdac-ts/src/testdom/testrules\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\nconst FACTORY_MODE_STORAGE_KEY = \"device_tester_factory\"\nconst EXPORT_MODE_STORAGE_KEY = \"device_tester_export\"\nconst ORACLE_DEVICES_STORAGE_KEY = \"device_tester_oracles\"\n\nfunction DeviceItem(props: {\n    device: JDDevice\n    factory?: boolean\n    oracles?: OracleTestSpec[]\n}) {\n    const { device, factory, oracles } = props\n    const productIdentifier = useDeviceProductIdentifier(device)\n    const testSpec = useChange(\n        device,\n        _ =>\n            _ &&\n            !_.firmwareUpdater &&\n            ({\n                productIdentifier,\n                factory,\n                services: device.serviceClasses\n                    .filter(filterTestService)\n                    .map(sc => ({ serviceClass: sc })),\n            } as DeviceTestSpec),\n        [productIdentifier, factory],\n        (a, b) => JSON.stringify(a) === JSON.stringify(b)\n    )\n    const test = useDeviceTest(device, testSpec, oracles)\n    if (!device) return null\n    return <DeviceTestItem test={test} device={device} />\n}\n\nexport const frontmatter = {\n    title: \"Device Tester\",\n    description:\n        \"Validating services in devices. Designed for manual or factory floor testing.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    const [tab, setTab] = useState(0)\n    const [proxy, setProxy] = useState(false)\n    const [factory, setFactory] = useLocalStorage(\n        FACTORY_MODE_STORAGE_KEY,\n        false\n    )\n    const [exporter, setExporter] = useLocalStorage(\n        EXPORT_MODE_STORAGE_KEY,\n        false\n    )\n    const [oracleDeviceIds, setOracleDeviceIds] = useLocalStorage<string[]>(\n        ORACLE_DEVICES_STORAGE_KEY,\n        []\n    )\n\n    // don't let a brain interfere\n    useProxy(proxy)\n    // auto-connect\n    useBusWithMode({ autoConnect: true })\n\n    const handleSetFactory = (checked: boolean) => setFactory(checked)\n    const handleSetExporter = (checked: boolean) => setExporter(checked)\n    const handleSetProxy = (checked: boolean) => setProxy(checked)\n    const devices = useDevices({\n        physical: !Flags.diagnostics,\n        announced: true,\n        ignoreInfrastructure: true,\n    })\n        .filter(\n            (dev, _, devs) =>\n                !dev.bootloader || // show non-bootloader devices\n                !devs.some(d => isDualDeviceId(d.deviceId, dev.deviceId)) // show bootloaders which don't have the application device listed\n        )\n        .filter(filterTestDevice)\n        .sort((l, r) => -(l.created - r.created))\n\n    const [deviceOracles, devicesNoOracles] = splitFilter(devices, d =>\n        oracleDeviceIds.includes(d.deviceId)\n    )\n    const oracles = useMemo(\n        () =>\n            arrayConcatMany(\n                devices\n                    ?.filter(d => oracleDeviceIds.includes(d.deviceId))\n                    .map(d =>\n                        d\n                            .services({ sensor: true })\n                            .map<OracleTestSpec>(\n                                ({ device, serviceClass, serviceIndex }) => ({\n                                    deviceId: device.deviceId,\n                                    serviceClass,\n                                    serviceIndex,\n                                    tolerance:\n                                        resolveReadingTolerage(serviceClass),\n                                })\n                            )\n                    )\n            ),\n        [devices, oracleDeviceIds]\n    )\n\n    const handleTabChange = (\n        event: React.ChangeEvent<unknown>,\n        newValue: number\n    ) => {\n        setTab(newValue)\n    }\n    const handleCheckOracle = (device: JDDevice) => () => {\n        const newOracles = oracleDeviceIds.slice(0)\n        const i = newOracles.indexOf(device.deviceId)\n        if (i > -1) newOracles.splice(i, 1)\n        else newOracles.push(device.deviceId)\n        setOracleDeviceIds(newOracles)\n    }\n\n    return (\n        <>\n            <h1>Device Tester</h1>\n            <Tabs\n                value={tab}\n                onChange={handleTabChange}\n                aria-label=\"Testing services in devices\"\n            >\n                <Tab label={`Devices`} />\n                <Tab label={`Oracles`} />\n            </Tabs>\n            <TabPanel value={tab} index={0}>\n                <PowerSupplySection />\n                {devicesNoOracles?.length ? (\n                    <Grid container spacing={1}>\n                        {devicesNoOracles?.map(device => (\n                            <Grid key={device.id} item xs={12}>\n                                <DeviceItem\n                                    device={device}\n                                    factory={factory}\n                                    oracles={oracles}\n                                />\n                            </Grid>\n                        ))}\n                    </Grid>\n                ) : (\n                    <p>\n                        Connect your device and follow the instructions to run a\n                        compliance test.\n                    </p>\n                )}\n                {!!deviceOracles?.length && (\n                    <Grid container spacing={1}>\n                        <GridHeader title=\"Oracles\" />\n                        {deviceOracles.map(d => (\n                            <DashboardDeviceItem\n                                device={d}\n                                key={d.id}\n                                showAvatar={true}\n                                showHeader={true}\n                                showReset={true}\n                            />\n                        ))}\n                    </Grid>\n                )}\n                <AlertSwitch\n                    severity=\"success\"\n                    title=\"factory mode\"\n                    checked={factory}\n                    onChecked={handleSetFactory}\n                >\n                    Tests should be fast and automated in factory mode. Manual\n                    tests are <b>disabled</b>.\n                </AlertSwitch>\n                <AlertSwitch\n                    severity=\"info\"\n                    title=\"upload test results\"\n                    checked={exporter}\n                    onChecked={handleSetExporter}\n                >\n                    Automatically upload test results to a web service.\n                    {exporter && <DeviceTestExporter />}\n                </AlertSwitch>\n                <AlertSwitch\n                    severity=\"info\"\n                    title=\"automatic dongle mode\"\n                    checked={proxy}\n                    onChecked={handleSetProxy}\n                >\n                    Force brains to enter dongle mode, to avoid application\n                    interfere with testing.\n                </AlertSwitch>\n            </TabPanel>\n            <TabPanel value={tab} index={1}>\n                <Grid container spacing={1}>\n                    <Grid item xs={12}>\n                        Use known device readings as oracles for the device\n                        under tests (within tolerance).\n                    </Grid>\n                    {devices?.map(device => (\n                        <Grid key={device.id} item xs={12}>\n                            <Grid container spacing={1}>\n                                <DashboardDeviceItem\n                                    key={device.id}\n                                    device={device}\n                                    showAvatar={true}\n                                    showHeader={true}\n                                    showReset={true}\n                                />\n                                <Grid item xs>\n                                    <SwitchWithLabel\n                                        label={\"reading oracle\"}\n                                        checked={oracleDeviceIds.includes(\n                                            device.deviceId\n                                        )}\n                                        onChange={handleCheckOracle(device)}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    ))}\n                </Grid>\n            </TabPanel>\n            <p>\n                Read the{\" \"}\n                <Link to=\"/ddk/design/manufacturing/\">\n                    Device Tester documentation\n                </Link>\n                .\n            </p>\n        </>\n    )\n}\n","parent":{"name":"device-tester","ext":".tsx"}},{"content":"/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React, { lazy, useMemo, useState } from \"react\"\nimport { Grid, Select, SelectChangeEvent } from \"@mui/material\"\nimport useLocalStorage from \"../../components/hooks/useLocalStorage\"\nimport { clone, unique } from \"../../../jacdac-ts/src/jdom/utils\"\nimport {\n    Box,\n    Chip,\n    Menu,\n    MenuItem,\n    TextField,\n    Typography,\n    Card,\n    CardActions,\n    Button,\n} from \"@mui/material\"\nimport { ChangeEvent } from \"react\"\nimport {\n    isInfrastructure,\n    serviceSpecificationFromClassIdentifier,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport PaperBox from \"../../components/ui/PaperBox\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport { parseRepoUrl } from \"../../components/github\"\nimport {\n    DEVICE_IMAGE_HEIGHT,\n    DEVICE_IMAGE_WIDTH,\n    generateDeviceSpecificationId,\n    normalizeDeviceSpecification,\n} from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport ImportImageCanvas from \"../../components/ui/ImageImportCanvas\"\n// tslint:disable-next-line: no-submodule-imports\nimport { Autocomplete } from \"@mui/material\"\nimport { useFirmwareBlob } from \"../../components/firmware/useFirmwareBlobs\"\nimport { FirmwareBlob } from \"../../../jacdac-ts/src/jdom/flashing\"\nimport { useId } from \"react\"\nimport AddServiceIconButton from \"../../components/AddServiceIconButton\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport { ControlReg } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport Alert from \"../../components/ui/Alert\"\nimport { GithubPullRequestFiles } from \"../../components/buttons/GithubPullRequestButton\"\nimport useDeviceSpecifications from \"../../components/devices/useDeviceSpecifications\"\nimport useDeviceCatalog from \"../../components/devices/useDeviceCatalog\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { JD_SERVICE_INDEX_CTRL } from \"../../../jacdac-ts/src/jdom/constants\"\nimport ClearIcon from \"@mui/icons-material/Clear\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport { shapeToEC30 } from \"../../components/enclosure/ec30\"\nimport CopyButton from \"../../components/ui/CopyButton\"\n\nconst GithubPullRequestButton = lazy(\n    () => import(\"../../components/buttons/GithubPullRequestButton\")\n)\nconst EC30Card = lazy(() => import(\"../../components/ec30/EC30Card\"))\n\nconst sides = {\n    l: \"left\",\n    r: \"right\",\n}\n\nfunction useCompanies() {\n    const specifications = useDeviceSpecifications()\n    const companies = unique(specifications.map(dev => dev.company)).sort()\n    return companies\n}\n\nfunction CompanySelect(props: {\n    error?: string\n    onValueChange?: (name: string) => void\n    company: string\n    setCompany: (c: string) => void\n}) {\n    const { company, setCompany, error } = props\n    const companies = useCompanies()\n    const id = useId()\n    const companyId = id + \"-company\"\n\n    const handleChange = (ev: unknown, newValue: string) => setCompany(newValue)\n    const renderInputs = params => (\n        <TextField\n            {...params}\n            error={!!error}\n            label=\"Company*\"\n            helperText={error}\n            variant=\"outlined\"\n        />\n    )\n\n    return (\n        <Autocomplete\n            id={companyId}\n            freeSolo={true}\n            fullWidth={true}\n            includeInputInList\n            autoComplete\n            options={companies}\n            renderInput={renderInputs}\n            inputValue={company}\n            onInputChange={handleChange}\n        />\n    )\n}\n\nexport const frontmatter = {\n    title: \"Device Registration\",\n    description: \"Form to submit a new device for the catalog.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nimport { withPrefix } from \"gatsby\"\nimport { identifierToUrlPath } from \"../../../jacdac-ts/src/jdom/catalog\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function DeviceRegistration() {\n    const [device, setDevice] = useLocalStorage<jdspec.DeviceSpec>(\n        \"jacdac:devicedesigner;2\",\n        {\n            id: \"my-device\",\n            name: \"My device\",\n            services: [],\n            productIdentifiers: [],\n            repo: \"\",\n            version: \"\",\n        } as jdspec.DeviceSpec\n    )\n    const { id, shape, version, company, repo } = device || {}\n    const gridBreakpoints = useGridBreakpoints()\n    const devices = useDevices({\n        announced: true,\n        physical: true,\n        ignoreInfrastructure: true,\n        productIdentifier: true,\n    })\n    const companies = useCompanies()\n    const updateDevice = () => {\n        const dev = clone(device)\n        dev.id = generateDeviceSpecificationId(dev)\n        setDevice(dev)\n    }\n    const [firmwaresAnchorEl, setFirmwaresAnchorEl] =\n        React.useState<null | HTMLElement>(null)\n    const [imageDataURI, setImageDataURI] = useState<string>(undefined)\n    const [comment, setComment] = useState(\"\")\n    const deviceCatalog = useDeviceCatalog()\n    const elid = useId()\n    const nameId = elid + \"-name\"\n    const firmwareMenuId = elid + \"-firmwaremenu\"\n    const repoId = elid + \"-repo\"\n    const identifierId = elid + \"-identifier\"\n    const urlId = elid + \"-url\"\n    const descriptionId = elid + \"-description\"\n    const homepageId = elid + \"-homepage\"\n    const hardwareVersionId = elid + \"-hwversion\"\n    const hardwareDesignId = elid + \"-hwdesign\"\n    const firmwareSourceId = elid + \"-hwsource\"\n    const storeLinkId = elid + \"-store\"\n    const connectorId = elid + \"-connector\"\n    const shapeId = elid + \"-shape\"\n    const commentId = elid + \"-comment\"\n    const specifications = useDeviceSpecifications({\n        includeDeprecated: true,\n        includeExperimental: true,\n    })\n    const handleClear = () => {\n        setDevice({\n            id: \"my-device\",\n            name: \"\",\n            services: [],\n            productIdentifiers: [],\n            repo: \"\",\n        } as jdspec.DeviceSpec)\n        setImageDataURI(undefined)\n        setComment(\"\")\n    }\n    const handleServiceAdd = (srv: jdspec.ServiceSpec) => {\n        console.log(`add`, srv.classIdentifier)\n        device.services.push(srv.classIdentifier)\n        updateDevice()\n    }\n    const companyRepos = useMemo(\n        () =>\n            unique(\n                specifications\n                    .filter(d => d.company === company)\n                    .map(d => d.repo)\n                    .filter(repo => !!repo)\n            ),\n        [device?.company, specifications]\n    )\n    const { firmwareBlobs } = useFirmwareBlob(repo)\n    const variant = \"outlined\"\n    const companyError =\n        company?.length > 64\n            ? \"Company is too long (max 64 characters)\"\n            : undefined\n    const nameError =\n        device.name?.length > 64\n            ? \"Name is too long (max 64 characters)\"\n            : undefined\n    const parsedRepo = parseRepoUrl(device.repo)\n    const githubError =\n        device.repo && !parsedRepo ? \"invalid GitHub repository\" : \"\"\n    const linkError =\n        !device.link || /^https:\\/\\//i.test(device.link)\n            ? \"\"\n            : \"Must be https://...\"\n    const storeLinkError =\n        !device.storeLink ||\n        /^https:\\/\\//i.test(device.storeLink?.[0] as string)\n            ? \"\"\n            : \"Must be https://...\"\n    const idError =\n        !device.id || !device.name\n            ? \"missing identifier\"\n            : specifications.find(dev => dev.id == id)\n            ? \"identifer already used\"\n            : \"\"\n    const imageError = !imageDataURI ? \"missing image\" : \"\"\n    const versionError =\n        version && !/^(v\\d+\\.\\d+(\\.\\d+(\\.\\d+)?)?\\w?)?$/.test(version)\n            ? \"Preferred format is vN.N\"\n            : \"\"\n    const ok =\n        !nameError &&\n        !linkError &&\n        !idError &&\n        !imageError &&\n        !companyError &&\n        !versionError\n\n    const route = identifierToUrlPath(id)\n    const modulePath = ok && `devices/${route}.json`\n    const imagePath = ok && `devices/${route}.jpg`\n    const model = useMemo(() => shapeToEC30(shape), [shape])\n\n    const handleNameChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.name = ev.target.value\n        updateDevice()\n    }\n    const handleRepoChange = (ev: unknown, newValue: string) => {\n        device.repo = newValue\n        updateDevice()\n    }\n    const handleLinkChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.link = ev.target.value\n        updateDevice()\n    }\n    const handleDescriptionChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.description = ev.target.value\n        updateDevice()\n    }\n    const handleDeleteService = (i: number) => () => {\n        device.services.splice(i, 1)\n        updateDevice()\n    }\n    const handleDeleteFirmware = (i: number) => () => {\n        device.productIdentifiers.splice(i, 1)\n        updateDevice()\n    }\n    const handleVersion = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.version = ev.target.value?.trim()\n        updateDevice()\n    }\n    const handleStoreLinkChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const v = ev.target.value?.trim()\n        device.storeLink = v ? [v] : undefined\n        updateDevice()\n    }\n    const handleShapeChange = (\n        ev: SelectChangeEvent<jdspec.ShapeWellKnown>\n    ) => {\n        device.shape = ev.target.value?.trim() as jdspec.ShapeWellKnown\n        updateDevice()\n    }\n    const handleFirmwareAddClick = (\n        event: React.MouseEvent<HTMLButtonElement>\n    ) => {\n        setFirmwaresAnchorEl(event.currentTarget)\n        updateDevice()\n    }\n    const handleProductIdentifierAddRandomClick = () => {\n        if (!device.productIdentifiers) device.productIdentifiers = []\n        device.productIdentifiers.push(\n            parseInt(deviceCatalog.uniqueFirmwareId(), 16)\n        )\n        updateDevice()\n    }\n    const handleFirmwareAddClose = (blob: FirmwareBlob) => () => {\n        setFirmwaresAnchorEl(null)\n        const id = blob?.productIdentifier\n        if (id !== undefined) {\n            device.productIdentifiers.push(id)\n            device.name = blob.name\n            updateDevice()\n        }\n    }\n    const handleImageImported = (cvs: HTMLCanvasElement) => {\n        const url = cvs.toDataURL(\"image/jpeg\", 100)\n        setImageDataURI(url)\n    }\n    const handleCompanyChanged = (value: string) => {\n        device.company = value\n        updateDevice()\n    }\n    const handleFirmwareSourceChanged = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.firmwareSource = ev.target.value?.trim()\n        updateDevice()\n    }\n    const handleHardwareDesignChanged = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.hardwareDesign = ev.target.value?.trim()\n        updateDevice()\n    }\n    const handleConnectorChanged = (\n        ev: SelectChangeEvent<jdspec.JacdacConnectorType>\n    ) => {\n        device.connector = ev.target.value as jdspec.JacdacConnectorType\n        if (device.connector === \"edgeConsumer\") delete device.connector\n        updateDevice()\n    }\n    const handleCommentChanged = (ev: ChangeEvent<HTMLInputElement>) => {\n        setComment(ev.target.value || \"\")\n    }\n    const renderRepoInput = params => (\n        <TextField\n            {...params}\n            error={!!githubError}\n            type=\"url\"\n            label=\"Firmware repository\"\n            helperText={\n                githubError ||\n                \"GitHub Repository hosting the firmware binaries.\"\n            }\n            variant=\"outlined\"\n        />\n    )\n    const handleImportDevice = (dev: JDDevice) => async () => {\n        const d: jdspec.DeviceSpec = {\n            id: \"my-device\",\n            name: \"My device\",\n            company: \"\",\n            services: [],\n            productIdentifiers: [],\n            repo: \"\",\n            description: \"\",\n        }\n\n        const controlService = dev.service(JD_SERVICE_INDEX_CTRL)\n        const descrReg = controlService.register(ControlReg.DeviceDescription)\n        await descrReg.refresh()\n\n        const fw = await dev.resolveProductIdentifier()\n        if (fw) d.productIdentifiers = [fw]\n        else d.productIdentifiers = []\n        d.services = dev\n            .services()\n            .filter(srv => !isInfrastructure(srv.specification))\n            .map(srv => srv.serviceClass)\n        const description = descrReg.stringValue || \"\"\n        const m = /^(.+)\\s+(\\d+)\\s+(v[.\\w]+)$/.exec(description)\n        const company = m && companies.find(c => m[1].startsWith(c))\n        if (company) {\n            d.designIdentifier = m[2]\n            d.version = m[3]\n            d.company = company\n            d.name = m[1].slice(company.length + 1).trim()\n        } else {\n            const ds = description.split(/\\s+/g)\n            d.company = ds.shift() || \"\"\n            d.name = ds.join(\" \")\n            d.name?.replace(/\\wv\\d+.\\d+\\w/, m => {\n                device.version = m\n                return \"\"\n            })\n        }\n\n        setDevice(d)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const files = useMemo<GithubPullRequestFiles>(\n        () =>\n            modulePath && {\n                [modulePath]: JSON.stringify(\n                    normalizeDeviceSpecification(device),\n                    null,\n                    2\n                ),\n                [imagePath]: {\n                    content: imageDataURI?.slice(imageDataURI?.indexOf(\",\")),\n                    encoding: \"base64\",\n                },\n            },\n        [modulePath, imagePath, imageDataURI, JSON.stringify(device)]\n    )\n\n    return (\n        <>\n            <h1>\n                Device Registration\n                <IconButtonWithTooltip\n                    sx={{ ml: 1 }}\n                    title=\"New Device\"\n                    onClick={handleClear}\n                >\n                    <ClearIcon />\n                </IconButtonWithTooltip>\n            </h1>\n            <p>\n                Fill in <b>Device Name</b>, <b>Company</b> and <b>Version</b> to\n                uniquely identify your device. Fill in the additional fields\n                with information about your devices and click on{\" \"}\n                <b>Start Registration</b> to request an entry in the{\" \"}\n                <Link target=\"_blank\" to=\"/devices/\" underline=\"hover\">\n                    Device Catalog\n                </Link>\n                .\n            </p>\n            <Grid container spacing={3}>\n                {devices.map(dev => (\n                    <Grid item key={dev.id} {...gridBreakpoints}>\n                        <Card>\n                            <DeviceCardHeader\n                                device={dev}\n                                showAvatar={true}\n                                showDescription={true}\n                            />\n                            <CardActions>\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={handleImportDevice(dev)}\n                                >\n                                    Import\n                                </Button>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                ))}\n                <Grid item xs={12}>\n                    <TextField\n                        id={nameId}\n                        required\n                        error={!!nameError}\n                        helperText={nameError}\n                        fullWidth={true}\n                        label=\"Device Name\"\n                        placeholder=\"My device\"\n                        value={device.name || \"\"}\n                        onChange={handleNameChange}\n                        variant={variant}\n                    />\n                    <Typography variant=\"caption\">\n                        Name of the device, without company or version. The name\n                        will be used to generate the device identifier.\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <CompanySelect\n                        company={device?.company || \"\"}\n                        error={companyError}\n                        setCompany={handleCompanyChanged}\n                    />\n                    <Typography variant=\"caption\">\n                        Name of the company manufacturing this device. The\n                        company name will be used to generate the device\n                        identifier.\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        id={hardwareVersionId}\n                        required\n                        fullWidth={true}\n                        error={!!versionError}\n                        helperText={versionError}\n                        label=\"Version\"\n                        value={device?.version || \"\"}\n                        onChange={handleVersion}\n                        variant={variant}\n                    />\n                    <Typography variant=\"caption\">\n                        Revision identifier for this hardware design using\n                        semver format (v1.0, v1.1, ...).\n                    </Typography>\n                </Grid>\n                <GridHeader title=\"Auto-generated Links\" />\n                <Grid item xs={12}>\n                    <TextField\n                        id={identifierId}\n                        disabled\n                        error={!!idError}\n                        helperText={idError}\n                        fullWidth={true}\n                        label=\"Device Identifier\"\n                        variant={variant}\n                        value={device.id || \"\"}\n                    />\n                    <Typography variant=\"caption\">\n                        This generated identifer is a URL friendly string\n                        created from your company and product name.\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        id={urlId}\n                        disabled\n                        error={!!idError}\n                        helperText={idError}\n                        fullWidth={true}\n                        label=\"Device Catalog URL\"\n                        variant={variant}\n                        value={`https://microsoft.github.io/jacdac-docs/devices/${identifierToUrlPath(\n                            device.id\n                        )}/`}\n                    />\n                    <Typography variant=\"caption\">\n                        The auto-generated URL that links to the page for this\n                        device in the Device Catalog. If this URL is too long\n                        for a QR Code, use a URL shortening service. To generate\n                        a QR Code for your PCB, use the{\" \"}\n                        <Link target=\"_blank\" to=\"/tools/device-qr-code/\">\n                            Device QR Code Generator\n                        </Link>{\" \"}\n                        page.\n                    </Typography>\n                </Grid>\n\n                <GridHeader title=\"Services\" />\n                <Grid item xs={12}>\n                    <PaperBox elevation={1}>\n                        <Typography>Product Identifiers</Typography>\n                        {device.productIdentifiers?.map((id, i) => {\n                            const blob = firmwareBlobs?.find(\n                                b => b.productIdentifier == id\n                            )\n                            return (\n                                <Box\n                                    component=\"span\"\n                                    ml={0.5}\n                                    mb={0.5}\n                                    key={id}\n                                >\n                                    <Chip\n                                        label={\n                                            blob\n                                                ? `${\n                                                      blob.name\n                                                  } (0x${id.toString(16)})`\n                                                : `0x${id.toString(16)}`\n                                        }\n                                        icon={\n                                            <CopyButton\n                                                size=\"small\"\n                                                text={`0x${id.toString(16)}`}\n                                            />\n                                        }\n                                        onDelete={handleDeleteFirmware(i)}\n                                    />\n                                </Box>\n                            )\n                        })}\n                        <IconButtonWithTooltip\n                            title=\"Add random product identifier\"\n                            onClick={handleProductIdentifierAddRandomClick}\n                        >\n                            <AddIcon />\n                        </IconButtonWithTooltip>\n                        {firmwareBlobs && (\n                            <IconButtonWithTooltip\n                                title=\"Add product identifier from repository\"\n                                aria-controls={firmwareMenuId}\n                                aria-haspopup=\"true\"\n                                onClick={handleFirmwareAddClick}\n                            >\n                                <AddIcon />\n                            </IconButtonWithTooltip>\n                        )}\n                        <Menu\n                            id={firmwareMenuId}\n                            anchorEl={firmwaresAnchorEl}\n                            keepMounted\n                            open={Boolean(firmwaresAnchorEl)}\n                            onClose={handleFirmwareAddClose(undefined)}\n                        >\n                            {firmwareBlobs?.map(blob => (\n                                <MenuItem\n                                    key={blob.productIdentifier}\n                                    value={blob.productIdentifier.toString(16)}\n                                    onClick={handleFirmwareAddClose(blob)}\n                                >\n                                    {blob.name}\n                                    <Typography\n                                        variant=\"caption\"\n                                        component=\"span\"\n                                    >\n                                        {blob.version}\n                                    </Typography>\n                                </MenuItem>\n                            ))}\n                        </Menu>\n                        <Typography variant=\"caption\" component=\"div\">\n                            Product identifiers uniquely identify your hardware\n                            on the Jacdac bus. Each revision of your hardware\n                            should have a different identifier.\n                        </Typography>\n                    </PaperBox>\n                </Grid>\n                <Grid item xs={12}>\n                    <PaperBox elevation={1}>\n                        <Typography color=\"inherit\">Services</Typography>\n                        {device.services?.map((id, i) => (\n                            <Box component=\"span\" m={0.5} key={`${id}.${i}`}>\n                                <Chip\n                                    label={\n                                        serviceSpecificationFromClassIdentifier(\n                                            id\n                                        )?.name || id\n                                    }\n                                    onDelete={handleDeleteService(i)}\n                                />\n                            </Box>\n                        ))}\n                        <AddServiceIconButton onAdd={handleServiceAdd} />\n                    </PaperBox>\n                </Grid>\n                <GridHeader title=\"PCB\" />\n                <Grid item xs={12}>\n                    <PaperBox elevation={1}>\n                        <Typography color=\"inherit\">\n                            Jacdac Connector\n                        </Typography>\n                        <Select\n                            id={connectorId}\n                            fullWidth={true}\n                            size=\"small\"\n                            value={device.connector || \"edgeConsumer\"}\n                            onChange={handleConnectorChanged}\n                        >\n                            <MenuItem value=\"noConnector\">\n                                No PCB edge connector\n                            </MenuItem>\n                            <MenuItem value=\"edgeIndependent\">\n                                PCB edge connector, independently powered\n                            </MenuItem>\n                            <MenuItem value=\"edgeConsumer\">\n                                PCB edge connector, consumer - power always\n                                taken from Jacdac bus\n                            </MenuItem>\n                            <MenuItem value=\"edgeLowCurrentProvider\">\n                                PCB edge connector, low current provider - power\n                                always provided to the Jacdac bus\n                            </MenuItem>\n                            <MenuItem value=\"edgeHighCurrentProvider\">\n                                PCB edge connector, high current provider\n                            </MenuItem>\n                            <MenuItem value=\"edgeLowCurrentProviderConsumer\">\n                                PCB edge connector, low current provider or\n                                consumer\n                            </MenuItem>\n                            <MenuItem value=\"edgeHighCurrentProviderConsumer\">\n                                PCB edge connector, high current provider or\n                                consumer\n                            </MenuItem>\n                            <MenuItem value=\"edgePassive\">\n                                PCB edge connector, passive - passthrough for\n                                power and signal\n                            </MenuItem>\n                            <MenuItem value=\"grove\">\n                                Grove connector\n                            </MenuItem>\n                            <MenuItem value=\"qwiic\">\n                                Qwiic connector\n                            </MenuItem>\n                        </Select>\n                        <Typography variant=\"caption\" component=\"div\">\n                            Choose the type of Jacdac connector present on the\n                            hardware, and the type of type of{\" \"}\n                            <Link\n                                target=\"_blank\"\n                                to=\"/ddk/design/#power-supply-sharing\"\n                            >\n                                power supply sharing\n                            </Link>\n                            .\n                        </Typography>\n                    </PaperBox>\n                </Grid>\n                <Grid item xs={12}>\n                    <PaperBox elevation={1}>\n                        <Typography color=\"inherit\">PCB Form factor</Typography>\n                        <Select\n                            id={shapeId}\n                            fullWidth={true}\n                            size=\"small\"\n                            value={device.shape || \"\"}\n                            onChange={handleShapeChange}\n                        >\n                            <MenuItem value=\"\">Unknown shape</MenuItem>\n                            {[\n                                \"ec30_1x2_l\",\n                                \"ec30_2x2_l\",\n                                \"ec30_2x2_lr\",\n                                \"ec30_3x2_l\",\n                                \"ec30_3x2_r\",\n                                \"ec30_3x2_lr\",\n                                \"ec30_3x3_l\",\n                                \"ec30_3x3_lr\",\n                                \"ec30_4x2_l\",\n                                \"ec30_4x2_lr\",\n                                \"ec30_4x3_lr\",\n                                \"ec30_5x2_l\",\n                                \"ec30_5x2_lr\",\n                                \"ec30_5x3_lr\",\n                                \"ec30_6x2_l\",\n                                \"ec30_6x2_lr\",\n                                \"ec30_6x3_lr\",\n                            ]\n                                .map(s => /^ec30_(\\d+)x(\\d+)_([lr]+)$/.exec(s))\n                                .map(([n, x, y, lr]) => (\n                                    <MenuItem key={n} value={n}>\n                                        EC30 grid, {x}0mm x {y}0mm, Jacdac edge\n                                        connector on the{\" \"}\n                                        {lr\n                                            .split(\"\")\n                                            .map(side => sides[side])\n                                            .join(\", \")}\n                                    </MenuItem>\n                                ))}\n                        </Select>\n                        <Typography variant=\"caption\" component=\"div\">\n                            Choose the form factor of the PCB if applicable.\n                        </Typography>\n                        {model && (\n                            <Suspense>\n                                <EC30Card model={model} />\n                            </Suspense>\n                        )}\n                    </PaperBox>\n                </Grid>\n                <GridHeader title=\"Catalog\" />\n                <Grid item xs={12}>\n                    <TextField\n                        id={descriptionId}\n                        fullWidth={true}\n                        required\n                        label=\"Description\"\n                        multiline={true}\n                        rows={4}\n                        value={device.description || \"\"}\n                        onChange={handleDescriptionChange}\n                        variant={variant}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        id={homepageId}\n                        label=\"Home page URL\"\n                        error={!!linkError}\n                        helperText={linkError}\n                        fullWidth={true}\n                        placeholder=\"https://...\"\n                        value={device.link || \"\"}\n                        onChange={handleLinkChange}\n                        variant={variant}\n                        type=\"url\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        id={storeLinkId}\n                        label=\"Store URL\"\n                        error={!!storeLinkError}\n                        helperText={\n                            \"URL where the device can be purchased\" ||\n                            storeLinkError\n                        }\n                        fullWidth={true}\n                        placeholder=\"https://...\"\n                        value={device.storeLink?.[0] || \"\"}\n                        onChange={handleStoreLinkChange}\n                        variant={variant}\n                        type=\"url\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <PaperBox>\n                        <Typography>Image</Typography>\n                        <ImportImageCanvas\n                            width={DEVICE_IMAGE_WIDTH}\n                            height={DEVICE_IMAGE_HEIGHT}\n                            onImageImported={handleImageImported}\n                        />\n                        <Typography variant=\"caption\" component=\"div\">\n                            {`Import an image of the device; must be at least ${DEVICE_IMAGE_WIDTH}x${DEVICE_IMAGE_HEIGHT}, device must be fully visible on a white background; 45 degree isometric perspective tilting to the right.`}\n                            <a\n                                href={withPrefix(\n                                    \"/templates/jacdac-device-photo-template.pdf\"\n                                )}\n                            >\n                                Download photo template.\n                            </a>\n                        </Typography>\n                        {imageError && (\n                            <Alert severity=\"error\">{imageError}</Alert>\n                        )}\n                    </PaperBox>\n                </Grid>\n                <GridHeader title=\"Firmware and hardware information (optional)\" />\n                <Grid item xs={12}>\n                    <Autocomplete\n                        id={repoId}\n                        freeSolo={true}\n                        autoComplete\n                        placeholder=\"https://github.com/...\"\n                        inputValue={device.repo || \"\"}\n                        onInputChange={handleRepoChange}\n                        options={companyRepos}\n                        renderInput={renderRepoInput}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        id={firmwareSourceId}\n                        fullWidth={true}\n                        helperText=\"public URL to the firmware sources. If possible, provide a deep link to the relevant source files.\"\n                        label=\"Firmware source repository\"\n                        placeholder=\"https://github.com/...\"\n                        value={device?.firmwareSource || \"\"}\n                        onChange={handleFirmwareSourceChanged}\n                        variant={variant}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        id={hardwareDesignId}\n                        fullWidth={true}\n                        helperText=\"public URL to the repositry of hardware design files. If possible, provide a deep link to the relevant source files.\"\n                        label=\"Hardware design repository\"\n                        placeholder=\"https://github.com/...\"\n                        value={device?.hardwareDesign}\n                        onChange={handleHardwareDesignChanged}\n                        variant={variant}\n                    />\n                </Grid>\n                <GridHeader title=\"Submission\" />\n                <Grid item xs={12}>\n                    <TextField\n                        id={commentId}\n                        fullWidth={true}\n                        helperText=\"Additional comments about the device that will be added to the registration pull request.\"\n                        label=\"Registration Comment\"\n                        value={comment}\n                        onChange={handleCommentChanged}\n                        variant={variant}\n                        multiline={true}\n                        minRows={2}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Suspense>\n                        <GithubPullRequestButton\n                            label={\"start registration\"}\n                            title={`Device: ${device.company} ${device.name} ${device.version}`}\n                            head={`devices/${device.id}`}\n                            description={`This pull request will start the registration of your device in the Jacdac catalog.                            \n                            ${comment}`}\n                            files={files}\n                        />\n                    </Suspense>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n","parent":{"name":"device-registration","ext":".tsx"}},{"content":"import React from \"react\"\nimport DeviceScriptConnect from \"../../components/devicescript/DeviceScriptConnect\"\n\nexport const frontmatter = {\n    title: \"DeviceScript Connection Helper\",\n    description: \"Connect to hardware devices for DeviceScript.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    return <DeviceScriptConnect />\n}\n","parent":{"name":"devicescript-connect","ext":".tsx"}},{"content":"import React from \"react\"\nimport DeviceScriptDevTools from \"../../components/devicescript/DeviceScriptDevTools\"\n\nexport const frontmatter = {\n    title: \"DeviceScript Developer Tools\",\n    description: \"Edit, debug, deploy DeviceScript programs.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    return <DeviceScriptDevTools />\n}\n","parent":{"name":"devicescript-devtools","ext":".tsx"}},{"content":"import React from \"react\"\nimport DeviceScriptDevToolsVisualStudioCode from \"../../components/devicescript/DeviceScriptDevToolsVisualStudioCode\"\n\nexport const frontmatter = {\n    title: \"DeviceScript Developer Tools for Visual Studio Code\",\n    description: \"Edit, debug, deploy DeviceScript programs.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    return <DeviceScriptDevToolsVisualStudioCode />\n}\n","parent":{"name":"devicescript-devtools-vscode","ext":".tsx"}},{"content":"import React, { useContext, useEffect, useState } from \"react\"\nimport {\n    Box,\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    CardMedia,\n    CircularProgress,\n    Grid,\n    Switch,\n    Typography,\n    useTheme,\n} from \"@material-ui/core\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useChange from \"../../jacdac/useChange\"\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport { JDClient } from \"../../../jacdac-ts/src/jdom/client\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport Alert from \"../../components/ui/Alert\"\nimport useEffectAsync from \"../../components/useEffectAsync\"\nimport {\n    CHANGE,\n    CONNECT,\n    CONNECTING,\n    CONNECTION_STATE,\n    DISCONNECT,\n    ERROR,\n    PROGRESS,\n    REPORT_RECEIVE,\n    SRV_MODEL_RUNNER,\n    SRV_SENSOR_AGGREGATOR,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport FieldDataSet from \"../../components/FieldDataSet\"\nimport {\n    deviceSpecificationFromProductIdentifier,\n    isSensor,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport CircularProgressWithLabel from \"../../components/ui/CircularProgressWithLabel\"\nimport Trend from \"../../components/Trend\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport GetAppIcon from \"@material-ui/icons/GetApp\"\nimport ServiceList from \"../../components/ServiceList\"\nimport { ModelActions, ModelContent } from \"./model-uploader\"\nimport { readBlobToUint8Array } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useDeviceName from \"../../components/devices/useDeviceName\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport ReadingFieldGrid from \"../../components/ReadingFieldGrid\"\nimport useChartPalette from \"../../components/useChartPalette\"\nimport SensorAggregatorClient, {\n    SensorAggregatorConfig,\n} from \"../../../jacdac-ts/src/clients/sensoraggregatorclient\"\nimport { AlertTitle } from \"@material-ui/lab\"\nimport { serviceName } from \"../../../jacdac-ts/src/jdom/pretty\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport ApiKeyAccordion from \"../../components/ApiKeyAccordion\"\nimport { useSecret } from \"../../components/hooks/useSecret\"\n\nconst EDGE_IMPULSE_API_KEY = \"edgeimpulseapikey\"\n\nconst IDLE = \"idle\"\nconst STARTING = \"starting\"\nconst SAMPLING = \"sampling\"\nconst UPLOADING = \"uploading\"\n\nconst SAMPLING_STATE = \"samplingState\"\n\ninterface EdgeImpulseResponse {\n    success: boolean\n    error?: string\n    // HTTP status code\n    errorStatus?: number\n}\n\ninterface EdgeImpulseHello {\n    hello?: boolean\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    err?: any\n}\n\ninterface EdgeImpulseSensorInfo {\n    name: string\n    maxSampleLengthS: number\n    frequencies: number[]\n}\n\ninterface EdgeImpulseRemoteManagementInfo {\n    version: number\n    apiKey: string\n    deviceId: string\n    deviceType: string\n    connection: string\n    sensors: EdgeImpulseSensorInfo[]\n}\n\ninterface EdgeImpulseDeviceInfo {\n    id: number\n    deviceId: string\n    name: string\n    created: string\n    lastSeen: string\n    deviceType: string\n    sensors: EdgeImpulseSensorInfo[]\n}\n\ninterface EdgeImpulseDeviceResponse extends EdgeImpulseResponse {\n    device?: EdgeImpulseDeviceInfo\n}\n\ninterface EdgeImpulseSample extends EdgeImpulseResponse {\n    label: string\n    length: number\n    path: string\n    hmacKey: string\n    interval: number\n    sensor: string\n}\n\ninterface EdgeImpulseSampling extends EdgeImpulseSample {\n    dataSet?: FieldDataSet\n    startTimestamp?: number\n    lastProgressTimestamp?: number\n    generatedFilename?: string\n    aggregatorConfig?: SensorAggregatorConfig\n    unsubscribers?: (() => void)[]\n}\n\ninterface EdgeImpulseProjectInfo {\n    id: number\n    name: string\n    logo?: string\n}\n\ninterface EdgeImpulseProject extends EdgeImpulseResponse {\n    project: EdgeImpulseProjectInfo\n    devices: EdgeImpulseDeviceInfo[]\n    impulse: {\n        created: boolean\n        configured: boolean\n        complete: boolean\n    }\n    dataSummary: {\n        totalLengthMs: number\n        labels: string[]\n        dataCount: number\n    }\n    downloads: {\n        name: string\n        type: string\n        size: string\n        link: string\n    }[]\n}\n\ninterface EdgeImpulseProjects extends EdgeImpulseResponse {\n    projects: EdgeImpulseProjectInfo[]\n}\n\n/*\nA client for the EdgeImpulse remote management\nhttps://docs.edgeimpulse.com/reference#remote-management\n*/\nclass EdgeImpulseClient extends JDClient {\n    private _ws: WebSocket\n    public connectionState = DISCONNECT\n    public samplingState = IDLE\n    private _hello: EdgeImpulseRemoteManagementInfo\n    private _sample: EdgeImpulseSampling\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _pingInterval: any\n    private pong: boolean\n    private aggregatorClient: SensorAggregatorClient\n\n    constructor(\n        private readonly apiKey: string,\n        private readonly aggregator: JDService,\n        private readonly inputRegisters: JDRegister[],\n        private readonly palette: string[]\n    ) {\n        super()\n\n        this.handleMessage = this.handleMessage.bind(this)\n        this.handleOpen = this.handleOpen.bind(this)\n        this.handleError = this.handleError.bind(this)\n        this.handleReport = this.handleReport.bind(this)\n        this.handlePing = this.handlePing.bind(this)\n\n        this.aggregatorClient = new SensorAggregatorClient(this.aggregator)\n        this.aggregatorClient.subscribeSample(this.handleReport)\n\n        this.mount(() => this.disconnect())\n        this.mount(() => this.aggregatorClient.unmount())\n    }\n\n    get dataSet() {\n        return this._sample?.dataSet\n    }\n\n    disconnect() {\n        this.clearSampling()\n        if (this._pingInterval) {\n            clearInterval(this._pingInterval)\n            this._pingInterval = undefined\n        }\n        // stop socket\n        if (this._ws) {\n            const w = this._ws\n            this._ws = undefined\n            try {\n                w.close()\n            } catch (e) {\n                console.debug(e)\n            } finally {\n                this.setConnectionState(DISCONNECT)\n            }\n        }\n    }\n\n    private setConnectionState(state: string) {\n        if (this.connectionState !== state) {\n            this.connectionState = state\n            this.emit(CONNECTION_STATE, this.connectionState)\n            console.log(`ei: connection state changed`, this.connectionState)\n        }\n    }\n\n    private setSamplingState(state: string) {\n        if (this.samplingState !== state) {\n            this.samplingState = state\n            this.emit(SAMPLING_STATE, this.samplingState)\n            this.emit(CHANGE)\n            console.log(`ei: sampling state changed`, this.samplingState)\n        }\n    }\n\n    private send(msg: unknown) {\n        this._ws?.send(JSON.stringify(msg))\n    }\n\n    private async handleOpen() {\n        console.log(`ws: open`)\n        const service = this.aggregator\n        const { device } = service\n\n        // fetch device spec\n        const productIdentifier =\n            await service.device.resolveProductIdentifier()\n        const deviceSpec =\n            deviceSpecificationFromProductIdentifier(productIdentifier)\n\n        this._hello = {\n            version: 2,\n            apiKey: this.apiKey,\n            deviceId: device.deviceId,\n            deviceType:\n                deviceSpec?.name ||\n                productIdentifier?.toString(16) ||\n                \"Jacdac device\",\n            connection: \"ip\", // direct connection\n            sensors: [\n                {\n                    name: this.inputRegisters\n                        .map(reg => serviceName(reg.service.serviceClass))\n                        .join(\",\"),\n                    maxSampleLengthS: 10000,\n                    frequencies: [50, 30, 20, 10],\n                },\n            ],\n        }\n        this.send({\n            hello: this._hello,\n        })\n    }\n\n    private reconnect() {\n        this.disconnect()\n        this.connect()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private handleMessage(msg: any) {\n        // response to ping?\n        if (msg.data === \"pong\") {\n            this.pong = true\n            return\n        }\n\n        const data = JSON.parse(msg.data)\n        if (data.hello !== undefined) {\n            const hello = data as EdgeImpulseHello\n            if (!hello.hello) {\n                this.emit(ERROR, hello.err)\n                this.disconnect()\n            } else {\n                this.setConnectionState(CONNECT)\n            }\n        } else if (data.sample) {\n            const sample = data.sample as EdgeImpulseSample\n            this.startSampling(sample)\n        }\n    }\n\n    get connected() {\n        return this.connectionState === CONNECT\n    }\n\n    get sampling() {\n        return this.samplingState !== IDLE\n    }\n\n    get generatedSampleName() {\n        return this._sample?.generatedFilename\n    }\n\n    get aggregatorConfig() {\n        return this._sample?.aggregatorConfig\n    }\n\n    private handleReport(row: number[]) {\n        console.log(`ei: aggregator report`, this.connected, this.sampling)\n        if (!this.connected) return // ignore\n\n        // partial data? ignore\n        if (row.some(r => r === undefined)) return\n\n        const { bus } = this.aggregator.device\n        const { timestamp } = bus\n        // first sample, notify we're started\n        if (this.samplingState == STARTING) {\n            this._sample.startTimestamp = this._sample.lastProgressTimestamp =\n                timestamp\n            this.send({ sampleStarted: true })\n            this.setSamplingState(SAMPLING)\n        }\n        // store sample\n        if (this.samplingState == SAMPLING) {\n            const ds = this.dataSet\n            ds.addRow(row)\n            this.emit(REPORT_RECEIVE)\n\n            // debounced progress update\n            if (timestamp - this._sample.lastProgressTimestamp > 100) {\n                this._sample.lastProgressTimestamp = timestamp\n                this.emit(PROGRESS, this.progress)\n            }\n\n            if (\n                timestamp - this._sample.startTimestamp >=\n                this._sample.length\n            ) {\n                // first stop the sampling\n                this.stopSampling()\n                // we're done!\n                this.emit(PROGRESS, this.progress)\n                // and upload...\n                this.uploadData()\n            }\n        }\n    }\n\n    private uploadData(): Promise<void> {\n        this.setSamplingState(UPLOADING)\n        const ds = this.dataSet\n        const payload = {\n            protected: {\n                ver: \"v1\",\n                alg: \"none\",\n                iat: Date.now(),\n            },\n            signature: \"\",\n            payload: {\n                device_name: this._hello.deviceId,\n                device_type: this._hello.deviceType,\n                interval_ms: this._sample.interval,\n                sensors: ds.headers.map((h, i) => ({\n                    name: ds.headers[i],\n                    units: ds.units[i] || \"/\",\n                })),\n                values: ds.data(true),\n            },\n        }\n        console.log(`payload`, payload)\n        // upload dataset\n        // https://docs.edgeimpulse.com/reference#ingestion-api\n        return fetch(`https://ingestion.edgeimpulse.com${this._sample.path}`, {\n            method: \"POST\",\n            headers: {\n                \"x-api-key\": this.apiKey,\n                \"x-label\": this._sample.label,\n                \"x-file-name\": ds.name,\n                \"x-disallow-duplicates\": \"true\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(payload),\n        })\n            .then(async resp => {\n                // response contains the filename\n                const filename = await resp.text()\n                this._sample.generatedFilename = filename\n            })\n            .finally(() => {\n                this.send({\n                    sampleFinished: true,\n                })\n                this.setSamplingState(IDLE)\n            })\n    }\n\n    private handleError(ev: Event) {\n        this.emit(ERROR, ev)\n        this.reconnect()\n    }\n\n    private async startSampling(sample: EdgeImpulseSample) {\n        this._sample = sample\n        this._sample.dataSet = FieldDataSet.create(\n            this.aggregator.device.bus,\n            this.inputRegisters,\n            \"sample\",\n            this.palette\n        )\n        this._sample.unsubscribers = []\n        this.send({ sample: true })\n        this.setSamplingState(STARTING)\n\n        // prepare configuration\n        this._sample.aggregatorConfig = {\n            samplingInterval: this._sample.interval,\n            samplesInWindow: 10,\n            inputs: this.inputRegisters.map(reg => ({\n                serviceClass: reg.service.serviceClass,\n                deviceId: reg.service.device.deviceId,\n                serviceIndex: reg.service.serviceIndex,\n            })),\n        }\n\n        console.log(`ei: input`, this._sample.aggregatorConfig)\n        // setup aggregator client\n        await this.aggregatorClient.setInputs(this._sample.aggregatorConfig)\n        // schedule data collection, ask a few more samples\n        await this.aggregatorClient.collect(this._sample.length * 1.1)\n    }\n\n    private stopSampling() {\n        const sample = this._sample\n        if (sample) {\n            sample.unsubscribers.forEach(unsub => {\n                try {\n                    unsub()\n                } catch (e) {\n                    console.log(e)\n                }\n            })\n            sample.unsubscribers = []\n        }\n    }\n\n    private clearSampling() {\n        this.stopSampling()\n        if (this._sample) {\n            this._sample = undefined\n            this._hello = undefined\n            this.setSamplingState(IDLE)\n        }\n    }\n\n    connect() {\n        if (this._ws) return // already connected\n\n        console.log(`ei: connect`)\n        this.setConnectionState(CONNECTING)\n        this._ws = new WebSocket(\"wss://remote-mgmt.edgeimpulse.com\")\n        this._ws.onmessage = this.handleMessage\n        this._ws.onopen = this.handleOpen\n        this._ws.onerror = this.handleError\n\n        this.pong = true\n        this._pingInterval = setInterval(this.handlePing, 3000)\n    }\n\n    private handlePing() {\n        if (!this.connected) return\n\n        if (!this.pong) {\n            // the socket did not response\n            console.log(`missing pong`)\n            this.reconnect()\n        } else {\n            // send a new ping and wait for pong\n            this.pong = false\n            this._ws.send(\"ping\")\n        }\n    }\n\n    get progress() {\n        const timestamp = this.aggregator.device.bus.timestamp\n        return (\n            this.samplingState !== IDLE &&\n            (timestamp - this._sample.startTimestamp) / this._sample.length\n        )\n    }\n\n    static async currentProjectInfo(apiKey: string): Promise<{\n        valid: boolean\n        errorStatus?: number\n        project?: EdgeImpulseProject\n    }> {\n        if (!apiKey) return { valid: false }\n\n        const rsj = await EdgeImpulseClient.apiFetch<EdgeImpulseProjects>(\n            apiKey,\n            \"projects\"\n        )\n        if (!rsj.success) {\n            return {\n                valid: false,\n                errorStatus: rsj.errorStatus,\n            }\n        }\n\n        // the API returns the current project when using the API key\n        const projectId = rsj.projects?.[0]?.id\n        if (!rsj?.success || projectId === undefined) {\n            return {\n                valid: true,\n                errorStatus: 402,\n            }\n        }\n\n        const project = await EdgeImpulseClient.apiFetch<EdgeImpulseProject>(\n            apiKey,\n            projectId\n        )\n        return {\n            valid: true,\n            errorStatus: project.errorStatus,\n            project,\n        }\n    }\n\n    static async apiFetch<T extends EdgeImpulseResponse>(\n        apiKey: string,\n        path: string | number,\n        body?: unknown\n    ): Promise<T> {\n        const API_ROOT = \"https://studio.edgeimpulse.com/v1/api/\"\n        const url = `${API_ROOT}${path}`\n        const options: RequestInit = {\n            method: body ? \"POST\" : \"GET\",\n            headers: {\n                \"x-api-key\": apiKey,\n                Accept: \"application/json\",\n            },\n            body: body && JSON.stringify(body),\n        }\n        if (options.method === \"POST\")\n            options.headers[\"Content-Type\"] = \"application/json\"\n\n        const resp = await fetch(url, options)\n        if (resp.status !== 200)\n            return {\n                success: false,\n                errorStatus: resp.status,\n                error: resp.statusText,\n            } as T\n        try {\n            const payload = (await resp.json()) as T\n            return payload\n        } catch (e) {\n            return {\n                success: false,\n                errorStatus: 500,\n                error: e.message,\n            } as T\n        }\n    }\n\n    static async deviceInfo(\n        apiKey: string,\n        projectId: number,\n        deviceId: string\n    ): Promise<EdgeImpulseDeviceResponse> {\n        return await EdgeImpulseClient.apiFetch<EdgeImpulseDeviceResponse>(\n            apiKey,\n            `${projectId}/device/${deviceId}`\n        )\n    }\n\n    static async renameDevice(\n        apiKey: string,\n        projectId: number,\n        deviceId: string,\n        name: string\n    ): Promise<EdgeImpulseResponse> {\n        return await EdgeImpulseClient.apiFetch<EdgeImpulseResponse>(\n            apiKey,\n            `${projectId}/devices/${deviceId}/rename`,\n            { name }\n        )\n    }\n}\n\nfunction ApiKeyManager() {\n    const validateKey = async (key: string) => {\n        const r = await EdgeImpulseClient.currentProjectInfo(key)\n        return {\n            status: (r?.valid && 200) || r?.errorStatus || 500,\n        }\n    }\n    return (\n        <ApiKeyAccordion\n            apiName={EDGE_IMPULSE_API_KEY}\n            validateKey={validateKey}\n        >\n            To get an <b>API key</b>, navigate to &nbsp;\n            <Link\n                to=\"https://studio.edgeimpulse.com/studio/8698/keys\"\n                target=\"_blank\"\n            >\n                https://studio.edgeimpulse.com/studio/8698/keys\n            </Link>\n            &nbsp; and generate a new key.\n        </ApiKeyAccordion>\n    )\n}\n\nfunction useEdgeImpulseProjectInfo(apiKey: string) {\n    const [info, setInfo] = useState<EdgeImpulseProject>(undefined)\n\n    useEffectAsync(\n        async mounted => {\n            if (!apiKey) {\n                if (mounted()) setInfo(undefined)\n            } else {\n                const r = await EdgeImpulseClient.currentProjectInfo(apiKey)\n                if (mounted()) setInfo(r?.project)\n            }\n        },\n        [apiKey]\n    )\n\n    return info\n}\n\nfunction ProjectInfo(props: { info: EdgeImpulseProject }) {\n    const { info } = props\n    const disabled = !info?.success\n\n    return (\n        <Card>\n            <CardHeader\n                title={info?.project?.name || \"...\"}\n                subheader={\n                    info?.dataSummary &&\n                    `${info?.dataSummary?.dataCount} samples`\n                }\n            />\n            {info?.project?.logo && <CardMedia image={info?.project?.logo} />}\n            <CardActions>\n                <Button\n                    disabled={disabled}\n                    target=\"_blank\"\n                    href={`https://studio.edgeimpulse.com/studio/${info?.project?.id}/`}\n                    variant=\"contained\"\n                    color=\"primary\"\n                >\n                    Open EdgeImpulse\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nfunction ModelDownloadButton(props: {\n    apiKey: string\n    info: EdgeImpulseProject\n    setModel: (blob: Uint8Array) => void\n}) {\n    const { apiKey, info, setModel } = props\n    const theme = useTheme()\n    const [downloading, setDownloading] = useState(false)\n    const [error, setError] = useState(\"\")\n    const download = info?.downloads.find(\n        download => download.type === \"TensorFlow Lite (float32)\"\n    )\n\n    const handleDownload = (url: string) => async () => {\n        try {\n            setDownloading(true)\n            setError(\"\")\n            const resp = await fetch(url, {\n                headers: {\n                    \"x-api-key\": apiKey,\n                },\n            })\n            const res = await resp.blob()\n            const bytes = await readBlobToUint8Array(res)\n            setModel(bytes)\n        } catch (e) {\n            console.log(e)\n            setError(\"Oops, download failed.\")\n        } finally {\n            setDownloading(false)\n        }\n    }\n\n    return (\n        <Box mb={1}>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            <Button\n                variant=\"contained\"\n                disabled={!download || downloading}\n                startIcon={\n                    downloading ? (\n                        <CircularProgress size={theme.spacing(2)} />\n                    ) : (\n                        <GetAppIcon />\n                    )\n                }\n                onClick={handleDownload(\n                    `https://studio.edgeimpulse.com${download?.link}`\n                )}\n            >\n                DOWNLOAD MODEL\n            </Button>\n        </Box>\n    )\n}\n\nfunction AggregatorCard(props: {\n    aggregator: JDService\n    selected: boolean\n    onChecked: () => void\n}) {\n    const { aggregator, selected, onChecked } = props\n    const { device } = aggregator\n\n    const handleChecked = () => onChecked()\n\n    return (\n        <Card>\n            <DeviceCardHeader device={device} showMedia={true} />\n            <CardContent>\n                <Switch checked={selected} onChange={handleChecked} />\n            </CardContent>\n        </Card>\n    )\n}\n\nfunction Acquisition(props: {\n    aggregator: JDService\n    inputs: JDRegister[]\n    apiKey: string\n    info: EdgeImpulseProjectInfo\n}) {\n    const { aggregator, inputs, apiKey, info } = props\n\n    const { device } = aggregator\n    const [client, setClient] = useState<EdgeImpulseClient>(undefined)\n    const [error, setError] = useState(\"\")\n    const [connectionState, setConnectionState] = useState(DISCONNECT)\n    const [samplingState, setSamplingState] = useState(IDLE)\n    const [samplingProgress, setSamplingProgress] = useState(0)\n    const [, setDeviceInfo] = useState<EdgeImpulseDeviceInfo>(undefined)\n    const { deviceId } = device\n    const deviceName = useDeviceName(device, false)\n    const projectId = info?.id\n    const palette = useChartPalette()\n\n    const connected = connectionState === CONNECT\n    const sampling = samplingState !== IDLE\n    const dataSet = client?.dataSet\n    const generatedSampleName = client?.generatedSampleName\n    const aggregatorConfig = client?.aggregatorConfig\n\n    useEffect(() => {\n        if (!apiKey || !aggregator || !inputs?.length) {\n            setClient(undefined)\n            setError(undefined)\n            return undefined\n        } else {\n            console.log(`ei: start client`)\n            const c = new EdgeImpulseClient(apiKey, aggregator, inputs, palette)\n            c.connect()\n            setClient(c)\n            setError(undefined)\n            return () => c.unmount()\n        }\n    }, [apiKey, aggregator, inputs?.map(ip => ip.id).join(\",\")])\n    // subscribe to client changes\n    useEffect(\n        () =>\n            client?.subscribe(CONNECTION_STATE, (v: string) =>\n                setConnectionState(v)\n            ),\n        [client]\n    )\n    // subscribe to client changes\n    useEffect(\n        () =>\n            client?.subscribe(SAMPLING_STATE, (v: string) =>\n                setSamplingState(v)\n            ),\n        [client]\n    )\n    // listen to errors\n    useEffect(\n        () => client?.subscribe(ERROR, (e: string) => setError(e)),\n        [client]\n    )\n    // progress\n    useEffect(\n        () =>\n            client?.subscribe(PROGRESS, (p: number) =>\n                setSamplingProgress(p * 100)\n            ),\n        [client]\n    )\n\n    // name checking\n    useEffectAsync(async () => {\n        if (!apiKey || projectId === undefined) {\n            setDeviceInfo(undefined)\n        } else {\n            const resp = await EdgeImpulseClient.deviceInfo(\n                apiKey,\n                projectId,\n                deviceId\n            )\n            const info = resp.success && resp.device\n            if (info && info.name !== deviceName) {\n                // no name assigned, use current\n                if (info.name === deviceId) {\n                    console.log(`ei: sync name`)\n                    const rename = await EdgeImpulseClient.renameDevice(\n                        apiKey,\n                        projectId,\n                        deviceId,\n                        deviceName\n                    )\n                    if (rename.success) {\n                        info.name = deviceName\n                    }\n                }\n            }\n            setDeviceInfo(info)\n        }\n    }, [apiKey, projectId, deviceName])\n\n    return (\n        <Box>\n            {connected && (\n                <Alert severity={\"success\"}>Connected to EdgeImpulse</Alert>\n            )}\n            {error && <Alert severity={\"error\"}>{error}</Alert>}\n            {sampling && (\n                <Alert severity={\"info\"}>\n                    <AlertTitle>Sampling...</AlertTitle>\n                    <CircularProgressWithLabel value={samplingProgress} />\n                </Alert>\n            )}\n            {!!dataSet && <Trend dataSet={dataSet} />}\n            {generatedSampleName && (\n                <Typography variant=\"body2\">\n                    sample name: {generatedSampleName}\n                </Typography>\n            )}\n            {aggregatorConfig && (\n                <pre>{JSON.stringify(aggregatorConfig, null, 2)}</pre>\n            )}\n        </Box>\n    )\n}\n\nexport default function EdgeImpulse() {\n    const { value: apiKey } = useSecret(EDGE_IMPULSE_API_KEY)\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const [model, setModel] = useState<Uint8Array>(undefined)\n    const [registerIdsChecked, setRegisterIdsChecked] = useState<string[]>([])\n    const [aggregatorId, setAggregatorId] = useState<string>(\"\")\n    const gridBreakPoints = useGridBreakpoints()\n    const info = useEdgeImpulseProjectInfo(apiKey)\n\n    const aggregators: JDService[] = useChange(bus, bus =>\n        bus.services({ serviceClass: SRV_SENSOR_AGGREGATOR })\n    )\n    const currentAggregator: JDService =\n        aggregators.find(srv => srv.id == aggregatorId) || aggregators[0]\n    const readingRegisters = useChange(bus, bus =>\n        bus\n            .devices()\n            .map(\n                device =>\n                    device.services().find(srv => isSensor(srv.specification))\n                        ?.readingRegister\n            )\n            .filter(reg => !!reg)\n    )\n    const inputs = readingRegisters.filter(\n        reg => registerIdsChecked.indexOf(reg.id) > -1\n    )\n\n    const handleAggregatorChecked = (srv: JDService) => () => {\n        const id = srv?.id == aggregatorId ? \"\" : srv?.id\n        setAggregatorId(id)\n    }\n    const handleRegisterCheck = (reg: JDRegister) => {\n        const i = registerIdsChecked.indexOf(reg.id)\n        if (i > -1) registerIdsChecked.splice(i, 1)\n        else registerIdsChecked.push(reg.id)\n        registerIdsChecked.sort()\n        setRegisterIdsChecked([...registerIdsChecked])\n    }\n\n    return (\n        <>\n            <h1>Edge Impulse</h1>\n            <p>\n                Use Jacdac to inject data and download models into{\" \"}\n                <Link href=\"https://studio.edgeimpulse.com\">\n                    https://studio.edgeimpulse.com\n                </Link>\n                .\n            </p>\n            <ConnectAlert />\n            <ApiKeyManager />\n            <Box mb={1} />\n            <ProjectInfo info={info} />\n            <h3>Data</h3>\n            <h4>Select Sensors</h4>\n            {!readingRegisters?.length && (\n                <Alert severity=\"info\">No sensor found...</Alert>\n            )}\n            {!!readingRegisters.length && (\n                <ReadingFieldGrid\n                    readingRegisters={readingRegisters}\n                    registerIdsChecked={registerIdsChecked}\n                    handleRegisterCheck={handleRegisterCheck}\n                />\n            )}\n            <h4>Select Sensor Aggregator</h4>\n            {!aggregators?.length && (\n                <Alert severity=\"info\">No data aggregator found...</Alert>\n            )}\n            <Grid container spacing={2}>\n                {aggregators.map(aggregator => (\n                    <Grid key={aggregator.id} item {...gridBreakPoints}>\n                        <AggregatorCard\n                            aggregator={aggregator}\n                            selected={currentAggregator === aggregator}\n                            onChecked={handleAggregatorChecked(aggregator)}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n            <h4>Acquisition status</h4>\n            {!currentAggregator && (\n                <Alert severity=\"info\">No data aggregator selected...</Alert>\n            )}\n            {!inputs?.length && (\n                <Alert severity=\"info\">\n                    Select sensors to collect data from...\n                </Alert>\n            )}\n            {currentAggregator && !!inputs?.length && (\n                <Acquisition\n                    aggregator={currentAggregator}\n                    inputs={inputs}\n                    apiKey={apiKey}\n                    info={info?.project}\n                />\n            )}\n            <h3>Deployment</h3>\n            {model && (\n                <Box mb={1}>\n                    <Alert severity=\"success\">Model downloaded!</Alert>\n                </Box>\n            )}\n            <ModelDownloadButton\n                apiKey={apiKey}\n                info={info}\n                setModel={setModel}\n            />\n            <ServiceList\n                serviceClass={SRV_MODEL_RUNNER}\n                content={service => <ModelContent service={service} />}\n                actions={service => (\n                    <ModelActions service={service} model={model} />\n                )}\n                alertMissing={\"No model runner found...\"}\n            />\n        </>\n    )\n}\n","parent":{"name":"edge-impulse","ext":".tsx_"}},{"content":"import {\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    TextField,\n} from \"@mui/material\"\nimport React, { ChangeEvent, useState } from \"react\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport CmdButton from \"../../components/CmdButton\"\nimport { ControlCmd } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport ConnectButtons from \"../../components/buttons/ConnectButtons\"\n\nfunction FloodCard(props: {\n    device: JDDevice\n    numResponses: number\n    startCounter: number\n    size: number\n}) {\n    const { device, numResponses, startCounter, size } = props\n    const handleClick = async () => {\n        const service = device.service(0)\n        const data = jdpack<[number, number, number]>(\"u32 u32 u8\", [\n            numResponses,\n            startCounter,\n            size,\n        ])\n        await service.sendCmdAsync(ControlCmd.FloodPing, data)\n    }\n    return (\n        <Card>\n            <DeviceCardHeader device={device} />\n            <CardActions>\n                <CmdButton onClick={handleClick}>Flood</CmdButton>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function Page() {\n    const devices = useDevices({})\n    const [numResponses, setNumResponses] = useState(100)\n    const [startCounter, setStartCounter] = useState(0)\n    const [size, setSize] = useState(32)\n\n    const handleChangeNumberResponses = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setNumResponses(i)\n    }\n    const handleChangeStartCounter = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setStartCounter(Math.max(0, i))\n    }\n    const handleChangeSize = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setSize(Math.max(1, i))\n    }\n\n    return (\n        <>\n            <h1>Flood Test</h1>\n            <Card>\n                <CardHeader title=\"Configuration\" />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <TextField\n                                label=\"number of responses\"\n                                value={numResponses}\n                                onChange={handleChangeNumberResponses}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"start counter\"\n                                value={startCounter}\n                                onChange={handleChangeStartCounter}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"size\"\n                                value={size}\n                                onChange={handleChangeSize}\n                                type=\"number\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n            <Grid container spacing={1}>\n                <GridHeader\n                    action={<ConnectButtons transparent={true} />}\n                    title={\"Devices\"}\n                />\n                {devices.map(device => (\n                    <Grid key={device.id} item>\n                        <FloodCard\n                            device={device}\n                            numResponses={numResponses}\n                            startCounter={startCounter}\n                            size={size}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n            <ConnectAlert />\n        </>\n    )\n}\n","parent":{"name":"flood-test","ext":".tsx"}},{"content":"import React, { useContext, useEffect } from \"react\"\nimport { styled } from \"@mui/material/styles\"\nimport { createTheme, responsiveFontSizes } from \"@mui/material\"\nimport ThemedLayout from \"../../components/ui/ThemedLayout\"\nimport MakeRoleCodeEditorExtension from \"../../components/makecode/MakeCodeRoleEditorExtension\"\nimport PaperBox from \"../../components/ui/PaperBox\"\nimport DarkModeContext from \"../../components/ui/DarkModeContext\"\nimport { MakeCodeEditorExtensionProvider } from \"../../components/makecode/MakeCodeEditorExtensionContext\"\nimport MakeCodeAddExtensionBox from \"../../components/makecode/MakeCodeAddExtensionBox\"\nimport { Flags } from \"../../../jacdac-ts/src/jdom/flags\"\n\nconst PREFIX = \"makecode-editor-extension\"\n\nconst classes = {\n    content: `${PREFIX}content`,\n}\n\nconst Root = styled(\"div\")(({ theme }) => ({\n    [`& .${classes.content}`]: {\n        display: \"flex\",\n        minHeight: \"100vh\",\n        minWidth: \"10rem\",\n        flexDirection: \"column\",\n        padding: theme.spacing(3),\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        flexGrow: 1,\n    },\n}))\n\nexport default function MakeCodeEditorExtensionPage() {\n    const { toggleDarkMode, darkModeMounted } = useContext(DarkModeContext)\n    const rawTheme = createTheme({\n        palette: {\n            primary: {\n                main: \"#2e7d32\",\n            },\n            secondary: {\n                main: \"#ffc400\",\n            },\n            background: {\n                default: \"#fff\",\n            },\n            contrastThreshold: 5.1,\n            mode: \"light\",\n        },\n    })\n\n    const theme = responsiveFontSizes(rawTheme)\n    useEffect(() => {\n        if (darkModeMounted) toggleDarkMode(\"light\")\n    }, [darkModeMounted])\n    return (\n        <Root>\n            <ThemedLayout theme={theme}>\n                <MakeCodeEditorExtensionProvider>\n                    <div className={classes.content}>\n                        <PaperBox>\n                            <MakeRoleCodeEditorExtension />\n                        </PaperBox>\n                        {Flags.diagnostics && (\n                            <PaperBox>\n                                <MakeCodeAddExtensionBox />\n                            </PaperBox>\n                        )}\n                    </div>\n                </MakeCodeEditorExtensionProvider>\n            </ThemedLayout>\n        </Root>\n    )\n}\n","parent":{"name":"makecode-editor-extension","ext":".tsx"}},{"content":"import React, { useContext, useEffect } from \"react\"\nimport { createTheme, responsiveFontSizes } from \"@mui/material\"\nimport ThemedLayout from \"../../components/ui/ThemedLayout\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport { isReading, isValueOrIntensity } from \"../../../jacdac-ts/src/jdom/spec\"\nimport { strcmp } from \"../../../jacdac-ts/src/jdom/utils\"\nimport Dashboard from \"../../components/dashboard/Dashboard\"\nimport DarkModeContext from \"../../components/ui/DarkModeContext\"\nimport IFrameBridgeClient from \"../../components/makecode/iframebridgeclient\"\nimport useBus from \"../../jacdac/useBus\"\nimport MakeCodeBlocksAndSimsBox from \"../../components/makecode/MakeCodeBlocksAndSimsBox\"\nimport { usePersistentSimulators } from \"../../jacdac/usePersistentSimulators\"\n\n/**\n * To debug locally:\n *\n * - launch yarn develop\n * - launch pxt serve + ?localhostmessagesims=1\n * - launch jacdac project\n */\n\nfunction deviceSort(l: JDDevice, r: JDDevice): number {\n    const srvScore = (srv: jdspec.ServiceSpec) =>\n        srv.packets.reduce(\n            (prev, pkt) =>\n                prev + (isReading(pkt) ? 10 : isValueOrIntensity(pkt) ? 1 : 0),\n            0\n        ) || 0\n    const score = (srvs: jdspec.ServiceSpec[]) =>\n        srvs.reduce((prev, srv) => srvScore(srv), 0)\n\n    const ls = score(\n        l\n            .services()\n            .slice(1)\n            .map(srv => srv.specification)\n            .filter(spec => !!spec)\n    )\n    const rs = score(\n        r\n            .services()\n            .slice(1)\n            .map(srv => srv.specification)\n            .filter(spec => !!spec)\n    )\n    if (ls !== rs) return -ls + rs\n    return strcmp(l.deviceId, r.deviceId)\n}\n\nfunction Carousel() {\n    const bus = useBus()\n    const iframeBridge = bus.nodeData[\n        IFrameBridgeClient.DATA_ID\n    ] as IFrameBridgeClient\n    const deviceFilter = iframeBridge?.deviceFilter.bind(iframeBridge)\n    const serviceFilter = iframeBridge?.serviceFilter.bind(iframeBridge)\n\n    useEffect(() => {\n        bus.streaming = true\n        bus.broadcastDisconnectRequest()\n    }, [])\n\n    usePersistentSimulators()\n\n    return (\n        <>\n            <MakeCodeBlocksAndSimsBox />\n            <Dashboard\n                showHeader={false}\n                showDeviceHeader={true}\n                showDeviceAvatar={true}\n                deviceSort={deviceSort}\n                deviceFilter={deviceFilter}\n                serviceFilter={serviceFilter}\n                showStartRoleSimulators={false}\n                alwaysVisible={true}\n                variant=\"icon\"\n                controlled={true}\n            />\n        </>\n    )\n}\n\nexport default function Page() {\n    const { toggleDarkMode, darkModeMounted } = useContext(DarkModeContext)\n    const rawTheme = createTheme({\n        palette: {\n            primary: {\n                main: \"#85e\",\n            },\n            secondary: {\n                main: \"#ffc400\",\n            },\n            background: {\n                default: \"#fff\",\n            },\n            mode: \"light\",\n            contrastThreshold: 3.1,\n        },\n    })\n    const theme = responsiveFontSizes(rawTheme)\n\n    useEffect(() => {\n        if (darkModeMounted) toggleDarkMode(\"light\")\n    }, [darkModeMounted])\n\n    return (\n        <ThemedLayout theme={theme}>\n                <style>\n                    {`\nhtml {\n    margin-right: 4px;\n}\nhtml, body {\n    background: transparent !important;\n    overflow: hidden !important;\n}\n`}\n                </style>\n            <Carousel />\n        </ThemedLayout>\n    )\n}\n","parent":{"name":"makecode-sim","ext":".tsx"}},{"content":"import { List, ListItem, ListItemText, Typography } from \"@mui/material\"\nimport React, { lazy, useContext, useState } from \"react\"\nimport {\n    SRV_SENSOR_AGGREGATOR,\n    SRV_MODEL_RUNNER,\n    ModelRunnerReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport ServiceList from \"../../components/ServiceList\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport { useDbJSON, useDbUint8Array } from \"../../components/useDb\"\nimport Alert from \"../../components/ui/Alert\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport { ModelRunnerClient } from \"../../../jacdac-ts/src/clients/modelrunnerclient\"\nimport RegisterInput from \"../../components/RegisterInput\"\nimport CircularProgressWithLabel from \"../../components/ui/CircularProgressWithLabel\"\nimport {\n    SensorAggregatorClient,\n    SensorAggregatorConfig,\n} from \"../../../jacdac-ts/src/clients/sensoraggregatorclient\"\nimport SensorAggregatorConfigView from \"../../components/SensorAggregatorConfigView\"\nimport ServiceManagerContext from \"../../components/ServiceManagerContext\"\nimport useChange from \"../../jacdac/useChange\"\nimport { EmbedFile } from \"../../../jacdac-ts/src/embed/protocol\"\nimport { prettySize } from \"../../../jacdac-ts/src/jdom/pretty\"\nimport RegisterTrend from \"../../components/RegisterTrend\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useCall from \"../../components/useCall\"\n\nimport Suspense from \"../../components/ui/Suspense\"\nimport { Link } from \"@mui/icons-material\"\nimport useRegister from \"../../components/hooks/useRegister\"\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\n\nexport function ModelContent(props: { service: JDService }) {\n    const { service } = props\n\n    const modelSizeRegister = useRegister(service, ModelRunnerReg.ModelSize)\n    const lastErrorRegister = useRegister(service, ModelRunnerReg.LastError)\n    const autoInvokeEveryRegister = useRegister(\n        service,\n        ModelRunnerReg.AutoInvokeEvery\n    )\n    const outputsRegister = useRegister(service, ModelRunnerReg.Outputs)\n\n    const [modelSize] = useRegisterUnpackedValue<[number]>(modelSizeRegister)\n    const [lastError] = useRegisterUnpackedValue<[number]>(lastErrorRegister)\n\n    return (\n        <>\n            {lastError && <Alert severity=\"warning\">{lastError}</Alert>}\n            <Typography>\n                model size:{\" \"}\n                {modelSize === undefined ? \"...\" : prettySize(modelSize)}\n            </Typography>\n            <RegisterInput register={autoInvokeEveryRegister} visible={true} />\n            <RegisterTrend showName register={outputsRegister} mini={true} />\n        </>\n    )\n}\n\nexport function ModelActions(props: {\n    service: JDService\n    model: Uint8Array\n    sensorAggregatorService?: JDService\n    sensorInput?: SensorAggregatorConfig\n}) {\n    const { service, model, sensorAggregatorService, sensorInput } = props\n    const { running, progress, alert, callAsync } = useCall()\n\n    const modelDisabled = !service || !model || running\n\n    const handleDeployModel = async () =>\n        await callAsync(async setProgress => {\n            if (sensorAggregatorService && sensorInput) {\n                const aggregator = new SensorAggregatorClient(\n                    sensorAggregatorService\n                )\n                await aggregator.setInputs(sensorInput)\n            }\n            if (service && model) {\n                const runner = new ModelRunnerClient(service)\n                await runner.deployModel(model, setProgress)\n            }\n        })\n\n    return (\n        <>\n            {!running && (\n                <Button\n                    disabled={modelDisabled}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleDeployModel}\n                >\n                    {sensorInput\n                        ? \"Deploy model and configuration\"\n                        : \"Deploy model\"}\n                </Button>\n            )}\n            {running && <CircularProgressWithLabel value={progress * 100} />}\n            {alert}\n        </>\n    )\n}\n\nexport default function ModelUploader() {\n    const [importing, setImporting] = useState(false)\n    const { data: model, setBlob: setModel } = useDbUint8Array(\"model.tflite\")\n    const { value: sensorConfig, setBlob: setSensorConfig } =\n        useDbJSON<SensorAggregatorConfig>(\"sensor-input.json\")\n    const { modelStore } = useContext(ServiceManagerContext)\n\n    const handleTfmodelFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setModel(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearModel = async () => {\n        try {\n            setImporting(true)\n            await setModel(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleSensorConfigFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setSensorConfig(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearConfiguration = async () => {\n        try {\n            setImporting(true)\n            await setSensorConfig(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadModel = (model: EmbedFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model)\n            console.log(`loaded content`, blob)\n            if (blob) {\n                setModel(blob)\n            }\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadInputConfiguration = (model: EmbedFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model)\n            console.log(`loaded content`, blob)\n            if (blob) {\n                setSensorConfig(blob)\n            }\n        } finally {\n            setImporting(false)\n        }\n    }\n\n    const models = useChange(modelStore, _ => _?.models())\n    const inputConfigurations = useChange(modelStore, _ =>\n        _?.inputConfigurations()\n    )\n\n    return (\n        <>\n            <h1>Model uploader</h1>\n            <p>\n                Upload Machine Learning Models (like TensorFlow Lite) into your{\" \"}\n                <Link to=\"/services/model-runner/\">ML module runners</Link>.\n            </p>\n            <h3>Load a machine learning model</h3>\n            <p>\n                Machine learning models are typically stored in a{\" \"}\n                <code>.tflite</code> file.\n            </p>\n            {model && (\n                <Alert severity={\"success\"}>\n                    Model loaded ({prettySize(model.byteLength)})\n                </Alert>\n            )}\n            {model && <p />}\n            <Suspense>\n                <ImportButton\n                    disabled={importing}\n                    text={\"Import model\"}\n                    onFilesUploaded={handleTfmodelFiles}\n                />\n            </Suspense>\n            <Button\n                aria-label=\"clear model\"\n                disabled={importing}\n                onClick={handleClearModel}\n            >\n                clear model\n            </Button>\n            {models?.length && (\n                <List>\n                    {models.map(model => (\n                        <ListItem\n                            key={model.path}\n                            button\n                            onClick={handleLoadModel(model)}\n                        >\n                            <ListItemText\n                                primary={model.name}\n                                secondary={`${model.path} ${prettySize(\n                                    model.size\n                                )}`}\n                            />\n                        </ListItem>\n                    ))}\n                </List>\n            )}\n            <h3>Configure sensors</h3>\n            <p>\n                Sensor configuration files are stored in a <code>.jd.json</code>{\" \"}\n                file.\n            </p>\n            {sensorConfig && (\n                <Alert severity={\"success\"}>Sensor configuration loaded</Alert>\n            )}\n            {sensorConfig && (\n                <SensorAggregatorConfigView config={sensorConfig} />\n            )}\n            {sensorConfig && <p />}\n            <Suspense>\n                <ImportButton\n                    disabled={importing}\n                    text={\"Import configuration\"}\n                    onFilesUploaded={handleSensorConfigFiles}\n                />\n            </Suspense>\n            <Button\n                aria-label=\"clear configuration\"\n                disabled={importing}\n                onClick={handleClearConfiguration}\n            >\n                clear configuration\n            </Button>\n            {inputConfigurations?.length && (\n                <List>\n                    {inputConfigurations.map(iconfig => (\n                        <ListItem\n                            key={iconfig.path}\n                            button\n                            onClick={handleLoadInputConfiguration(iconfig)}\n                        >\n                            <ListItemText\n                                primary={iconfig.name}\n                                secondary={`${iconfig.path} ${prettySize(\n                                    iconfig.size\n                                )}`}\n                            />\n                        </ListItem>\n                    ))}\n                </List>\n            )}\n            <h3>Deploy model to machine learning services</h3>\n            <ConnectAlert serviceClass={SRV_MODEL_RUNNER} />\n            <ServiceList\n                serviceClass={SRV_MODEL_RUNNER}\n                content={service => <ModelContent service={service} />}\n                actions={service => (\n                    <ModelActions\n                        service={service}\n                        model={model}\n                        sensorAggregatorService={\n                            service?.device.services({\n                                serviceClass: SRV_SENSOR_AGGREGATOR,\n                            })?.[0]\n                        }\n                        sensorInput={sensorConfig}\n                    />\n                )}\n            />\n        </>\n    )\n}\n","parent":{"name":"model-uploader","ext":".tsx"}},{"content":"import React from \"react\"\nimport TraceAnalyzer from \"../../components/trace/TraceAnalyzer\"\n\nexport const frontmatter = {\n    title: \"Trace Player\",\n    description: \"Replay a packet trace.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = (props) => <CoreHead {...props} {...frontmatter} />\n\n\nexport default function Page() {\n    return <TraceAnalyzer />\n}\n","parent":{"name":"player","ext":".tsx"}},{"content":"import React from \"react\"\nimport PacketInspector from \"../../components/tools/PacketInspector\"\n\nexport default function Page() {\n    return <PacketInspector />\n}\n","parent":{"name":"packet-inspector","ext":".tsx"}},{"content":"import {\n    Accordion,\n    AccordionSummary,\n    Stack,\n    AccordionDetails,\n} from \"@mui/material\"\nimport React, { useMemo, useState } from \"react\"\nimport useLocalStorage from \"../../components/hooks/useLocalStorage\"\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\"\nimport { PanelTest } from \"../../../jacdac-ts/src/testdom/nodes\"\nimport { tryParsePanelTestSpec } from \"../../../jacdac-ts/src/testdom/compiler\"\nimport usePanelTest from \"../../components/testdom/usePanelTest\"\nimport TestStateIcon from \"../../components/testdom/TestStateIcon\"\nimport TestTreeView from \"../../components/testdom/TestTreeView\"\nimport DeviceTestExporter from \"../../components/testdom/DeviceTestExporter\"\nimport FirmwareLoader from \"../../components/firmware/FirmwareLoader\"\nimport PanelSpecEditor from \"../../components/testdom/PanelSpecEditor\"\n\nconst PANEL_MANIFEST_KEY = \"panel-test-manifest\"\n\nfunction Results(props: { panel: PanelTest }) {\n    const { panel } = props\n    const [expanded, setExpanded] = useState(true)\n    const handleExpanded = () => setExpanded(v => !v)\n\n    return (\n        <Accordion expanded={expanded} onChange={handleExpanded}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <h2>\n                    Test Result: <TestStateIcon node={panel} />\n                </h2>\n            </AccordionSummary>\n            <AccordionDetails style={{ display: \"block\" }}>\n                <TestTreeView\n                    test={panel}\n                    showTwins={true}\n                    defaultExpanded={true}\n                />\n            </AccordionDetails>\n        </Accordion>\n    )\n}\n\nexport default function PanelTester() {\n    const [manifestSource, setManifestSource] = useLocalStorage(\n        PANEL_MANIFEST_KEY,\n        \"\"\n    )\n    const panelSpec = useMemo(\n        () => tryParsePanelTestSpec(manifestSource),\n        [manifestSource]\n    )\n    const panel = usePanelTest(panelSpec)\n\n    return (\n        <Stack spacing={3}>\n            <FirmwareLoader />\n            <h1>Panel Tester</h1>\n            <PanelSpecEditor\n                source={manifestSource}\n                setSource={setManifestSource}\n                panel={panelSpec}\n            />\n            {panel && <Results panel={panel} />}\n            {panel && <DeviceTestExporter />}\n        </Stack>\n    )\n}\n","parent":{"name":"panel-tester","ext":".tsx"}},{"content":"import { Grid, Switch, Typography } from \"@mui/material\"\nimport React, { useContext, useEffect, useState } from \"react\"\nimport {\n    bufferEq,\n    pick,\n    randomRange,\n    toHex,\n} from \"../../../jacdac-ts/src/jdom/utils\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport {\n    ProtoTestCmd,\n    ProtoTestReg,\n    SRV_PROTO_TEST,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport { JDField } from \"../../../jacdac-ts/src/jdom/field\"\nimport {\n    jdpack,\n    jdpackEqual,\n    jdunpack,\n    PackedValues,\n} from \"../../../jacdac-ts/src/jdom/pack\"\nimport DeviceName from \"../../components/devices/DeviceName\"\nimport DeviceActions from \"../../components/devices/DeviceActions\"\nimport useEffectAsync from \"../../components/useEffectAsync\"\nimport TestCard from \"../../components/TestCard\"\nimport { Packet } from \"../../../jacdac-ts/src/jdom/packet\"\nimport { JDEvent } from \"../../../jacdac-ts/src/jdom/event\"\nimport { AlertTitle } from \"@mui/material\"\nimport Alert from \"../../components/ui/Alert\"\nimport { ProtocolTestServer } from \"../../../jacdac-ts/src/jdom/servers/protocoltestserver\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport { anyRandomUint32 } from \"../../../jacdac-ts/src/jdom/random\"\nimport { JDServerServiceProvider } from \"../../../jacdac-ts/src/jdom/servers/serverserviceprovider\"\nimport { useId } from \"react\"\nimport useServices from \"../../components/hooks/useServices\"\nimport useBus from \"../../jacdac/useBus\"\n\nfunction randomFieldPayload(field: JDField) {\n    const { specification } = field\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let r: any = undefined\n    switch (specification.type) {\n        case \"bool\":\n            r = Math.random() > 0.5 ? 1 : 0\n            break\n        case \"i8\":\n        case \"i16\":\n        case \"i32\":\n        case \"u8\":\n        case \"u16\":\n        case \"u32\": {\n            const unsigned = specification.type[0] === \"u\"\n            const n = Math.min(30, parseInt(specification.type.slice(1)))\n            const min = pick(\n                specification.typicalMin,\n                specification.absoluteMin,\n                unsigned ? 0 : -((1 << (n - 1)) - 1)\n            )\n            const max = pick(\n                specification.typicalMax,\n                specification.absoluteMax,\n                unsigned ? (1 << n) - 1 : (1 << (n - 1)) - 1\n            )\n            r = randomRange(min, max)\n            break\n        }\n        case \"bytes\": {\n            // maxBytes?\n            const a = anyRandomUint32(randomRange(1, 3))\n            r = new Uint8Array(a.buffer)\n            break\n        }\n        case \"string\":\n        case \"string0\": {\n            const ch_a = \"a\".charCodeAt(0)\n            const ch_z = \"z\".charCodeAt(0)\n            const n = randomRange(4, 10)\n            let s = \"\"\n            for (let i = 0; i < n; ++i) {\n                s += String.fromCharCode(randomRange(ch_a, ch_z))\n            }\n            r = s\n            break\n        }\n    }\n\n    return r\n}\n\nfunction randomPayload<T extends PackedValues>(\n    packFormat: string,\n    fields: JDField[]\n): T {\n    if (!packFormat) throw new Error(\"pack format unknown\")\n    const rs = fields.map(randomFieldPayload)\n    if (rs.some(r => r === undefined))\n        throw new Error(\"unsupported data layout\")\n    return rs as T\n}\n\nfunction RegisterProtocolTest(props: {\n    rw: JDRegister\n    ro: JDRegister\n    ev: JDEvent\n}) {\n    const { rw, ro, ev } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { specification, fields } = rw\n    const name = specification.name.replace(/^rw_/, \"\")\n\n    // event code and command code are the same as rw register\n    useEffectAsync(async () => {\n        await rw.sendGetAsync()\n        await ro.sendGetAsync()\n    }, [])\n\n    const testRwRo = async log => {\n        log(`-- testing rw`)\n        const packFormat = specification.packFormat\n        const payload = randomPayload(packFormat, fields)\n        log({ payload })\n\n        const data = jdpack(packFormat, payload)\n        log({ data: toHex(data) })\n\n        // setup observer for event counts\n        const evCount = ev.count\n\n        // send over packet\n        await rw.sendSetAsync(data)\n        // read packet\n        await rw.sendGetAsync()\n        // wait for response\n        await bus.delay(100)\n        // check read\n        log({ rwdata: toHex(rw.data) })\n        const rwpayload = jdunpack(rw.data, packFormat)\n        log({ rwpayload })\n        if (!jdpackEqual(packFormat, payload, rwpayload))\n            throw new Error(`expected rw ${payload}, got ${rwpayload}`)\n\n        // check ro\n        log(`-- testing ro`)\n        await ro.sendGetAsync()\n        // wait for response\n        await bus.delay(100)\n        const ropayload = jdunpack(ro.data, packFormat)\n        log({ ropayload })\n        if (!jdpackEqual(packFormat, payload, ropayload))\n            throw new Error(`expected ro ${payload}, got ${ropayload}`)\n\n        // the event should have triggered once\n        log(`-- testing event`)\n        if (packFormat !== \"u8\" && evCount + 1 !== ev.count)\n            throw new Error(`expected 1 event, got ${ev.count - evCount}`)\n    }\n\n    const testCommand = async log => {\n        log(`-- testing cmd`)\n\n        const packFormat = specification.packFormat\n        const payload = randomPayload(packFormat, fields)\n        log({ payload })\n        const data = jdpack(packFormat, payload)\n        log({ data: toHex(data) })\n        // send over cmd packet\n        await rw.service.sendPacketAsync(Packet.from(rw.code, data))\n        // read packet\n        await rw.sendGetAsync()\n        // wait for response\n        await bus.delay(100)\n        // check read\n        log({ rwdata: toHex(rw.data) })\n        const rwpayload = jdunpack(rw.data, packFormat)\n        log({ rwpayload })\n        if (!jdpackEqual(packFormat, payload, rwpayload))\n            throw new Error(`expected rw ${payload}, got ${rwpayload}`)\n    }\n\n    const test = async log => {\n        log(`- testing no acks`)\n        rw.service.registersUseAcks = false\n        await testRwRo(log)\n        await testCommand(log)\n        log(`- testing acks`)\n        rw.service.registersUseAcks = true\n        await testRwRo(log)\n        await testCommand(log)\n    }\n\n    return (\n        <TestCard\n            title={name}\n            subheader={specification.packFormat || \"?\"}\n            onTest={test}\n        />\n    )\n}\n\nfunction ServiceProtocolTest(props: { service: JDService }) {\n    const { service } = props\n    const { device } = service\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n\n    const regs = service.registers()\n    const rws = service\n        .registers()\n        .filter(reg => reg.specification.kind == \"rw\")\n        .map(rw => {\n            const roname = rw.name.replace(/^rw_/, \"ro_\")\n            const ro = regs.find(\n                r =>\n                    r.specification.kind === \"ro\" &&\n                    r.specification.name === roname\n            )\n            const ev = service.event(rw.code)\n            return { rw, ro, ev }\n        })\n\n    const outPipeTest = async log => {\n        // fill bytes with data\n        const rw = service.register(ProtoTestReg.RwBytes)\n        const [data] = randomPayload<[Uint8Array]>(\"b\", rw.fields)\n        log(`data: ${toHex(data)}`)\n        // send over cmd packet\n        rw.service.registersUseAcks = true\n        await rw.sendSetAsync(data)\n        await rw.sendGetAsync()\n        // wait for response\n        await bus.delay(100)\n        log(`data recv: ${toHex(rw.data)}`)\n        if (!bufferEq(data, rw.data))\n            throw new Error(\n                `rw write failed, expected ${toHex(data)}, got ${toHex(\n                    rw.data\n                )}`\n            )\n        // read packet back\n        const recv = await service.receiveWithInPipe<[number]>(\n            ProtoTestCmd.CReportPipe,\n            \"u8\"\n        )\n        const recvu = new Uint8Array(recv.map(buf => buf[0]))\n        log(`received ${toHex(recvu)}`)\n        if (!bufferEq(data, recvu))\n            throw new Error(\n                `expected ${toHex(data)}, got ${toHex(recv.map(buf => buf[0]))}`\n            )\n    }\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={10}>\n                <Typography variant=\"h4\">\n                    <DeviceName device={device} />\n                </Typography>\n            </Grid>\n            <Grid item xs={2}>\n                <DeviceActions device={device} showReset={true} />\n            </Grid>\n            {rws?.map(rw => (\n                <Grid key={rw.rw.id} item xs={12} md={6}>\n                    <RegisterProtocolTest {...rw} />\n                </Grid>\n            ))}\n            <Grid key={\"cpipe\"} item xs={12} md={6}>\n                <TestCard\n                    title={\"out pipe\"}\n                    subheader={\"\"}\n                    onTest={outPipeTest}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default function ProtocolTest() {\n    const bus = useBus()\n    const labelId = useId()\n    const switchId = labelId + \"-switch\"\n    const [host, setHost] = useState(false)\n    const services = useServices({ serviceClass: SRV_PROTO_TEST })\n\n    const toggleHost = () => setHost(!host)\n\n    // add virtual device\n    useEffect(() => {\n        if (!host) return () => {}\n\n        const d = new JDServerServiceProvider(\"test\", [\n            new ProtocolTestServer(),\n        ])\n        bus.addServiceProvider(d)\n        return () => bus.removeServiceProvider(d)\n    }, [host])\n\n    return (\n        <>\n            <h1>Protocol Test</h1>\n            <p>\n                A helper page to test the Jacdac protocol against a &nbsp;\n                <Link to=\"/services/prototest/\">protocol test</Link> service.\n            </p>\n            <Grid container direction=\"row\" spacing={2}>\n                <Grid key=\"connect\" item xs={12}>\n                    <ConnectAlert serviceClass={SRV_PROTO_TEST} />\n                </Grid>\n                {services?.map(service => (\n                    <Grid key={service.nodeId} item xs={12}>\n                        <ServiceProtocolTest service={service} />\n                    </Grid>\n                ))}\n                <Grid item xs={12}>\n                    <Alert severity=\"info\">\n                        <AlertTitle>Developer zone</AlertTitle>\n                        <Switch\n                            id={switchId}\n                            checked={host}\n                            onChange={toggleHost}\n                        />\n                        <label id={labelId} htmlFor={switchId}>\n                            Add simulator\n                        </label>\n                    </Alert>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n","parent":{"name":"prototest","ext":".tsx"}},{"content":"import { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport ServiceSpecificationEditor from \"../../components/tools/ServiceSpecificationEditor\"\n\nexport const frontmatter = {\n    title: \"Service Specification Editor\",\n    description: \"Edit a service markdown specification and preview the output. Start a pull request with the service content.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = (props) => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    return (\n        <>\n            <h1>Service Specification Editor</h1>\n            <p>\n                Read the{\" \"}\n                <Link to=\"/reference/service-specification/\">\n                    service specification\n                </Link>{\" \"}\n                documentation. Use the packet console to monitor packets from\n                your devices.\n            </p>\n            <ServiceSpecificationEditor />\n        </>\n    )\n}\n","parent":{"name":"service-editor","ext":".tsx"}},{"content":"import React from \"react\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport { Grid } from \"@mui/material\"\nimport { SRV_SETTINGS } from \"../../../jacdac-ts/src/jdom/constants\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport SettingsCard from \"../../components/SettingsCard\"\nimport useServices from \"../../components/hooks/useServices\"\nimport useServiceProviderFromServiceClass from \"../../components/hooks/useServiceProviderFromServiceClass\"\nimport {\n    useLocationSearchParamBoolean,\n    useLocationSearchParamString,\n} from \"../../components/hooks/useLocationSearchParam\"\n\nexport const frontmatter = {\n    title: \"Device Settings\",\n    description: \"List and update settings on devices.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = (props) => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    // spin up provider on demand\n    useServiceProviderFromServiceClass(SRV_SETTINGS)\n    const services = useServices({ serviceClass: SRV_SETTINGS })\n    const keyPrefix = useLocationSearchParamString(\"prefix\")\n    const autoKey = useLocationSearchParamBoolean(\"autokey\", false)\n    const showSecrets = useLocationSearchParamBoolean(\"secrets\", true)\n\n    return (\n        <>\n            <h1>Device Settings</h1>\n            <p>\n                Configure <Link to=\"/services/settings/\">settings</Link>{\" \"}\n                services.\n            </p>\n            <ConnectAlert serviceClass={SRV_SETTINGS} />\n            <Grid container spacing={1}>\n                {services.map(service => (\n                    <Grid key={service.nodeId} item xs={12} lg={6}>\n                        <SettingsCard\n                            service={service}\n                            mutable={true}\n                            keyPrefix={keyPrefix}\n                            showSecrets={showSecrets}\n                            autoKey={autoKey}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n            <h2>Advanced</h2>\n            <p>\n                You can use various URL argument to modify the behavior of this\n                page.\n            </p>\n            <ul>\n                <li>\n                    <code>prefix=JD</code>, will prefix and filter keys with{\" \"}\n                    <code>JD</code>.\n                </li>\n                <li>\n                    <code>autokey</code>, will automatically generate random\n                    keys for entries. Default is false.\n                </li>\n                <li>\n                    <code>secrets=0</code>, disables secrets\n                </li>\n            </ul>\n        </>\n    )\n}\n","parent":{"name":"settings","ext":".tsx"}},{"content":"/* eslint-disable react/jsx-key */\n// tslint:disable-file: match-default-export-name no-submodule-imports\nimport React from \"react\"\nimport { Grid } from \"@mui/material\"\nimport { uniqueMap } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { serviceProviderDefinitions } from \"../../../jacdac-ts/src/servers/servers\"\nimport { hasServiceView } from \"../../components/dashboard/DashboardServiceWidget\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport { withPrefix } from \"gatsby-link\"\n\n// run scripts/collecticons.js to refresh\n\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\"\nimport CheckCircleOutlineIcon from \"@mui/icons-material/CheckCircleOutline\"\nimport GetAppIcon from \"@mui/icons-material/GetApp\"\nimport LaunchIcon from \"@mui/icons-material/Launch\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport ClearIcon from \"@mui/icons-material/Clear\"\nimport DevicesIcon from \"@mui/icons-material/Devices\"\nimport ExpandLessIcon from \"@mui/icons-material/ExpandLess\"\nimport RemoveIcon from \"@mui/icons-material/Remove\"\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\"\nimport RefreshIcon from \"@mui/icons-material/Refresh\"\nimport CloseIcon from \"@mui/icons-material/Close\"\nimport MicIcon from \"@mui/icons-material/Mic\"\nimport VoiceChatIcon from \"@mui/icons-material/VoiceChat\"\nimport HistoryIcon from \"@mui/icons-material/History\"\nimport MenuIcon from \"@mui/icons-material/Menu\"\nimport AccountTreeIcon from \"@mui/icons-material/AccountTree\"\nimport GitHubIcon from \"@mui/icons-material/GitHub\"\nimport UsbIcon from \"@mui/icons-material/Usb\"\nimport BluetoothIcon from \"@mui/icons-material/Bluetooth\"\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\"\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\"\nimport CreateIcon from \"@mui/icons-material/Create\"\nimport LockIcon from \"@mui/icons-material/Lock\"\nimport CallToActionIcon from \"@mui/icons-material/CallToAction\"\nimport FlashOnIcon from \"@mui/icons-material/FlashOn\"\nimport DataUsageIcon from \"@mui/icons-material/DataUsage\"\nimport ReplyIcon from \"@mui/icons-material/Reply\"\nimport DeviceUnknownIcon from \"@mui/icons-material/DeviceUnknown\"\nimport DeviceHubIcon from \"@mui/icons-material/DeviceHub\"\nimport BubbleChartIcon from \"@mui/icons-material/BubbleChart\"\nimport ComputerIcon from \"@mui/icons-material/Computer\"\nimport BlurLinearIcon from \"@mui/icons-material/BlurLinear\"\nimport ConfirmationNumberIcon from \"@mui/icons-material/ConfirmationNumber\"\nimport NotificationsNoneIcon from \"@mui/icons-material/NotificationsNone\"\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\"\nimport SettingsIcon from \"@mui/icons-material/Settings\"\nimport MoreIcon from \"@mui/icons-material/MoreVert\"\nimport WarningIcon from \"@mui/icons-material/Warning\"\nimport ErrorIcon from \"@mui/icons-material/Error\"\nimport MessageIcon from \"@mui/icons-material/Message\"\nimport NoteIcon from \"@mui/icons-material/Note\"\nimport DeleteIcon from \"@mui/icons-material/Delete\"\nimport SaveIcon from \"@mui/icons-material/Save\"\nimport ArrowLeftIcon from \"@mui/icons-material/ArrowLeft\"\nimport CodeIcon from \"@mui/icons-material/Code\"\nimport FilterListIcon from \"@mui/icons-material/FilterList\"\nimport QueryBuilderIcon from \"@mui/icons-material/QueryBuilder\"\nimport GroupWorkIcon from \"@mui/icons-material/GroupWork\"\nimport CategoryIcon from \"@mui/icons-material/Category\"\nimport ReplayIcon from \"@mui/icons-material/Replay\"\nimport PauseIcon from \"@mui/icons-material/Pause\"\nimport LiveTvIcon from \"@mui/icons-material/LiveTv\"\nimport CheckIcon from \"@mui/icons-material/Check\"\nimport FiberManualRecordIcon from \"@mui/icons-material/FiberManualRecord\"\nimport SearchIcon from \"@mui/icons-material/Search\"\nimport SpeedIcon from \"@mui/icons-material/Speed\"\nimport InfoIcon from \"@mui/icons-material/Info\"\nimport HourglassEmptyIcon from \"@mui/icons-material/HourglassEmpty\"\nimport PlayCircleFilledIcon from \"@mui/icons-material/PlayCircleFilled\"\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\"\nimport SettingsBrightnessIcon from \"@mui/icons-material/SettingsBrightness\"\nimport SystemUpdateAltIcon from \"@mui/icons-material/SystemUpdateAlt\"\nimport WifiIcon from \"@mui/icons-material/Wifi\"\nimport EditIcon from \"@mui/icons-material/Edit\"\nimport JacdacIcon from \"../../components/icons/JacdacIcon\"\nimport MakeCodeIcon from \"../../components/icons/MakeCodeIcon\"\nimport EdgeImpulseIcon from \"../../components/icons/EdgeImpulseIcon\"\nimport JupyterIcon from \"../../components/icons/JupyterIcon\"\nimport HumidityIcon from \"../../components/icons/HumidityIcon\"\nimport TemperatureIcon from \"../../components/icons/TemperatureIcon\"\nimport ForumIcon from \"@mui/icons-material/Forum\"\n\nfunction CustomIconGrid() {\n    const icons = [<JacdacIcon />, <HumidityIcon />, <TemperatureIcon />]\n    return (\n        <Grid container spacing={1}>\n            {icons.map((icon, i) => (\n                <Grid item key={i}>\n                    {icon}\n                </Grid>\n            ))}\n        </Grid>\n    )\n}\n\nfunction MaterialUIIconGrid() {\n    const icons = [\n        <ExpandMoreIcon />,\n        <CheckCircleOutlineIcon />,\n        <GetAppIcon />,\n        <LaunchIcon />,\n        <AddIcon />,\n        <ClearIcon />,\n        <DevicesIcon />,\n        <ExpandLessIcon />,\n        <RemoveIcon />,\n        <PlayArrowIcon />,\n        <RefreshIcon />,\n        <CloseIcon />,\n        <MicIcon />,\n        <VoiceChatIcon />,\n        <HistoryIcon />,\n        <MenuIcon />,\n        <AccountTreeIcon />,\n        <GitHubIcon />,\n        <UsbIcon />,\n        <BluetoothIcon />,\n        <ArrowDropDownIcon />,\n        <ArrowRightIcon />,\n        <CreateIcon />,\n        <LockIcon />,\n        <CallToActionIcon />,\n        <FlashOnIcon />,\n        <DataUsageIcon />,\n        <ReplyIcon />,\n        <DeviceUnknownIcon />,\n        <DeviceHubIcon />,\n        <BubbleChartIcon />,\n        <ComputerIcon />,\n        <BlurLinearIcon />,\n        <ConfirmationNumberIcon />,\n        <NotificationsNoneIcon />,\n        <CheckCircleIcon />,\n        <SettingsIcon />,\n        <MoreIcon />,\n        <WarningIcon />,\n        <ErrorIcon />,\n        <MessageIcon />,\n        <NoteIcon />,\n        <DeleteIcon />,\n        <SaveIcon />,\n        <ArrowLeftIcon />,\n        <CodeIcon />,\n        <FilterListIcon />,\n        <QueryBuilderIcon />,\n        <GroupWorkIcon />,\n        <CategoryIcon />,\n        <ReplayIcon />,\n        <PauseIcon />,\n        <LiveTvIcon />,\n        <CheckIcon />,\n        <FiberManualRecordIcon />,\n        <SearchIcon />,\n        <SpeedIcon />,\n        <InfoIcon />,\n        <HourglassEmptyIcon />,\n        <PlayCircleFilledIcon />,\n        <ChevronRightIcon />,\n        <SettingsBrightnessIcon />,\n        <SystemUpdateAltIcon />,\n        <WifiIcon />,\n        <EditIcon />,\n        <ForumIcon />,\n    ]\n    return (\n        <Grid container spacing={1}>\n            {icons.map((icon, i) => (\n                <Grid item key={i}>\n                    {icon}\n                </Grid>\n            ))}\n        </Grid>\n    )\n}\n\nexport default function ReleaseAssets() {\n    const services = uniqueMap(\n        serviceProviderDefinitions().filter(\n            hd =>\n                hd.serviceClasses.length === 1 &&\n                hasServiceView(hd.serviceClasses[0])\n        ),\n        hd => hd.serviceClasses[0].toString(),\n        h => serviceSpecificationFromClassIdentifier(h.serviceClasses[0])\n    )\n    return (\n        <>\n            <h1>Release Assets</h1>\n            <h2>Icons</h2>\n            <h3>Custom</h3>\n            <CustomIconGrid />\n            <h3>Material UI</h3>\n            <MaterialUIIconGrid />\n            <h3>Service Simulators</h3>\n            <p>These services has a custom simulator.</p>\n            <ul>\n                {services.map((srv, i) => (\n                    <li key={i}>\n                        <a\n                            href={withPrefix(\n                                `/services/${srv.shortId}/playground`\n                            )}\n                            target=\"review\"\n                        >\n                            {srv.name}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n}\n","parent":{"name":"release-assets","ext":".tsx"}},{"content":"import {\n    resolveTestRules,\n    resolveServiceCommandTest,\n} from \"../../../jacdac-ts/src/testdom/testrules\"\nimport React from \"react\"\nimport {\n    isInfrastructure,\n    serviceSpecifications,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport { serviceProviderDefinitionFromServiceClass } from \"../../../jacdac-ts/src/servers/servers\"\nimport useDeviceCatalog from \"../../components/devices/useDeviceCatalog\"\nimport useChange from \"../../jacdac/useChange\"\nimport { resolveMakecodeServiceFromClassIdentifier } from \"../../components/makecode/services\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport CheckIcon from \"@mui/icons-material/Check\"\nimport ClearIcon from \"@mui/icons-material/Clear\"\nimport { Chip } from \"@mui/material\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\nconst statuses: Record<jdspec.StabilityStatus, string> = {\n    stable: \"Stable\",\n    rc: \"Release Candidate\",\n    experimental: \"Experimental\",\n    deprecated: \"Deprecated\",\n}\n\nfunction ServiceStatus(props: {\n    service: jdspec.ServiceSpec\n    makecodeExtensions: string[]\n}) {\n    const { service, makecodeExtensions } = props\n    const { shortId, name, classIdentifier } = service\n    const catalog = useDeviceCatalog()\n    const devices = useChange(catalog, _ =>\n        _.specificationsForService(classIdentifier, { includeDeprecated: true })\n    )\n    const serviceProvider =\n        serviceProviderDefinitionFromServiceClass(classIdentifier)\n    const testRule = resolveTestRules(classIdentifier)\n    const testCommand = resolveServiceCommandTest(classIdentifier)\n    const customTest = !!testRule?.length || testCommand\n    const makecode = resolveMakecodeServiceFromClassIdentifier(classIdentifier)\n    const makecodeExtension =\n        makecode && makecodeExtensions.indexOf(shortId.toLowerCase()) > -1\n\n    const available = (value: unknown, allowMissing = false) =>\n        typeof value === \"number\" && value ? (\n            <Chip icon={<CheckIcon color=\"success\" />} label={value} />\n        ) : value ? (\n            <CheckIcon color=\"success\" />\n        ) : allowMissing ? null : (\n            <ClearIcon color=\"warning\" />\n        )\n\n    return (\n        <tr>\n            <td>\n                <Link to={`/services/${shortId}/`}>{name}</Link>\n            </td>\n            <td>{available(devices?.length)}</td>\n            <td>{available(serviceProvider)}</td>\n            <td>{available(customTest, true)}</td>\n            <td>\n                {makecode\n                    ? makecode.client.generated\n                        ? \"generated\"\n                        : \"custom\"\n                    : \"\"}\n            </td>\n            <td>{available(makecodeExtension)}</td>\n        </tr>\n    )\n}\n\nfunction ServiceStatusSection(props: {\n    status: jdspec.StabilityStatus\n    services: jdspec.ServiceSpec[]\n    makecodeExtensions: string[]\n}) {\n    const { status, services, makecodeExtensions } = props\n    return (\n        <>\n            <h2>{statuses[status]}</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>name</th>\n                        <th>devices</th>\n                        <th>simulator</th>\n                        <th>custom tests</th>\n                        <th>MakeCode Extension</th>\n                        <th>MakeCode Docs</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {services?.map(service => (\n                        <ServiceStatus\n                            key={service.shortId}\n                            service={service}\n                            makecodeExtensions={makecodeExtensions}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nexport const frontmatter = {\n    title: \"Service Status\",\n    description: \"Implementation status of services in clients, tests, firmware.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = (props) => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    const query = useStaticQuery<{\n        allMdx: {\n            edges: {\n                node: {\n                    fields: {\n                        slug: string\n                    }\n                    frontmatter: {\n                        title?: string\n                    }\n                }\n            }[]\n        }\n    }>(graphql`\n        {\n            allMdx(\n                filter: {\n                    fields: { slug: { glob: \"/clients/makecode/extensions/*\" } }\n                }\n            ) {\n                edges {\n                    node {\n                        id\n                        fields {\n                            slug\n                        }\n                        frontmatter {\n                            title\n                        }\n                    }\n                }\n            }\n        }\n    `)\n    const makecodeExtensions = query.allMdx.edges\n        .map(edge => edge.node)\n        .sort((l, r) => l.fields.slug.localeCompare(r.fields.slug))\n        .map(({ fields }) =>\n            fields.slug.slice(\"/clients/makecode/extensions/\".length, -1)\n        )\n        .map(p => p.toLowerCase())\n\n    const services = serviceSpecifications().filter(\n        srv => !isInfrastructure(srv)\n    )\n\n    return (\n        <>\n            <h1>Service Implementation Status</h1>\n            {Object.keys(statuses).map((status: jdspec.StabilityStatus) => (\n                <ServiceStatusSection\n                    key={status}\n                    status={status}\n                    services={services.filter(srv => srv.status === status)}\n                    makecodeExtensions={makecodeExtensions}\n                />\n            ))}\n        </>\n    )\n}\n","parent":{"name":"service-status","ext":".tsx"}},{"content":"import React from \"react\"\nimport { splitFilter } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport GithubRepositoryList from \"../../../components/github/GithubRespositoryList\"\n\nexport default function Samples() {\n    const repos = [\n        // merged extensions\n        \"1010Technologies/pxt-makerbit-motor/jacdac\",\n        \"1010Technologies/pxt-makerbit-touch/jacdac\",\n        \"1010Technologies/pxt-makerbit-lcd1602/jacdac\",\n        \"monkmakes/monkmakes-7-segment/jacdac\",\n        \"mworkfun/pxt-k-bit/jacdac\",\n\n        // PR in progress\n        \"pelikhan/pxt-kitronik-stopbit/jacdac\",\n        \"pelikhan/pxt-kitronik-viewtext32/jacdac\",\n        \"pelikhan/pxt-kitronik-lampbit/jacdac\",\n        \"pelikhan/pxt-kitronik-simple-servo/jacdac\",\n        \"pelikhan/pxt-kitronik-motor-driver/jacdac\",\n        \"pelikhan/pxt-kitronik-zip-64/jacdac\",\n        \"pelikhan/pxt-kitronik-accessbit/jacdac\",\n        \"pelikhan/pxt-kitronik-servo-lite/jacdac\",\n        \"pelikhan/pxt-kitronik-i2c-16-servo/jacdac\",\n        \"pelikhan/pxt-gamer-bit/jacdac\",\n        \"pelikhan/pxt-envirobit/jacdac\",\n        \"pelikhan/pxt-weather-bit/jacdac\",\n        \"pelikhan/pxt-robotbit/jacdac\",\n        \"pelikhan/Tiny-bitLib/jacdac\",\n\n        // needs PR\n        \"pelikhan/pxt-kitronik-air-quality/jacdac\",\n        \"pelikhan/kitronik-zip-halo-jacdac\",\n        \"pelikhan/yahboom-microbit-led-jacdac/\",\n        \"pelikhan/keystudio-relay-breakout-jacdac/\",\n        \"pelikhan/pxt-dfrobot_maqueenplus_v20/jacdac\",\n    ]\n\n    const [official, samples] = splitFilter(repos, r => !/^pelikhan\\//.test(r))\n\n    return (\n        <>\n            <h1>MakeCode/Jacdac accessory extension samples</h1>\n            <p>\n                This page links to a number of accessory extension repositories\n                with the software-only Jacdac layer implemented.\n            </p>\n            <p>\n                These samples can be tested from MakeCode by importing the\n                repository path into the <code>Add Extension</code> dialog.\n            </p>\n            <h2>Extensions</h2>\n            <GithubRepositoryList\n                repos={official}\n                showDescription={true}\n                showDependencies={true}\n                showMakeCodeButton={true}\n                showMakeCodeImportButton={true}\n            />\n            <h2>Samples</h2>\n            <GithubRepositoryList\n                repos={samples}\n                showDescription={true}\n                showDependencies={true}\n                showMakeCodeButton={true}\n                showMakeCodeImportButton={true}\n            />\n        </>\n    )\n}\n","parent":{"name":"extension-samples","ext":".tsx"}},{"content":"import { Button, Grid, Typography } from \"@mui/material\"\nimport { JSONTryParse } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport React, { useState } from \"react\"\nimport {\n    CommandOptions,\n    useCommandPalette,\n} from \"../../../components/commands/CommandPaletteContext\"\nimport HighlightTextField from \"../../../components/ui/HighlightTextField\"\nimport Markdown from \"../../../components/ui/Markdown\"\n\nfunction CommandHelp(props: { command: CommandOptions }) {\n    const { command } = props\n    const { id, description, help } = command\n    const md = help?.()\n    return (\n        <>\n            <h3>\n                <code>{id}</code>\n            </h3>\n            <Typography variant=\"body1\">{description}</Typography>\n            {!!md && <Markdown source={md} />}\n        </>\n    )\n}\n\nfunction CommandTester() {\n    const [source, setSource] = useState(`{\n    \"type\": \"jacdac-command\",\n    \"command\": \"simulator.start\",\n    \"args\": {\n        \"name\": \"button\"\n    }\n}`)\n    const json = JSONTryParse(source)\n\n    const handleClick = () => {\n        window.postMessage(json)\n    }\n\n    return (\n        <Grid spacing={1} container direction=\"row\">\n            <Grid item xs={12}>\n                <HighlightTextField\n                    code={source}\n                    language=\"json\"\n                    onChange={setSource}\n                />\n            </Grid>\n            <Grid item>\n                <Button\n                    variant=\"contained\"\n                    onClick={handleClick}\n                    disabled={!json}\n                >\n                    Post Message\n                </Button>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default function Page() {\n    const { commands } = useCommandPalette()\n    return (\n        <>\n            <h1>Command helper</h1>\n            <p>\n                The Jacdac interface can be driven using the following commands\n                through Window <code>postMessage</code>.\n            </p>\n            <p>The message structure is as follow.</p>\n            <pre>\n                <code>\n                    {`interface Command {\n    type: \"jacdac-command\"\n    // message id\n    id?: string\n    // command id\n    command: unknown\n    // optional command arguments\n    args?: unknown\n}`}\n                </code>\n            </pre>\n            <p>\n                Note that if the message has an `id` (unique identifier for the\n                message), Jacdac will respond a message with the result.\n            </p>\n            <pre>\n                <code>\n                    {`interface CommandResponse extends Command {\n    result: \"success\" : \"error\"\n    error?: unknown\n}`}\n                </code>\n            </pre>\n            <h2>Commands</h2>\n            {commands?.map(command => (\n                <CommandHelp key={command.id} command={command} />\n            ))}\n            <h2>Command Tester</h2>\n            <p>\n                Test commands by posting a message to the current window. Open\n                the JavaScript console for debugging messages.\n            </p>\n            <CommandTester />\n        </>\n    )\n}\n","parent":{"name":"commands","ext":".tsx"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-04T14:19:38.461Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"t0BzEcxsZP97vcOpMLjh\" version=\"12.9.13\" type=\"device\"><diagram id=\"-LvSKuETzAvI5EUrZ2tX\" name=\"Page-1\">7Z1bb6M4FIB/TaTdh1aYO4+97j7MrEbT7uy8rSi4CVoSR47btP31a4hJACcT2uL4JKYjjcDhEs53bDgftIycq+nLHzSeT76SFOcj20pfRs71yLZ9x+b/Fw2vqwY3FA1jmqWrJrRpuMve8KqxWuopS/GisRwjJGfZvNmYkNkMJ6zRFlNKls3FHkne3Ok8HmOp4S6Jc7n1nyxlk1VraAeb9j9xNp5Ue0Z+tPpkGlcLW6uGxSROybLW5NyMnCtKCFtNTV+ucF6ErgrLar3bHZ+uvxjFM9ZlBXp970f3tz/o0rmYTP9F1z/D5zPbXW3mOc6fxBFfxywW35i9VmHgX35eTPLdsSzOv/NQx7Nx8enlcpIxfDePk+LzJc8B3jZh05zPIT75QBgjUz5j8RkqIlV8kOPHapKRuZh6zPL8iuSElrt1Lst/xYrkiWWz8RU/Vkx/8g/PrHOPt6+DWmx9wSj5D9dWt8qfcnUWs4zMxIITQrM3MmNxLhrSjPIjWi2wxAtWNMWLCU7F1xJBwpThl53hR2uovC9gMsWMvvJFxAouEnkg+gHyxfxyk1aBaJrUM6rKn1hk8ni96Q1sPiF4v4O9I6FXgR3tw27J2G/LH7XY0XbsPZAO94O2Dwpa7uN39xff73nTt7+/3N1A6eyph8PU1dLZH/nn4tQT9ZMEyNqfBeigWeAN3V1Jd0cdBnb3oKTDgbQS0muMYPp0tbcBdd+o/S6oD8vaHlgrYe0E0Abw6hiGqkx1VYa8/eyjw7KXu/nNX9fQrtUfwwQnyYlcq9sdkuCw53Vbrs2Hkq2ZBgXxLInzizwbF83TLE3L4+0/P5xOFwMHzY93FHMJJYvFQ0z3pwKHOEvXo+tuWrtPB2uKZ5HVU99shn4d53rot9kUdTKlQ+jHPJLznQcvVHX8UC1uvTcoLcNkB9G5J4Ul3JaRVrVg/zaxQymCZ+lF4eT53IzMcDP7av0Wbc7uOJX8/CZKvwAkx64WGm9LaKo2inOexM/NnW6LltjDN5Lxr1OrERto3Ha8F+SJJlisZNdsfXs7znlU/wkam+UYrdqP54fNvbCYjjGT9lKCXYfkE6w7lCLvYs0XFrN+OfLws1ht/jgzwYnOo2YyBB9NhmJTDthk6HAf4ZQ7/obCx+C2BnNpO6rxyXcHTMQnnxn38jsUIN9sQNUYaLdPrI1BL/jgyIogn2Y7iHwDyCNfBXnktcjboNBHA/ri3KiCfAAZvDuUUVsuij5wdm5t6FD4ZHNvIj6/pyrYh1wFu31XwcfJujV+9jVIQ74wcw0veQUjT8mFmde+MANF3vBquXqYVcmFmdu+MgNFPthPXrX3R60bUSDEvwumSg10dgkjxL/bd1mqSPxrzQRTxL8HplTVg/vIxb8HplTVig+u+PfA1Jd6h1Ml9SVo8e+BqS+1kjdR/HtgCkyt6M0T/16H58pMAH+k4t8Dc5deKz4jxL/XQQUZwNpA8e8NrqvcjHni3wPzQIZW8gaKf7+D5lIt/tu/eQxC/PtQBJJvbQ/eIP776wR2z6zViH+9mWCK+Peh6ClNuI9c/Fc1muH44Ip/H4oK0jycKqkvQYt/H4pF0kveRPHvQ5FKetGbJ/59KE5JM/gjFf8+FDGkF58R4r/6Q1GGszZQ/AeD6yo3Y574r5LdcPIGiv+gg+ZSLf6d9t8/giD+AygCaUVoEP8qO0HfLkqN+NebCaaI/wCKntKE+8jFfwBFMenFB1f8B1BUkObhVEl9CVr8B1Askl7yJor/EIpU0ovePPEfQnFKmsEfqfiv3mNnOD4jxH8I5YknvawNFP/h4LrKzZgn/kMoT2HpJW+g+A87aC7V4t9tvT8QhPgPoQikFaFB/KvsBH27KDXiX28mmCL+Qyh6ShPuIxf/ERTFpBcfXPEfQVFBmodTJfUlaPEf2QP5kZniP4IilfSiN0/8V5eMpoM/UvEfQRFDevEZIf4jKE886WVtoPiPBtdVbsY88R9BeQpLL3kDxX8kay4koWf4hTV5x+IV1En59uvRL95NTfEiexN3BYoXJM+LIymPzbscedfFtp4YWYjc2ZlKn3qjstc8b6MqXepvVA7lrELh7gT61E0FZMl2yjr1qNuB9qjLyun0ol792l4V9erOnr6oy7qnzH8/L+L8QPnUmK2P/YRIINfdi8LZcjJTiELWL7Z1el2ADz3QAi/Xz84JBt6xwGW8XMy6pxj4EFzg5VrSO8HAuz60wCP50vI+m2Le8ts0SyhZ4ITM0sXvelH0McqjZrW2HlDrVzrVcyv12NuWstjLF5hfyDhLeFOOn3GuN+aUMF4ck2Ijxe3xfiBEzfRHMgN/y9XmBxDwWUoIq1e/NJ5PvpIUF0v8Dw==</diagram></mxfile>","parent":{"name":"jacdac-activity","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-05T12:24:38.883Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"BygZWyy6CGFYbeDQvKey\" version=\"12.9.13\" type=\"device\"><diagram id=\"-LvSKuETzAvI5EUrZ2tX\" name=\"Page-1\">7Z1dc6O4EoZ/jat2LyYFAgRcxvk4ezG7NTXJnrN3p4hRbGqwSWHyMfPrV9jggKTYGEuoY5GpmrIVLMf9tKTuF1k9ca6Wb//Jo6fFn1lM0gmy4reJcz1ByHUR/b9s+LltcJxg2zDPk3jbZL833CW/yLaxetn8OYnJunVdkWVpkTy1G2fZakVmRastyvPstX3ZY5a23/QpmhOu4W4WpXzr/5K4WGxbA+S/t/9Bkvmifmcbh9vfLKP6YmvbsF5EcfbaaHJuJs5VnmXF9tHy7Yqkpelqs2xfd/vBb3d/WE5WRZcXXFmPN8kfP6+/rtD3p9f53yjJki9BBeMlSp+rT1z9tcXP2gT0D38qHxaUL/mVlf1Nn0ieLElB8mb7t/fG6esiKcjdUzQrX/lKr6Bti2KZ0mc2fZhGDySdRrMf8zx7XsVXWZqVXa2yFb1+ui7y7AdhGh+zVVE3TagbbX5oe54VUZFkK9r8xQ6s8sokTRtXTjf/ym63zmVd2D72LUwhOlaIHOwG9JeVHUhekLcPLWzvuFF3Jxn9sPlPekn9gtp4latXtn199xsb423boukzXnVhVPnqfNfzO076oCIqpptf3+Pw/va/+atzuVj+377+J3j54nSHSz9lkUTpdzqGotW8/O0hhA9ZUWTL6klefZwNW/JYPyyyp9LgPJPbzc+G3nORrOZX1MQk/6dkaF14Jat6tFicP9CXW5ufNvzy6SLLk1/UT6L6j4yTnH6i7QWvZF3sQHNUBew/BB1YLc42tjjSyBWArqcC6aBdDvTd/eX3e9r07e+vdzcqqFuHqNs89dgjQeyqpW6JqZezR7W4hHKcwLbcg15gW0N6gTcOdyXD3bYZ0l544XGsHTQk6yPW7ZH1EawRPjyqgyFB7z7CO+nrqIigTOm74Gr4KT2O1gsSV3+WjGHu4g7D3LaHxY84/Dd/XUNb2B+DGZnNzmRhR347jNe/sKMjVvZZnq3XD1GHHGyTee0G0MdQPh7x74lXaEmyfTuy3tm5aXoksL26yLqD6csc9qn7h9+JFdFD3YO11yhMuoF80bwUiDzSqi+Un1pah+1CVvFlKcFMdjl8w/sa49YWT+B7eZC4pdvwtmuYxhOYpm7LSUqd+KWt9oisVb3Dtyyhf9+7v7ajBZe19zp7zmekelFTnGH7cS7C5o/f6pZitBo/HmYEgyLK56Tg3mUDdmeSE1jza9BprOnF1VO8mXnoYtV4/jk9wQkvwrYz+H2doezKAesMHUSlcx747xT6wWUmc64f1fh4qchEfPzKeJDfUICw2YDqObAdg7vMpOf3nFltyMtsB03HAPI2VkHe9hjyCBT6cEQ/2Qlrcsn7kMG7YxolCIp6rM5MR0Ph48VZE/ExmnnvLBhDzoLrjSyGs2bmT1mTNOTAzDU85a0YeUoCM48NzECRNzxbrjfxKQnMXDYyA0XeP0xete6/u/EESfh3dWWpPqghYYTw78pOS+UI/7A8wRTh39OVqgLB/cmFf09XqgoLH1zh39OVXwIBZK7w7+nKL2GRN1H493QlmLDQmyf8ex32lZkA/pMK/56uu/Sw8Bkh/HsdpCADWBso/Huj1rXpxjzh39O1IQMWeQOFf9xB5lIt/CO3HRaBEP6xJgGpBgJkSBgh/GMkmbUU4R+YJ5gi/GNN8hQU3J9c+K9zNMPxwRX+sSYpCAogc4V/rElFAkbeROEfaxKVgKE3T/jHmjQlaOA/qfCPNQlDwPAZIfz7mnY8AWNtoPDvj1rXphvzhP/a2Q0nb6Dw73eQuVQL/w57/hEE4d/XJCDVQIAMCSOEf1+2FiVF+AfmCaYI/74meQoK7k8u/PuaJCZg+OAK/74mKQgKIHOFf1+TigSMvInCf6BJVAKG3jzhP9CkKUED/0mF/wCN+CaGCP+Bph1PwFgbKPwHo9a16cY84T/QtAsLGHkDhf+QT8ZsDn1B3oo27yhN5mXtg9mm1gVtKOX/ZBall9Uvlkkcbypv5GSd/KpuAZR1Ep7KT7L5bN504l2XfT0XWVWdrpsrHV1YwWuv23btLs3CCqLCJqpK09kWnwdZ52515Gu3Op+EnJ/V67v3tdUDrNvqfO6w8X+clnZ+yOmjebH77GdEwnbdgygcwWKmEAUf2iPr/IYAqksGwTE8H185Z2h4xwLn8fxdPPccDR/oM7ywtHIHuc/UCo0nVVlGtRK3C2WFZfosVWX6hLD5BX4swNuhTt9JjuCEjJQ8ZJ0+oRfwscV9siS05bdlUtblI7NsFa9/1zv3SrC87bdVgt1C3irT5/KmV2Z5Xrb7ms2TGW1KyQtJ9Vr8g0KJp82CYXu1ExRKxIIZUBkAHRUqA/TgYLx3lmtNUzI832rH1Xa9eWF/eWBlZu+wQ+tUs7OlXh8J3pR65XDEfvhgyXJvfNjOeEA7d9ivId298SwgD48C945I8DhT497MjgyR2Qf1b5tXCZU7eF3LmAPyEHiuJ8vBa90fyERiH5GuSDI0selE7YsMHWLfibAkQweHDb3LkYcxNZ8sXOoNUMrYvLWuTrfrahtMdctLApOwHbzsZp3mLCMI3NUR4QN3AFpscym4Cm6mtwqJ7HIiMEj4iP4aFJJrP5xafJZcIUmjB5JOo9mP+WYKlA8MeQEwYHwGwMseOoFN69VbEzDsAwPG5w63oICVUcDlh8uQcmAOOgxMdBtRHbAO3+eQrCta77qitU9Rnm7+adEV42i92EWYMlZCl02BBNqWkHso4xuYYvIdvigy3kvoBZvZ7sSzFpCud8fJ53yEzKD6zkEnnqffB2CTb6/8t9dTmFVi+yPJHdh9j7w7CERtZe6ABsjJ99j5wylevprNph/1LvPmnkdBiq7q1q3Dr7QgdwSeZnPme3eidU7RLimx0flFDuQuBalGH3Brmtjo/IpzjkZn9KZ6P54uq3epoTnGc31IMxVTNS/gXepnnls890F09lGcJwW6Cwl6lzqZ4+DuxflgsjYo52E2+Jk+uNkvIWqGjsbBrWZw+6BS7y4lOcfBfTL0AFS41qUY5zi4e3GGFaEdsVlxHNz9ocMK147YKjkO7mM4hwcjNNF9bWWguxywf26jG9JNFGQf9Ichx32XA/vHcd+LM6iIvcth/ec27Idf1BECFbF3Oad/HNy9OIOK2Lucyj8O7tOhg4rYuxzIPw7uPpzZE3c1cx5GdjF9cDuwwrVhNBgDB7cLKkJDao7SZE7L62Sgoc60Zg+4ZfaDdz/GOtx3aF6IL5qH5lkMQHln5omxyj4ns0udEMjQmW/j1MdMHQ0d7z0pUTN0NfVAAGN1Way4J1amo9BTVwtEjE5NLRDA6JhNQXQa3jt0ug/QvQdXax6gagqKAKbMbNiXRnn/UcWaKaspHgKZcnlkuCLQtOugAToABNpVUzECMOiAm7R7Yg0Az9Ku7NgZPFZf0SztA56lXTXnyQOmzFV2kUUZcB7sGhdXM/tx5VHeWxZEL2XPOMoBl/j2LfTDdhUOjM60lAiVA9Jm6PUMowR9aR6IslOfzy07IiugfBo0mEMT+6qQB/rV6wO1vm7QiHYFI1rKqivoWjNc41Le0t5q4Aq61gwXGQcXCe0tHfTet9EM3bQbwGXRNGkBGN+XZpqmaVfIVjY/C7rWDNc0yaosPagKLt+1Zrim3bxHNlI3crmuNcM1TaBC6EDm21uvOtDzwPKVbxxYV6J8xfeld5gGxkkXjrroie9aM1zTpAvkDJLdHngbzdCHOZO5uY3dmnQ7k1njNnbZZzJzVck1f8XcN20HFnLVSdB813qHtC/7juEnv8fkKrrHtL9fzdM6Mm2AY3c/5b4h+P5+NVM2Tpr21IXjfNea4RqnVGN1YibftWa4xinVnjoxk+9aM1zjlGoc8HD7C5h8bwOLlsi00cl9va/3PKt1r2TIy5N1/dVzqgbAfRuh8s6mmuDyvqKsGkDIC4dnWISBPS5Mv9n5HM85Q7PXUxwYs/NJ132yJLTlt2VSVjEis2wVr38HQyKQNO2wFc3risvNWmOCGke2KhEz5BOkr9k8mdGmlLyQVC8ArsqUAiJ2+zsmmAciihnUAeHDJuvtEkBpaNkLcH3OdmV3xM9IzpDVeEI+3zhLuyMrhGX3I+6dKS857/iWdXUlycGZE5FrC+qq9BvydzSu9Hu3yPg9Kv02CUush84g1EzQ7yCJjEfknTxBuu2FSdnRafRpnmVFM3unUBZ/ZjEpr/gX</diagram></mxfile>","parent":{"name":"jacdac-proto-timings","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-14T11:30:57.032Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"ZCs2OvjD7ipumh7gICt4\" version=\"12.9.13\" type=\"device\"><diagram id=\"-LvSKuETzAvI5EUrZ2tX\" name=\"Page-1\">7Z1dc5s4FEB/jWd2H5JBfPOYxk33od1pN9m2bzsEFJsptjxCidP++pUwcgDZNU3BurZwZjIgsDD3XAnpQOKJc714fkfj1fwDSXE+sa30eeJMJ7bt2QH/LQq+bwpcy94UzGiWborQS8Ft9gNvCuVej1mKi8Z+jJCcZatmYUKWS5ywRllMKVk3d3sgefOgq3iGlYLbJM7V0i9Zyuab0lCelSj/C2ezuTwy8qPNlkUsd7Y2BcU8Tsm6VuS8nTjXlBC2WVo8X+NchE6GZfO+mz1btx+M4iXr8gY6vfOju5vPdO1czRf/oenX8OnCdjfVPMX5Y3XG05jF1Sdm32UY+IdfiUV+OJbF+T881PFyJra+Wc8zhm9XcSK2r3kO8LI5W+R8DfHFe8IYWfAVi6/QKlJiQ44f5CIjq2rpIcvza5ITWh7WeVP+iDeSR5YtZ9f8XDH9yjdeWJceL98GVdReMEq+4drbrfJVvp3FLCPLasc5odkPsmRxXhWkGeVntNlhjQsmiuJijtPqY6mxrsL/hCnDz7WiKvbvMFlgRr/zXaqtLqryoGoHyK/W1y9pFVRF83pGyfyJq0yebat+gc0XKt6/wN5R0A+BHR3CbqnYb8rXsNjRbuw9kA4Pg7aPClpt47d3V//c8aKP/76/fQulsaceDlNXS2N/4NurS0/UTxIg63AWoKNmgTc290GaO+rQsbtHJR2OpAchvcUIpk3Lo42o+0btd0F9XNb2yHoQ1k4ArQPfnsM4Kxt4Voa8w+yj47JXm/nbv6fQxuoPYYKT5EzG6naHJDjudd1W5+bjlK2ZBgJvlsT5VZ7NRPEiS9PyfPvPD6fTYOCo+fELk7mEkqK4j+nhVOAQl+m2d91Pa//lYEvxIrJ6apvN0G/jXA/9LpsynEzpEPoZj+Sq+8lv7XV8L2uwfhqUlmGyg+jSU8IS7spIS+7Yv03sMBXBy/RKOHm+tiRL3My+WrtFu6/uP+WB04bIV2NXC423IzSyjOKcJ/FTU//vilZ1hI8k45+vNkdsoHHb8S7II01w9Sa7Zuvb9TiXUf0VNKrlGK3ay/PD5lFYTGeYKUcpwW5D8husO0xFfok137la9cueh1/FauunmQlOdBk1kyF4bTKIqhywydDhPsI5N/wXCq+D2+rMlXqGxqfeHTARn3plPMjvWIB8swHJPtBuX1gbnV7wyp4VQb7MdhD5BpBH/hDkkdcib4NCH43oxbVxCPIBZPDuOI3aMSh6xdW5VdGx8Knm3kR8fk+zYB/yLNjtexZ8mqxb/WdfnTTkgZlr+JRXPts7yMDMaw/MQJE3fLYsH2YdZGDmtkdmoMgHh8kP7f1R60YUCPHv6pqlBqCahBHi3+17WtqP+IeVCaaIf0/XVBUI7hMX/56uqSosfHDFv6drfgkEkLni39M1v4RF3kTx7+maYMJCb5749zo8V2YC+BMV/56uu/Sw8Bkh/r0OKsgA1gaKf290XWU15ol/T9cDGbDIGyj+/Q6aa2jx3/7LYxDi39ckkCQQIE3CCPHv2z2z7kX8A8sEU8S/r0lPQcF94uJfztEMxwdX/PuaVBAUQOaKf1+TRQJG3kTx72uSSsDQmyf+fU1OCRr4ExX/viYxBAyfEeJf/qMow1kbKP6D0XWV1Zgn/mWyG07eQPEfdNBcQ4t/p/3/jyCI/0CTQJJAgDQJI8R/0LeL6kX8A8sEU8R/oElPQcF94uI/0KSYgOGDK/4DTSoICiBzxX+gySIBI2+i+A81SSVg6M0T/6EmpwQN/ImK/9Ae8U0MEf+hpieegLE2UPyHo+sqqzFP/IeansICRt5A8R920FxDi3+39f2BIMR/qEkgSSBAmoQR4j/s20X1Iv6BZYIp4j/UpKeg4D5x8R9pUkzA8MEV/5EmFQQFkLniP7JH8hMzxX+kSSoBQ2+e+JdDRtPBn6j4jzSJIWD4jBD/kaYnnoCxNlD8R6PrKqsxT/xHmp7CAkbeQPEfqZoLKegZfmZN3nH1FdRJ+e3Xk598NzXFRfajugUgviB5Jc6kPDfvzcSbiroeGSmq3OmUSvvuOOy9s+A1r9tIpkv9G5VDNatQuD+BfuumArJUO2Wde9TtQHvUVeV0flGXf7Ynoy67WH1RV3VPmf9+LuJ8T/nSjG3P/YxIINc9iMLZcTEbEIWqX2zr/JoA73qgBV6dPztnGHjHApfx6mTWPcfAh+ACr84lvTMMvOtDCzxSh5Z32QLzkj8WWUJJgROyTIs/9aLoo5dHzdnatkOtj3Tkcyv12NvWYLFXB5jvySxLeFGOn3CuN+aUMD45JqIScXu8HwhRM/2RysDfMdrsA0H+fvoQfY0/ff60+nJze48+Pluriw43lYt5vBKLoi0U97GI8XqeMXy7ihNRvqbxqsmEksdlitNqrWCUfMPXJCe0rNC5uRET9208dzwIp4R4/5jRa90hcNWARrv6E3eggKqD99MKqIsOBzToJ6B8lRLC6n6Gn/n8A0mx2ON/</diagram></mxfile>","parent":{"name":"jacdac-activity-highlight","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-09-03T11:08:54.202Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"OLU_kA0hMEPwsn4xHzou\" version=\"12.9.13\" type=\"device\"><diagram id=\"HprpYEN0h96NzXgQkXMR\" name=\"Page-1\">5Vpdb9sgFP01fuwUfyZ9bOy0a7dp3TJp614qYlMbzTERxkmcXz+wIbGNq7ZrIqPMLzEXuMA5cA+YGLa/3N4QsEq+4AimhjWKtoYdGJZlmiOP/XBLWVsmjlMbYoIiUehgmKMdFMaRsBYognmrIMU4pWjVNoY4y2BIWzZACN60iz3htN3qCsRQMcxDkKrWnyiiiRiFNT7YP0IUJ7Jl07usc5ZAFhYjyRMQ4U3DZM8M2ycY0/ptufVhysGTuNT1rp/J3XeMwIy+pgL2Lx9nj19X61vwMPbvrr75we2F8LIGaSEGfJ+UOWLjF52mpUSC4CKLIHc2MuzpJkEUzlcg5Lkbxj2zJXSZspTJXtXOyZYgoXDbMInO3kC8hJSUrIjIdQRuYuKYnkhvDjSYEtukQYGsBwTz8d7zARz2IvB5A1a2gpWPM0qwflBZQ0PlKFDNIVkjhsC7oIpAnlRleeIJpamPU0wqR/Z19TB7zij5Axs5o+rhNRhdDXv9nISBydAEeAoBCvIwi654gGSpMAU5W/QVeIBQ1dzggGFEyl+crw+uTD4084KtILNOlSL1LMisxRjSl2MUjFqRWqWiAbbbg7W0EZgCitbt+N5HgGjhHiPW4z3T5qhN9Z5r6SLHBQmhqNWMx11H7guOamAUR9V82A/736fI+E1TJMMZfGXc0oQo50g8eS85OjFPE30l2hrpptFy26ihSCtgDa7Sprr7O3OZ7nIwuE6b1hkJ9USr+G95RxIA2xxWAEz14KGNAtiedgrgaqsACljDK4B6TjhzBehyMLwCvG0frrcCyFCliQQ41pEkwBkPLAEaHwJcSzcJkI1pKAEKWINLgPXfHQK6HAwuATLin4cE6HUKcCdHkgDPHlYCLHVfa1heytCaLthLzF/uQBiAkBVaFLnMZI3t85VZxVYMbU8YkKI447OJEQ/Z4pvydcV15kpkLFEU8epTAnO0A4vKFZ8yKz7yCgt3argB91VQnNc3escKn8+d6RqTadIzmawjLN3gYvHpx2Ox+14W3zZBuZt9/v3Uc38WwPfHTh785qJuzz3fe28negS6bwWeDDQ13OkIWvdb0dCoqV8BdESte74aGjX1JlJH1LpbktOhxpKHvxzU2nT444Y9+ws=</diagram></mxfile>","parent":{"name":"jacdac-stack","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-05T13:01:31.001Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"0ecN-Hfsv3d2yfjBnLzk\" version=\"12.9.13\" type=\"device\"><diagram id=\"acCLaWqGyHlhlVS2UljO\" name=\"Page-1\">7Vpdc9o6EP01POKxJH/xGJK0t206k2l6p82jsAX41liMLALk11/JlrBlE0LAgJmpX7DW0sra3XO0WtNDt7PVZ4bn0+80IkkP2tGqh+56EAJge+JHStaFJHCcQjBhcaQ6lYKn+JUooa2kizgimdGRU5rweG4KQ5qmJOSGDDNGl2a3MU3MWed4QhqCpxAnTemvOOJTtQrol/J/SDyZ6pmBNyiezLDurFaSTXFElxURuu+hW0YpL+5mq1uSSONpuxTjPr3xdPNijKR8nwFfMUZfvvpr8Prt4XHkrUY/b771lZaMr/WCSSTWr5qU8Smd0BQn96V0yOgijYjUaotW2eeB0rkQAiH8j3C+Vs7EC06FaMpniXpKVjH/Xbl/lqosV7XuVkpz3ljrRsrZ+ne1URklm+WwvKXHNa2kl0wXLCQ7TINUtGE2IXxHv6DoJ+1WmUD54DOhMyLeR3RgJME8fjHjCqvwnGz6lR4UN8qJH3AoLPS+4GShZnoSK+DSBoskIz0ZJF4i1jMcMXE3kXcR4QI6wqPbYuEBjwSkDf/hJJ6k4j4UNiVMCF4I47HAzI16MIujqAgVksWveJTrk96Y0zjl+ZLdYc+92+qfXXEqJyKr3hbgq0kMbBnmV6P6tgURUr5dG5r2dpBS/igXU2oGjqG0DwamBjoeZyKQ6g7evOLhPkcNnz/EGSdpnE5yymO5V40oqDs6SQShSo8tpzEnT3OcQ2MpOL3m+mxesOw4XkkKGGac0T8baoS7ENdw3ptOApozlS2Ro9rLCgUr0bTCvlrWOqqcvzT5Dv29S5MAdIon3QZmhmtO8ulDImbvMhk6LZKhA90TcGFNaf9sVOhdEqglOJ+r2HwHqCU2n7W+ywLV6RRQ/e0JTT/CHMvzgdihGgkNWYWESJdCD8/kDpaOsvnGeJ3EtNcipvWZS6MPtoJprUZrRefCdNCIgF845tXk5t+bHz/lGTMPiW6nNqhrqc3gAMYMF+wlJ0xwAcIEvTNlNjpjuTbG1KWTCmDuBDL6oyLByRlzyymwJM3OkuSgRZJEwcBMUqDXDk0Cx7JrVAkCSxeMTk+XOmwr7v+R57QFY14RV7pd40oADyDLY/jxoJOfmVDa7/CjweVHkKWzJ1mibnFls3byieEZ6XPaH8ubJk8W/HlJtkyk+iEO/0zyo8stTUQWJCdH4/z6QFlNlwtbqav5HjAZtaXEEwDLMSt2vjUIzsanTiNE7hnTRTXe+WJaPeME3qVZdNAwaNOGaXQjv95IxCQ4y+LQNF1hqUrk2/l1igpYa4xWsbe7xd5adiRavNqeWXdjweRqUOnJLSUcU9GmrRUVdmkoagt28JCaa0tVVn3/oZPIO/H1dsS2tQPvfVxpvRKbDxV4xetKB7Vv7QhUM8AcO9gZkJ57XH/kwlqcFm/85ttZNnB9GPgudJE/qM0tntoO9AF0fMeDtnMYyDzXs9yg1POhSU4NwGsukcM2a+QIumZFDbZD1cACvl25gG/M0g+E+weV62wpjz4KV1z/KNJNkn9AZDQkYkOWh8nrSnw2x8lLJT66BtCBWttBO1wXam06NFvevBrYdP167WFgVbFY+6K1L+E7QHL65oJ2rQZl75zl1IzfrLTfp1Gv/OvIFfxRRGOs2zVCse3XaoSBBc9H7xet+bdQ0zrdR1Lt4POXsfajIQe2QkOgdkp00HkPd3q6HWW3LV8oLl9525eEruJDBWqQUN/zjucg0Sz/1Fp0L/8ajO7/Bw==</diagram></mxfile>","parent":{"name":"jacdac-state-diagram","ext":".drawio"}},{"content":"import React from \"react\"\nimport Flash from \"../../components/tools/Flash\"\n\nexport const frontmatter = {\n    title: \"Firmware Updater\",\n    description: \"Upgrade devices to the latest firmware version.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = (props) => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    return (\n        <>\n            <h1>Firmware Updater</h1>\n            <p>\n                This page allows you to update your Jacdac module with new\n                firmware. Find the latest UF2 firmware file from your\n                manufacturer and import it with the button below.\n            </p>\n            <Flash />\n        </>\n    )\n}\n","parent":{"name":"updater","ext":".tsx"}},{"content":"A short trace containing annonce packets.\n\n0\t4b900c00ae430744000000000800000001010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n457\t3e580c00ae430744000000000800000002010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n960\ted1f0c00ae430744000000000800000003010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n1462\tf5d80c00ae430744000000000800000004010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n1960\t269f0c00ae430744000000000800000005010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n2463\t53570c00ae430744000000000800000006010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n2966\t80100c00ae430744000000000800000007010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n3466\t42c90c00ae430744000000000800000008010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n3971\t918e0c00ae430744000000000800000009010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n4472\te4460c00ae43074400000000080000000a010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n4974\t37010c00ae43074400000000080000000b010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n5480\t2fc60c00ae43074400000000080000000c010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n5981\tfc810c00ae43074400000000080000000d010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n6483\t89490c00ae43074400000000080000000e010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n6983\t5a0e0c00ae43074400000000080000000f010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n7486\t5a0e0c00ae43074400000000080000000f010000ca1fdc12\t ====== from XV60/CONTROL (0): announce; sz=8\n7991\t5a0e0c00ae43074400000000080000000f010000ca1fdc12\t ====== from XV60/CONTROL (0): announce; sz=8\n","parent":{"name":"announce","ext":".txt"}},{"content":"Moving 2 sliders back and forth on the same bus.\n\n0\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n71\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n83\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n152\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n195\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n507\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n578\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n589\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n659\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n703\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n1013\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n1087\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n1169\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n1207\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n1218\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n1520\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n1592\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n1673\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n1715\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n2027\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n2101\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n2109\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n2180\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n2221\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n2534\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n2605\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n2671\t238e0801f1fd2e7a5607122d04010320ff000000\tto slider 2/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n2718\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n2723\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n2739\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n2742\tb0320800f1fd2e7a5607122d04010111a08e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n2840\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n2941\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3043\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n3048\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3117\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n3146\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3196\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n3207\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n3239\t45601400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n3239\t45601400f1fd2e7a5607122d04010111a08e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3340\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3441\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n3542\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n3547\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3624\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n3645\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3696\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n3707\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n3739\tac4c1400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n3739\tac4c1400f1fd2e7a5607122d04010111908e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3843\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n3941\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n3975\tc30b0401abe827640e45ab7900010410\tto slider 1/SLIDER (1): GET[streaminginterval]; sz=0; GET streaming_interval\n3993\t11e00801abe827640e45ab7904010320ff000000\tto slider 1/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n4004\tff7f0800abe827640e45ab790401041000000000\tfrom slider 1/SLIDER (1): GET[streaminginterval]; sz=4; GET streaming_interval: 0ms\n4022\tc30b0401abe827640e45ab7900010410\tto slider 1/SLIDER (1): GET[streaminginterval]; sz=0; GET streaming_interval\n4034\tc30b0401abe827640e45ab7900010410\tto slider 1/SLIDER (1): GET[streaminginterval]; sz=0; GET streaming_interval\n4046\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4070\tdcec0800abe827640e45ab790401041064000000\tfrom slider 1/SLIDER (1): GET[streaminginterval]; sz=4; GET streaming_interval: 100ms\n4100\tdcec0800abe827640e45ab790401041064000000\tfrom slider 1/SLIDER (1): GET[streaminginterval]; sz=4; GET streaming_interval: 100ms\n4128\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4166\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n4201\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n4213\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n4224\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n4244\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n4259\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n4327\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n4342\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n4429\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4490\t14810800f1fd2e7a5607122d04010111608e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n4522\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n4543\t5ab60800f1fd2e7a5607122d04010111408e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n4569\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n4625\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4639\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n4706\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n4728\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4777\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n4821\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4843\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n4924\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4962\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n5026\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5070\t14810800f1fd2e7a5607122d04010111608e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n5130\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n5148\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n5211\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n5224\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n5239\t591e0800f1fd2e7a5607122d04010111908e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n5258\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n5265\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n5327\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n5365\t36330800f1fd2e7a5607122d04010111008b0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.543\n5429\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5489\td45d0800f1fd2e7a5607122d04010111608a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.541\n5523\t5fc30800abe827640e45ab7904010111809b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5540\t83ad0800f1fd2e7a5607122d04010111708f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.56\n5569\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n5625\t5fc30800abe827640e45ab7904010111809b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5666\t00330800f1fd2e7a5607122d04010111c0900000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.565\n5713\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n5725\tff1c0800abe827640e45ab790401011140a30000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.638\n5748\t3d710800f1fd2e7a5607122d04010111508a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.54\n5770\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n5828\tc8070800abe827640e45ab790401011180b60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.713\n5850\t42630800f1fd2e7a5607122d04010111a0780000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.471\n5871\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n5921\ta79d0800abe827640e45ab790401011140d00000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.813\n5982\t40550800f1fd2e7a5607122d04010111a0640000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.393\n6023\t31420800abe827640e45ab790401011140f30000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.95\n6042\tce560800f1fd2e7a5607122d04010111904c0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.299\n6066\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n6127\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6156\t0a3c0800f1fd2e7a5607122d04010111002d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.176\n6214\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n6225\tf72c0800abe827640e45ab790401011150ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6273\t17970800f1fd2e7a5607122d0401011130100000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.063\n6319\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6331\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6351\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n6422\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6461\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6524\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6556\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6572\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n6628\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6652\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6720\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6746\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n6752\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6765\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n6824\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6863\t1d4b0800f1fd2e7a5607122d04010111b00d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.053\n6927\t92dd0800abe827640e45ab790401011140e70000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.903\n6977\t2f270800f1fd2e7a5607122d04010111702e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.181\n7020\t86300800abe827640e45ab7904010111a0b60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.713\n7051\t20560800f1fd2e7a5607122d0401011160580000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.345\n7075\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n7123\t523a0800abe827640e45ab7904010111106f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.434\n7162\ta4050800f1fd2e7a5607122d04010111d0820000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.511\n7226\t103c0800abe827640e45ab7904010111e0350000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.21\n7243\t66820800f1fd2e7a5607122d0401011110a40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.641\n7261\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n7271\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n7322\t6e510800abe827640e45ab7904010111000a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.039\n7338\tf2b10800f1fd2e7a5607122d0401011180c60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.775\n7425\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7476\t94e80800f1fd2e7a5607122d0401011140de0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.868\n7521\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7572\t1b750800f1fd2e7a5607122d04010111a0ea0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.917\n7624\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7637\t36010800f1fd2e7a5607122d0401011180fa0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.979\n7668\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n7724\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7757\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n7776\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n7780\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n7818\t30500800abe827640e45ab790401011190000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7850\tc5420800f1fd2e7a5607122d0401011150ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n7920\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7946\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n8023\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n8086\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n8127\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n8148\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n8179\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n8219\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n8240\t66dd0800f1fd2e7a5607122d0401011150eb0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.919\n8269\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n8275\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n8326\tc39d0800f1fd2e7a5607122d0401011180c90000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.787\n8368\t0f240800abe827640e45ab790401011100060000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.023\n8418\t92b90800abe827640e45ab790401011150240000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.142\n8443\t62830800f1fd2e7a5607122d04010111d0a20000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.636\n8521\td14c0800abe827640e45ab7904010111b05c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.362\n8539\tf14f0800f1fd2e7a5607122d04010111c0740000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.456\n8584\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n8594\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n8625\t3c0e0800f1fd2e7a5607122d0401011140470000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.278\n8682\td5290800abe827640e45ab790401011160990000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.599\n8717\t1f440800abe827640e45ab790401011120be0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.743\n8731\t7e080800f1fd2e7a5607122d04010111b01d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.116\n8769\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n8781\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n8822\tc6e80800abe827640e45ab790401011140dc0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.86\n8838\t44e30800f1fd2e7a5607122d0401011130010000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.005\n8924\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9025\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9035\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9087\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n9119\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9130\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9142\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n9181\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n9222\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9273\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9288\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n9319\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9332\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9422\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9465\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9523\t88510800f1fd2e7a5607122d04010111a0100000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.065\n9575\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9596\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n9617\ta1420800abe827640e45ab790401011190e60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.901\n9681\tc1270800f1fd2e7a5607122d04010111803a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.229\n9701\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n9727\t93990800abe827640e45ab790401011100a60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.648\n9748\t863b0800f1fd2e7a5607122d04010111b0680000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.409\n9775\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n9785\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n9817\t15fc0800abe827640e45ab7904010111b0600000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.378\n9878\t1f460800f1fd2e7a5607122d04010111e09d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.617\n9918\t42530800abe827640e45ab7904010111e02a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.167\n9950\t66350800f1fd2e7a5607122d0401011140c70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.778\n10021\t12840800f1fd2e7a5607122d0401011120e50000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.895\n10103\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n10124\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10168\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10207\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n10212\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n10217\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10230\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10279\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n10290\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n10321\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10336\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10423\tb0000800f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10489\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10515\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10527\t6c010800f1fd2e7a5607122d04010111d0f60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.964\n10607\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n10700\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n10726\td97c0800abe827640e45ab7904010111a0000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10782\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n10793\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n10796\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n10815\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10828\t9c0b0800f1fd2e7a5607122d0401011110220000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.133\n10917\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10934\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11019\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11071\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11111\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n11126\t96ba0800f1fd2e7a5607122d0401011150010000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.005\n11149\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11204\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n11223\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11240\t80530800f1fd2e7a5607122d04010111303d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.239\n11288\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n11299\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n11310\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n11321\t09470800f1fd2e7a5607122d04010111908d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.553\n11385\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11423\td19d0800f1fd2e7a5607122d0401011130df0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.872\n11459\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11515\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11526\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n11617\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n11655\td28b1400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n11655\td28b1400abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11709\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n11741\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11790\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n11801\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n11822\t0ce10800abe827640e45ab790401011110380000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.219\n11843\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n11914\t6aee0800abe827640e45ab790401011140920000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.571\n11959\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12016\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12040\t48030800abe827640e45ab790401011160d80000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.845\n12119\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12142\tb1441400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n12142\tb1441400abe827640e45ab790401011180ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.998\n12219\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12277\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12299\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n12309\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n12320\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12336\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12421\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12442\tff430800abe827640e45ab790401011100ec0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.922\n12513\te1f70800abe827640e45ab7904010111b0b20000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.698\n12561\tc5420800f1fd2e7a5607122d0401011150ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12615\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12636\te2d30800abe827640e45ab7904010111605d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.365\n12718\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12753\tdd7d0800abe827640e45ab790401011160060000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.025\n12802\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n12813\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n12854\t7e271400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n12854\t7e271400f1fd2e7a5607122d0401011170ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.998\n12915\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12938\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n13018\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13058\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n13119\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13147\t7e670800abe827640e45ab7904010111b0000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.003\n13221\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13242\t7e8f0800abe827640e45ab7904010111a02c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.174\n13271\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n13310\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n13321\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n13326\t45521400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n13326\t45521400f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13413\t792d0800f1fd2e7a5607122d04010111a0f40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.956\n13452\t3d9b0800abe827640e45ab790401011180850000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.521\n13515\t0cea0800f1fd2e7a5607122d0401011100e60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.898\n13564\tb5470800abe827640e45ab7904010111609b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n13618\tb2de0800f1fd2e7a5607122d0401011130cf0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.809\n13655\t25c20800abe827640e45ab7904010111609c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.611\n13719\t46830800f1fd2e7a5607122d04010111a0af0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.686\n13758\tb9ac0800abe827640e45ab7904010111209c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.61\n13851\t05440800f1fd2e7a5607122d04010111c0a60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.651\n13872\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n13912\t99af0800f1fd2e7a5607122d0401011150b40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.704\n13938\t36d90800abe827640e45ab7904010111d0840000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.519\n14013\t0eb10800f1fd2e7a5607122d04010111c0c40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.769\n14069\tabac0800abe827640e45ab7904010111908a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.541\n14115\t7e5e0800f1fd2e7a5607122d0401011120af0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.684\n14131\tcb470800abe827640e45ab7904010111409a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.603\n14153\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n14217\t9e340800f1fd2e7a5607122d04010111c0c30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.765\n14242\t01470800abe827640e45ab7904010111c0830000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.515\n14281\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n14310\t25f20800f1fd2e7a5607122d0401011120ce0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.805\n14363\t5e5d0800abe827640e45ab790401011150870000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.529\n14384\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n14414\t6aec0800f1fd2e7a5607122d0401011180b10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.693\n14434\t523a0800abe827640e45ab7904010111106f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.434\n14517\t9d190800f1fd2e7a5607122d04010111c0d10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.819\n14608\t8a860800f1fd2e7a5607122d0401011160dd0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.865\n14646\t5ab40800abe827640e45ab790401011180ad0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.678\n14660\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n14711\tfdc00800f1fd2e7a5607122d0401011190b00000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.69\n14730\t625b0800abe827640e45ab790401011180dc0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.861\n14763\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n14814\tfb160800f1fd2e7a5607122d04010111907b0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.483\n14838\tc79e0800abe827640e45ab790401011180ec0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.924\n14868\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n14903\t52550800f1fd2e7a5607122d0401011110720000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.446\n14946\tc4ec0800abe827640e45ab7904010111c0b10000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.694\n15006\t6a690800f1fd2e7a5607122d0401011150a30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.638\n15033\t5ba60800abe827640e45ab7904010111505e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.368\n15107\tc1ab0800f1fd2e7a5607122d0401011180d50000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.834\n15135\t808b0800abe827640e45ab790401011160430000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.263\n15152\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n15210\t56300800f1fd2e7a5607122d04010111c0b70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.718\n15254\t26ef0800abe827640e45ab7904010111608e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n15295\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n15303\t72540800f1fd2e7a5607122d04010111a0790000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.475\n15334\t92dd0800abe827640e45ab790401011140e70000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.903\n15367\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n15409\t06880800f1fd2e7a5607122d0401011100650000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.395\n15456\t238e0801f1fd2e7a5607122d04010320ff000000\tto slider 2/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n15491\tc1710800f1fd2e7a5607122d0401011110880000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.531\n15529\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n15585\t01f20800f1fd2e7a5607122d0401011150c30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.763\n15630\tfc380800abe827640e45ab7904010111904c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.299\n15657\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n15688\tbceb0800f1fd2e7a5607122d0401011160f80000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.97\n15712\t2fa00800abe827640e45ab7904010111601f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.123\n15770\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n15781\tb0000800f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n15820\t957d0800abe827640e45ab7904010111801c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.111\n15901\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n15913\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n15984\tb0000800f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16005\taa8c0800abe827640e45ab7904010111c0080000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.034\n16031\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n16086\t57740800f1fd2e7a5607122d0401011180f60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.963\n16130\td4640800abe827640e45ab7904010111f0250000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.148\n16159\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n16189\t85400800f1fd2e7a5607122d0401011120c80000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.782\n16217\t05ca0800abe827640e45ab7904010111006a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.414\n16272\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n16283\t1fc30800f1fd2e7a5607122d04010111308f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.559\n16330\t63f70800abe827640e45ab7904010111d0b10000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.695\n16379\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n16387\t67900800f1fd2e7a5607122d04010111c0570000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.343\n16413\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n16418\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16480\td6b80800f1fd2e7a5607122d0401011120360000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.211\n16515\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16526\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n16583\td23c0800f1fd2e7a5607122d0401011130220000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.134\n16636\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16665\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n16686\t263e0800f1fd2e7a5607122d04010111e00d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.054\n16720\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16753\t11e00801abe827640e45ab7904010320ff000000\tto slider 1/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n16794\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n16801\t7f960800f1fd2e7a5607122d0401011160010000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.005\n16833\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16865\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n16885\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n16915\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n16927\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16979\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17029\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n17080\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17105\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n17132\t991a0800abe827640e45ab7904010111c0f40000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.956\n17174\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n17184\t7f130800f1fd2e7a5607122d04010111b0130000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.077\n17226\td7400800abe827640e45ab790401011120ca0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.79\n17287\ta9910800f1fd2e7a5607122d0401011180480000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.283\n17319\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n17337\t7c6a0800abe827640e45ab7904010111e0900000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.566\n17359\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n17380\t12330800f1fd2e7a5607122d0401011170860000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.525\n17421\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n17426\ta00f0800abe827640e45ab7904010111005a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.352\n17483\t672e0800f1fd2e7a5607122d0401011140c90000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.786\n17524\t097e0800abe827640e45ab790401011100220000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.133\n17585\tf6dd0800f1fd2e7a5607122d0401011180fe0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.994\n17627\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17678\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n17706\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n17730\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17781\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n17801\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n17823\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17893\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n17926\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n17934\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17975\tc0580800f1fd2e7a5607122d0401011190f70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.967\n18026\t497c0800abe827640e45ab790401011170150000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.084\n18077\t4c6d0800f1fd2e7a5607122d04010111a0c30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.764\n18128\t9ffe0800abe827640e45ab7904010111404e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.306\n18179\t47700800f1fd2e7a5607122d04010111b08d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.553\n18223\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n18232\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n18283\t46620800f1fd2e7a5607122d04010111607e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.494\n18327\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n18335\tac050800abe827640e45ab7904010111808c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.549\n18366\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n18377\t9d460800f1fd2e7a5607122d04010111809e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.619\n18429\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n18436\tc3210800abe827640e45ab7904010111c0740000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.456\n18478\t52310800f1fd2e7a5607122d0401011100b10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.691\n18529\t76b60800abe827640e45ab7904010111608d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.552\n18584\td5460800f1fd2e7a5607122d0401011160840000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.517\n18622\t13c20800abe827640e45ab7904010111a0870000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.53\n18683\t95ac0800f1fd2e7a5607122d04010111009f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.621\n18714\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n18725\t26630800abe827640e45ab790401011160610000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.38\n18776\tb3c50800f1fd2e7a5607122d0401011130c10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.755\n18820\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n18828\td31e0800abe827640e45ab7904010111a0830000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.514\n18859\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n18880\t931e0800f1fd2e7a5607122d0401011110970000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.59\n18921\tda350800abe827640e45ab7904010111b0d10000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.819\n18958\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n18976\t7fc90800f1fd2e7a5607122d04010111204e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.305\n19027\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19079\t73f80800f1fd2e7a5607122d04010111f0140000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.082\n19130\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19181\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19211\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n19223\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19274\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19315\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n19322\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n19326\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19368\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n19379\t75cf0800f1fd2e7a5607122d04010111300e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.055\n19430\t099f0800abe827640e45ab7904010111c0f30000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.952\n19460\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n19480\t9e0f0800f1fd2e7a5607122d04010111904f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.311\n19521\t6cb40800abe827640e45ab790401011140b60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.712\n19583\ta5f60800f1fd2e7a5607122d04010111c0a00000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.628\n19624\tace40800abe827640e45ab7904010111405d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.364\n19675\t04000800f1fd2e7a5607122d0401011180e70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.904\n19709\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n19727\t53130800abe827640e45ab790401011190100000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.065\n19779\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19820\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n19829\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19863\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n19872\t7e271400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n19872\t7e271400f1fd2e7a5607122d0401011170ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.998\n19923\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19962\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n19980\tecb20800f1fd2e7a5607122d0401011160fb0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.982\n20021\tded50800abe827640e45ab7904010111b0060000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.026\n20072\t1a030800f1fd2e7a5607122d0401011160da0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.853\n20123\t0b480800abe827640e45ab7904010111003e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.242\n20174\ta25f0800f1fd2e7a5607122d04010111d0a60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.652\n20205\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n20226\t99210800abe827640e45ab790401011190780000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.471\n20277\t66630800f1fd2e7a5607122d04010111d0750000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.46\n20318\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n20336\t0b9b0800abe827640e45ab7904010111409e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.618\n20370\t03311400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n20370\t03311400f1fd2e7a5607122d0401011100600000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.375\n20399\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n20422\tc7ac0800abe827640e45ab7904010111009d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.613\n20453\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n20475\t71fc0800f1fd2e7a5607122d0401011170790000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.474\n20526\tf85d0800abe827640e45ab790401011140890000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.536\n20577\t00330800f1fd2e7a5607122d04010111c0900000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.565\n20629\t905c0800abe827640e45ab790401011110980000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.594\n20669\ta6bf0800f1fd2e7a5607122d04010111d0710000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.445\n20710\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n20721\tfa6b0800abe827640e45ab790401011140950000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.583\n20772\t89780800f1fd2e7a5607122d04010111206f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.434\n20823\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n20838\t04d10800abe827640e45ab790401011100640000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.391\n20875\t68791400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n20875\t68791400f1fd2e7a5607122d0401011140a00000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.626\n20927\t620d0800abe827640e45ab7904010111106e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.43\n20954\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n20959\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n20971\t0a070800f1fd2e7a5607122d0401011150a10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.63\n21022\t0f9a0800abe827640e45ab790401011180980000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.596\n21073\te5fd0800f1fd2e7a5607122d04010111606a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.416\n21125\tc1f60800abe827640e45ab790401011100b90000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.723\n21175\td1110800f1fd2e7a5607122d0401011130300000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.188\n21217\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n21229\t19410800abe827640e45ab790401011160d50000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.833\n21276\tb1120800f1fd2e7a5607122d04010111f00c0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.051\n21320\t9f2d0800abe827640e45ab790401011100ee0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.93\n21352\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n21372\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21392\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n21424\t50370800abe827640e45ab790401011140ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n21455\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n21467\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n21472\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21528\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n21569\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21620\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n21671\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21727\tef451400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n21727\tef451400abe827640e45ab790401011110f50000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.957\n21773\t19a20800f1fd2e7a5607122d0401011160270000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.154\n21825\ta6310800abe827640e45ab790401011110bd0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.739\n21883\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n21888\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n21918\t96620800abe827640e45ab7904010111007f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.496\n21959\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n21971\t572b0800f1fd2e7a5607122d04010111c0b90000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.726\n21989\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n22023\te1cc0800abe827640e45ab7904010111e03e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.246\n22074\te1420800f1fd2e7a5607122d0401011120f20000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.946\n22125\t2e3e0800abe827640e45ab7904010111b0030000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.014\n22166\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22227\td28b1400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n22227\td28b1400abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n22269\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22320\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n22352\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n22372\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22393\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n22424\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n22464\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n22469\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22521\t2b240800abe827640e45ab7904010111700b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.045\n22551\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n22573\ta4b20800f1fd2e7a5607122d0401011180e10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.881\n22624\t20390800abe827640e45ab790401011160450000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.271\n22665\t01c00800f1fd2e7a5607122d04010111d0b20000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.698\n22727\t7b7f1400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n22727\t7b7f1400abe827640e45ab7904010111506a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.415\n22767\ta8ee0800f1fd2e7a5607122d0401011190850000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.522\n22819\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n22850\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n22871\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n22901\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n22923\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n22963\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n22974\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n23026\tb3fc0800abe827640e45ab7904010111a06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.432\n23079\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23108\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n23119\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23170\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23222\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23245\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n23272\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23325\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23367\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n23373\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23408\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n23418\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23470\ta9fc0800f1fd2e7a5607122d0401011140760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23513\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n23523\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23564\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23625\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23666\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n23673\t0d4f0800f1fd2e7a5607122d0401011180760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.463\n23719\tc6be0800abe827640e45ab7904010111d06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23754\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n23777\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23826\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23862\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23894\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n23914\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n23925\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23966\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23987\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n24018\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24069\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24121\tc6be0800abe827640e45ab7904010111d06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24144\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n24164\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24224\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24245\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n24268\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24317\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24368\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24398\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n24419\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n24425\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24461\t40d00800f1fd2e7a5607122d0401011170760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.463\n24527\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n24533\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24565\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462","parent":{"name":"2-sliders","ext":".txt"}}]}}}