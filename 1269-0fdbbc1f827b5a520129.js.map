{"version":3,"file":"1269-0fdbbc1f827b5a520129.js","mappings":";;;;;;;;;;;;;AAIe,2BAGZ,CACC,GAAM,UAAN,MACA,GAAMA,CAAAA,IAAI,CAAGC,8GAAoC,CAAjD,EAAiD,CAAjD,CACA,GAAMC,CAAAA,GAAG,CAAGC,oEAAc,MAA1B,IAA0B,CAA1B,CAEA,GAAI,CAAJ,IAAU,YAEV,mBACI,wDACI,KAAK,CAAE,CAAEC,WAAW,CAAb,QAAwBC,MAAM,CADzC,CACW,CADX,CAEI,GAAG,CAFP,IAGI,GAAG,CAAEL,IAAI,CAHb,KAII,OAAO,CALf,MACI,EADJ,CAQH;;;;;;;;;;;ACpBD;AACA;AACA;AACA,GACe,2BAA4B,CACvC,GAAMM,CAAAA,GAAG,CAAGC,mEAAZ,GACA,MAAOD,CAAAA,GAAG,CAAV,cACH;;;;;;;;;;;;ACNc,2CAGb,CACE,GAAME,CAAAA,EAAE,CAAGC,IAAI,EAAf,OACA,MACIC,CAAAA,aAAa,EACbC,iEAAU,mBACYC,0FAAmB,CAACF,aAAa,CAD7C,EAC+B,CAD/B,QAFd,MAEc,CAFd,CAMH;;;;;;;;;;ACZc,wCAA6D,CACxE,MAAOG,CAAAA,OAAP,OAAOA,EAAAA,OAAP,SAAOA,CAAP,MAAOA,CAAAA,OAAO,CAAPA,QAAAA,CAAP,UAAOA,CAAP,CACH;;;;;;;;;;;;;ACCc,2CAAsD,CACjE,GAAMC,CAAAA,GAAG,CAAGC,kFAAW,CAACC,MAAD,OAACA,EAAAA,MAAD,SAACA,CAAD,MAACA,CAAAA,MAAM,CAANA,OAAAA,CAAD,CAACA,CAAD,CAAqBC,gIAArB,CAAvB,CACA,GAAM,KAAOC,qFAAwB,CAArC,GAAqC,CAArC,CACA,UACH;;;;;;;;;;;;;;;ACJc,uCAAkD,CAC7D,GAAMC,CAAAA,EAAE,CAAGC,gFAA0B,CAArC,MAAqC,CAArC,CACA,MAAOC,CAAAA,2CAA2C,CAAlD,EAAkD,CAAlD,CAGJ,CAAO,wDAAiE,CACpE,GAAMC,CAAAA,aAAa,CAAGC,yFAAtB,GACA,GAAMb,CAAAA,aAAa,CAAGc,+DAAS,eAE3BC,CAAC,EAAIA,CAAC,CAADA,kCAAAA,CAFsB,EAEtBA,CAFsB,CAG3B,CAHJ,EAGI,CAH2B,CAA/B,CAKA,qBAGJ,CAAO,iDAA0D,CAC7D,GAAMH,CAAAA,aAAa,CAAGC,yFAAtB,GACA,GAAMb,CAAAA,aAAa,CAAGc,+DAAS,eAE3BC,CAAC,EAAIA,CAAC,CAADA,2BAAAA,CAFsB,EAEtBA,CAFsB,CAG3B,CAHJ,EAGI,CAH2B,CAA/B,CAKA,qBACH;;;;;;;;;;;;;;;;;ACVD,mEAKK,CACD,GAAI,CACA,GAAMC,CAAAA,KAAK,CAAGC,MAAM,CAApB,QAAoB,CAApB,CACA,aACF,SAAU,gEACRC,UAAU,GAAI,CACVC,GAAG,CAAEC,QAAF,OAAEA,EAAAA,QAAF,SAAEA,CAAF,MAAEA,CAAF,mBAAEA,QAAQ,CAAV,0EAAEA,iBAAAA,CAAF,sDAAEA,qBAAAA,CADK,mBAEVC,GAAG,CAAED,QAAF,OAAEA,EAAAA,QAAF,SAAEA,CAAF,MAAEA,CAAF,oBAAEA,QAAQ,CAAV,oDAAEA,kBAAAA,CAFK,KAGVhB,GAAG,CAAEgB,QAAF,OAAEA,EAAAA,QAAF,SAAEA,CAAF,MAAEA,CAAAA,QAAQ,CAHjBF,IAAc,CAAJ,CAAVA,CAKA,oBAEP,CAMD,kCAAmD,CAC/C,GAAId,GAAG,GAAKkB,mGAAZ,CACI,MAAQlB,CAAAA,GAAD,EAAqB,eACxB,GAAMmB,CAAAA,MAAM,CAAG,IAAG,GAAH,SAAG,OAAH,aAAG,CAAH,gBAAf,GACA,GAAM,kBAAN,OACA,GAAIC,IAAI,GAAR,UAAwB,UACxB,GAAIC,CAAAA,CAAC,aAAMC,0FAAQ,CACfC,uFAAiB,CAAjBA,IAAiB,CAAjBA,EADC,GAAc,CAAd,oCAAMD,SAAAA,CAAN,WAAMA,EAAN,SAEkBF,IAAI,CAAJA,QAAAA,CAFlB,EAEkBA,CAFlB,CAAL,IAGA,cAAgB,CACZC,CAAC,iBAAmBD,IAAI,CAAJA,QAAAA,CAApBC,EAAoBD,CAApBC,CAEJ,UAVJ,EAaJ,GACIJ,GAAG,GAAHA,8FAAAA,EACAjB,GAAG,GAAKwB,0HAFZ,CAGE,CACE,MAAQxB,CAAAA,GAAD,EAAqB,CACxB,GAAMmB,CAAAA,MAAM,CAAG,IAAG,GAAH,SAAG,OAAH,aAAG,CAAH,gBAAf,GACA,GAAM,oBAAN,OACA,GAAIM,KAAK,GAAT,UAAyB,UACzB,MAAUC,CAAAA,KAAV,IAAUA,CAAV,KAAUA,CAAV,GAAUA,CAAV,MAJJ,EAQJ,kBAGJ,CAAO,gDAGG,CACN,GAAM,oBAAyBC,OAAO,EAAI,CAAEC,OAAO,CAAnD,IAA0C,CAA1C,CACA,GAAM,aAAiBC,oFAAvB,GACA,GAAMC,CAAAA,QAAQ,CAAGd,QAAQ,CACnBe,eAAe,CAACf,QAAQ,CAARA,OAAAA,CAAD,aAAgCA,QAAQ,CADpC,IACJ,CADI,CAAzB,UAIA,MAAOgB,CAAAA,oEAAc,qFAEjBJ,OAAO,UAFU,UAGjBjB,CAAC,EACGsB,iBAAiB,GAEbC,EAAE,EACEJ,QAAQ,CACFA,QAAQ,CADN,EACM,CADN,CAEFK,4EAAO,CAACD,EAAD,OAACA,EAAAA,EAAD,SAACA,CAAD,MAACA,CAAAA,EAAE,CAAH,WALJ,SAKI,CALJ,OAJJ,UAII,CAJJ,CAajB,SAbJ,SAaI,CAbiB,CAArB,CAiBJ,CAAO,mDAGF,CACD,GAAM,UAAcP,OAAO,EAAI,CAAEC,OAAO,CAAxC,IAA+B,CAA/B,CACA,GAAM,aAAiBC,oFAAvB,GAEA,MAAOG,CAAAA,oEAAc,qFAEjBJ,OAAO,UAFU,UAGjBjB,CAAC,EACGsB,iBAAiB,GAEbC,EAAE,EAAK,GAAE,GAAF,QAAE,OAAF,YAAE,CAAF,gBAFM,MAJJ,UAII,CAJJ,CAUjB,CAVJ,OAUI,CAViB,CAArB,CAcJ,CAAO,+CAGI,CACP,GAAM,UAAcP,OAAO,EAAI,CAAEC,OAAO,CAAxC,IAA+B,CAA/B,CACA,MAAOI,CAAAA,oEAAc,qFAEjBJ,OAAO,UAFU,UAGjBjB,CAAC,EAAIA,CAAJ,OAAIA,EAAAA,CAAJ,SAAIA,CAAJ,MAAIA,CAAAA,CAAC,CAHW,UAIjB,CAJJ,OAII,CAJiB,CAArB,CAMH","sources":["webpack://jacdac-docs/./src/components/devices/DeviceImage.tsx","webpack://jacdac-docs/./src/components/devices/useDeviceCatalog.ts","webpack://jacdac-docs/./src/components/devices/useDeviceImage.ts","webpack://jacdac-docs/./src/components/hooks/useRegister.ts","webpack://jacdac-docs/./src/jacdac/useDeviceProductIdentifier.ts","webpack://jacdac-docs/./src/jacdac/useDeviceSpecification.ts","webpack://jacdac-docs/./src/jacdac/useRegisterValue.ts"],"sourcesContent":["import React from \"react\"\nimport { useDeviceSpecificationFromIdentifier } from \"../../jacdac/useDeviceSpecification\"\nimport useDeviceImage from \"./useDeviceImage\"\n\nexport default function DeviceImage(props: {\n    id: string\n    size: \"avatar\" | \"lazy\" | \"catalog\" | \"preview\" | \"full\"\n}) {\n    const { id, size } = props\n    const spec = useDeviceSpecificationFromIdentifier(id)\n    const url = useDeviceImage(spec, size)\n\n    if (!url) return null\n\n    return (\n        <img\n            style={{ aspectRatio: \"4 / 3\", margin: 0 }}\n            src={url}\n            alt={spec.name}\n            loading=\"lazy\"\n        />\n    )\n}\n","import useBus from \"../../jacdac/useBus\"\n\n/**\n * Gets the device catalog from the current bus\n * @returns\n */\nexport default function useDeviceCatalog() {\n    const bus = useBus()\n    return bus.deviceCatalog\n}\n","import { withPrefix } from \"gatsby-link\"\nimport { identifierToUrlPath } from \"../../../jacdac-ts/src/jdom/catalog\"\n\nexport default function useDeviceImage(\n    specification: jdspec.DeviceSpec,\n    size: \"avatar\" | \"lazy\" | \"catalog\" | \"preview\" | \"full\" | \"list\"\n) {\n    const sz = size || \"full\"\n    return (\n        specification &&\n        withPrefix(\n            `images/devices/${identifierToUrlPath(specification.id)}.${sz}.jpg`\n        )\n    )\n}\n","import { JDService } from \"../../../jacdac-ts/src/jdom/service\"\n\nexport default function useRegister(service: JDService, identifier: number) {\n    return service?.register(identifier)\n}\n","import { ControlReg } from \"../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { JDDevice } from \"../../jacdac-ts/src/jdom/device\"\nimport useRegister from \"../components/hooks/useRegister\"\nimport { useRegisterUnpackedValue } from \"./useRegisterValue\"\n\nexport default function useDeviceProductIdentifier(device: JDDevice) {\n    const reg = useRegister(device?.service(0), ControlReg.ProductIdentifier)\n    const [id] = useRegisterUnpackedValue<[number]>(reg)\n    return id\n}\n","import { JDDevice } from \"../../jacdac-ts/src/jdom/device\"\nimport useDeviceProductIdentifier from \"./useDeviceProductIdentifier\"\nimport useChange from \"./useChange\"\nimport useDeviceCatalog from \"../components/devices/useDeviceCatalog\"\n\nexport default function useDeviceSpecification(device: JDDevice) {\n    const id = useDeviceProductIdentifier(device)\n    return useDeviceSpecificationFromProductIdentifier(id)\n}\n\nexport function useDeviceSpecificationFromProductIdentifier(id: number) {\n    const deviceCatalog = useDeviceCatalog()\n    const specification = useChange(\n        deviceCatalog,\n        _ => _.specificationFromProductIdentifier(id),\n        [id]\n    )\n    return specification\n}\n\nexport function useDeviceSpecificationFromIdentifier(id: string) {\n    const deviceCatalog = useDeviceCatalog()\n    const specification = useChange(\n        deviceCatalog,\n        _ => _.specificationFromIdentifier(id),\n        [id]\n    )\n    return specification\n}\n","import { humanify } from \"../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    BaseReg,\n    DeviceScriptManagerReg,\n    REPORT_UPDATE,\n    SRV_DEVICE_SCRIPT_MANAGER,\n    SystemStatusCodes,\n} from \"../../jacdac-ts/src/jdom/constants\"\nimport { PackedValues } from \"../../jacdac-ts/src/jdom/pack\"\nimport { JDRegister } from \"../../jacdac-ts/src/jdom/register\"\nimport { ellipse } from \"../../jacdac-ts/src/jdom/utils\"\nimport useAnalytics, { EventProperties } from \"../components/hooks/useAnalytics\"\nimport useEventRaised from \"./useEventRaised\"\nexport interface RegisterOptions {\n    // Indicates if the HTML element is visible in view. If not, updates may be slowed or stopped.\n    visible?: boolean\n}\n\nfunction readRegisterValue<T>(\n    register: JDRegister,\n    reader: (reg: JDRegister) => T,\n    defaultValue: T,\n    trackError: (error: Error, properties?: EventProperties) => void\n): T {\n    try {\n        const value = reader(register)\n        return value\n    } catch (e) {\n        trackError(e, {\n            dev: register?.service?.device?.anonymizedDeviceId,\n            srv: register?.service?.name,\n            reg: register?.name,\n        })\n        return defaultValue\n    }\n}\n\nexport interface HumanRegisterOptions extends RegisterOptions {\n    maxLength?: number\n}\n\nfunction resolveRenderer(srv: number, reg: number) {\n    if (reg === BaseReg.StatusCode)\n        return (reg: JDRegister) => {\n            const values = reg?.unpackedValue || []\n            const [code, vendorCode] = values as [number, number]\n            if (code === undefined) return \"?\"\n            let r = `${humanify(\n                SystemStatusCodes[code] || \"?\"\n            )?.toLowerCase()} (0x${code.toString(16)})`\n            if (vendorCode) {\n                r += `, vendor: 0x${code.toString(16)}`\n            }\n            return r\n        }\n\n    if (\n        srv === SRV_DEVICE_SCRIPT_MANAGER &&\n        reg === DeviceScriptManagerReg.RuntimeVersion\n    ) {\n        return (reg: JDRegister) => {\n            const values = reg?.unpackedValue || []\n            const [patch, minor, major] = values as [number, number, number]\n            if (patch === undefined) return \"?\"\n            return `${major}.${minor}.${patch}`\n        }\n    }\n\n    return undefined\n}\n\nexport function useRegisterHumanValue(\n    register: JDRegister,\n    options?: HumanRegisterOptions\n): string {\n    const { visible, maxLength } = options || { visible: true }\n    const { trackError } = useAnalytics()\n    const renderer = register\n        ? resolveRenderer(register.service.serviceClass, register.code)\n        : undefined\n\n    return useEventRaised(\n        REPORT_UPDATE,\n        visible ? register : undefined,\n        _ =>\n            readRegisterValue(\n                _,\n                __ =>\n                    renderer\n                        ? renderer(__)\n                        : ellipse(__?.humanValue, maxLength),\n                \"???\",\n                trackError\n            ),\n        [visible, maxLength]\n    )\n}\n\nexport function useRegisterUnpackedValue<T extends PackedValues>(\n    register: JDRegister,\n    options?: RegisterOptions\n): T {\n    const { visible } = options || { visible: true }\n    const { trackError } = useAnalytics()\n\n    return useEventRaised(\n        REPORT_UPDATE,\n        visible ? register : undefined,\n        _ =>\n            readRegisterValue<T>(\n                _,\n                __ => (__?.unpackedValue || []) as T,\n                [] as T,\n                trackError\n            ),\n        [visible]\n    )\n}\n\nexport function useRegisterBoolValue(\n    register: JDRegister,\n    options?: RegisterOptions\n): boolean {\n    const { visible } = options || { visible: true }\n    return useEventRaised(\n        REPORT_UPDATE,\n        visible ? register : undefined,\n        _ => _?.boolValue,\n        [visible]\n    )\n}\n"],"names":["spec","useDeviceSpecificationFromIdentifier","url","useDeviceImage","aspectRatio","margin","bus","useBus","sz","size","specification","withPrefix","identifierToUrlPath","service","reg","useRegister","device","ControlReg","useRegisterUnpackedValue","id","useDeviceProductIdentifier","useDeviceSpecificationFromProductIdentifier","deviceCatalog","useDeviceCatalog","useChange","_","value","reader","trackError","dev","register","srv","BaseReg","values","code","r","humanify","SystemStatusCodes","DeviceScriptManagerReg","patch","major","options","visible","useAnalytics","renderer","resolveRenderer","useEventRaised","readRegisterValue","__","ellipse"],"sourceRoot":""}