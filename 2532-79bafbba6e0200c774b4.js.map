{"version":3,"file":"2532-79bafbba6e0200c774b4.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardGyroscope.tsx"],"sourcesContent":["import React, { useCallback } from \"react\"\nimport { GyroscopeReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { SensorServer } from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport { Grid, NoSsr } from \"@mui/material\"\nimport { roundWithPrecision } from \"../../../jacdac-ts/src/jdom/utils\"\nimport CanvasWidget from \"../widgets/CanvasWidget\"\nimport { Vector } from \"../widgets/threeutils\"\nimport Suspense from \"../ui/Suspense\"\nimport SliderWithLabel from \"../ui/SliderWithLabel\"\nimport useRegister from \"../hooks/useRegister\"\nimport MaxReadingField from \"./MaxReadingField\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\n\nfunction Sliders(props: {\n    server: SensorServer<[number, number, number]>\n    register: JDRegister\n    visible: boolean\n}) {\n    const { server, register, visible } = props\n    const rates = useRegisterUnpackedValue<[number, number, number]>(register, {\n        visible,\n    })\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeX: any = (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [, y, z] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        server.reading.setValues([n, y, z])\n        register.sendGetAsync()\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeY: any = (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [x, , z] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        server.reading.setValues([x, n, z])\n        register.sendGetAsync()\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeZ: any = (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [x, y] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        server.reading.setValues([x, y, n])\n        register.sendGetAsync()\n    }\n    const valueDisplay = (v: number) => `${roundWithPrecision(v, 1)}Â°/s`\n\n    if (!rates?.length)\n        return <DashboardRegisterValueFallback register={register} />\n    const [x, y, z] = rates\n    const step = 1\n    const marks = [\n        {\n            value: 0,\n        },\n    ]\n    return (\n        <>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label=\"X\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"x rotation rate slider\"\n                    min={-180}\n                    max={180}\n                    step={step}\n                    value={x}\n                    marks={marks}\n                    onChange={handleChangeX}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label={\"Y\"}\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"y rotation rate slider\"\n                    min={-180}\n                    max={180}\n                    step={step}\n                    value={y}\n                    marks={marks}\n                    onChange={handleChangeY}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label=\"Z\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"z rotation rate slider\"\n                    min={-180}\n                    max={180}\n                    step={step}\n                    value={z}\n                    marks={marks}\n                    onChange={handleChangeZ}\n                />\n            </Grid>\n        </>\n    )\n}\n\nexport default function DashboardGyroscope(props: DashboardServiceProps) {\n    const { service, visible, expanded } = props\n    const register = useRegister(service, GyroscopeReg.RotationRates)\n    useRegisterUnpackedValue<[number, number, number]>(register, props)\n    const server =\n        useServiceServer<SensorServer<[number, number, number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { active } = useWidgetTheme(color)\n    const rotator = useCallback(\n        (delta, rotation: Vector) => {\n            const rates = register.unpackedValue\n            if (!rates) return\n\n            const [x, y, z] = rates // degrees\n            const degreesToRadians = Math.PI / 180\n            const f = delta * degreesToRadians\n            return {\n                x: rotation.x - x * f,\n                y: rotation.y - z * f,\n                z: rotation.z - y * f,\n            }\n        },\n        [register]\n    )\n\n    return (\n        <Grid container direction=\"row\">\n            <Grid item>\n                <NoSsr>\n                    <Suspense>\n                        <CanvasWidget color={active} rotator={rotator} />\n                    </Suspense>\n                </NoSsr>\n            </Grid>\n            {expanded && (\n                <Sliders\n                    server={server}\n                    register={register}\n                    visible={visible}\n                />\n            )}\n            {expanded && (\n                <MaxReadingField\n                    registerCode={GyroscopeReg.MaxRate}\n                    {...props}\n                />\n            )}\n        </Grid>\n    )\n}\n"],"names":["rates","useRegisterUnpackedValue","handleChangeX","server","n","register","handleChangeY","handleChangeZ","valueDisplay","v","roundWithPrecision","step","marks","value","useRegister","GyroscopeReg","useServiceServer","color","useWidgetTheme","rotator","useCallback","degreesToRadians","Math","f","delta","x","rotation","y","z","expanded"],"sourceRoot":""}