{"version":3,"file":"195-cbb3f98f40c24a304453.js","mappings":";;;;;;;;;;;;;;;;;;;;AAWe,oCAA4D,CACvE,GAAM,mBAAN,MACA,GAAMA,CAAAA,gBAAgB,CAAGC,uEAAW,SAAUC,sGAAV,CAApC,CACA,GAAMC,CAAAA,QAAQ,CAAGC,wFAAoB,kBAArC,KAAqC,CAArC,CACA,GAAMC,CAAAA,aAAa,mIAAG,kCACZL,CAAAA,gBAAgB,CAAhBA,gBAAAA,CAAAA,OAAAA,CADY,IACZA,CADY,CAAH,SAAbK,SAAAA,CAAAA,aAAAA,CAAa,EAAbA,CAAa,GAAbA,CAAa,qCAAnB,CAAmB,EAAnB,CAEA,GAAMC,CAAAA,QAAQ,CAAGC,4CAAjB,GACA,GAAMC,CAAAA,OAAO,CAAGF,QAAQ,CAAxB,SACA,GAAMG,CAAAA,WAAW,CAAGC,mFAApB,GACA,GAAMC,CAAAA,KAAK,CAAGC,sEAAS,aAAcC,CAAC,EAAIA,CAAJ,OAAIA,EAAAA,CAAJ,SAAIA,CAAJ,MAAIA,CAAAA,CAAC,CAA3C,KAAuB,CAAvB,CAEA,mBACI,kGACKF,KAAK,eACF,kHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,kHAAM,SAAS,CAAf,KAAgB,OAAO,CAAvB,EAA4B,SAAS,CAArC,OACKA,KAAK,CAALA,GAAAA,CAAUG,IAAI,eACX,kHAAM,GAAG,CAAEA,IAAI,CAAf,KAAsB,IAAI,CAA1B,KAA2B,EAAE,CAA7B,mBACI,0HAAc,IAAI,CAN1C,IAMwB,EADJ,CADHH,CADL,CADJ,CAFR,CAYKI,QAAQ,EAAIZ,QAAQ,GAApBY,SAAAA,EAAAA,aACG,kHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,iHACI,EAAE,CADN,SAEI,OAAO,CAFX,SAGI,QAAQ,CAJhB,aACI,EADJ,cAMI,0DAAO,EAAE,CAAT,QAAoB,OAAO,CAA3B,UApBhB,mBAoBgB,CANJ,CAbR,CADJ,CA2BH;;;;;;;;;;;;;AC1Cc,+BAAmD,CAC9D,GAAMC,CAAAA,GAAG,CAAGC,mEAAZ,GACA,GAAM,iBAAgBC,+CAAQ,CAAoBF,GAAG,CAArD,WAA8B,CAA9B,CACAG,gDAAS,CACL,IAAMH,GAAG,CAAHA,SAAAA,CAAAA,yFAAAA,CAAmC,IAAMI,MAAM,CAACJ,GAAG,CADpD,WACgD,CAA/CA,CADD,CAEL,CAFJG,GAEI,CAFK,CAATA,CAIA,WACH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardRoleManager.tsx","webpack://jacdac-docs/./src/components/services/useRoleManagerClient.ts"],"sourcesContent":["import { Grid, Switch } from \"@mui/material\"\nimport React from \"react\"\nimport { RoleManagerReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useId } from \"react\"\nimport { useRegisterBoolValue } from \"../../jacdac/useRegisterValue\"\nimport useChange from \"../../jacdac/useChange\"\nimport RoleListItem from \"../services/RoleListItem\"\nimport useRegister from \"../hooks/useRegister\"\nimport useRoleManagerClient from \"../services/useRoleManagerClient\"\n\nexport default function DashboardRoleManager(props: DashboardServiceProps) {\n    const { service, expanded } = props\n    const autoBindRegister = useRegister(service, RoleManagerReg.AutoBind)\n    const autoBind = useRegisterBoolValue(autoBindRegister, props)\n    const handleChecked = async (ev, checked: boolean) =>\n        await autoBindRegister.sendSetBoolAsync(checked, true)\n    const switchId = useId()\n    const labelId = switchId + \"-label\"\n    const roleManager = useRoleManagerClient()\n    const roles = useChange(roleManager, _ => _?.roles)\n\n    return (\n        <>\n            {roles && (\n                <Grid item xs={12}>\n                    <Grid container spacing={1} direction=\"row\">\n                        {roles.map(role => (\n                            <Grid key={role.name} item xs>\n                                <RoleListItem role={role} />\n                            </Grid>\n                        ))}\n                    </Grid>\n                </Grid>\n            )}\n            {expanded && autoBind !== undefined && (\n                <Grid item xs={12}>\n                    <Switch\n                        id={switchId}\n                        checked={autoBind}\n                        onChange={handleChecked}\n                    />\n                    <label id={labelId} htmlFor={switchId}>\n                        auto assign roles\n                    </label>\n                </Grid>\n            )}\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { ROLE_MANAGER_CHANGE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { RoleManagerClient } from \"../../../jacdac-ts/src/jdom/clients/rolemanagerclient\"\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useBus from \"../../jacdac/useBus\"\n\nexport default function useRoleManagerClient(): RoleManagerClient {\n    const bus = useBus()\n    const [mgr, setMgr] = useState<RoleManagerClient>(bus.roleManager)\n    useEffect(\n        () => bus.subscribe(ROLE_MANAGER_CHANGE, () => setMgr(bus.roleManager)),\n        [bus]\n    )\n    return mgr\n}\n"],"names":["autoBindRegister","useRegister","RoleManagerReg","autoBind","useRegisterBoolValue","handleChecked","switchId","useId","labelId","roleManager","useRoleManagerClient","roles","useChange","_","role","expanded","bus","useBus","useState","useEffect","setMgr"],"sourceRoot":""}