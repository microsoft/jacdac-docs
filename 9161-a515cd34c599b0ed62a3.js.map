{"version":3,"file":"9161-a515cd34c599b0ed62a3.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardHIDJoystick.tsx","webpack://jacdac-docs/./src/components/ui/SliderWithLabel.tsx"],"sourcesContent":["import { Button, Grid } from \"@mui/material\"\nimport React, { useEffect, useRef } from \"react\"\nimport {\n    HidJoystickCmd,\n    HidJoystickReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useRegister from \"../hooks/useRegister\"\nimport SliderWithLabel from \"../ui/SliderWithLabel\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { HIDJoystickServer } from \"../../../jacdac-ts/src/servers/hidjoystickserver\"\nimport useChange from \"../../jacdac/useChange\"\n\nfunction AxisWidget(props: DashboardServiceProps) {\n    const { service } = props\n\n    const axisCountRegister = useRegister(service, HidJoystickReg.AxisCount)\n    const [axisCount = 0] = useRegisterUnpackedValue(axisCountRegister, props)\n    const axis = useRef<number[]>(new Array(axisCount).fill(0))\n    useEffect(() => {\n        axis.current = new Array(axisCount).fill(0)\n    }, [axisCount])\n\n    // axis\n    const sendAxis = () =>\n        service.sendCmdPackedAsync(HidJoystickCmd.SetAxis, [\n            axis.current.map(v => [v]),\n        ])\n    const handleAxisChange =\n        (index: number) =>\n        async (event: Event, newValue: number | number[]) => {\n            const nv = newValue as number\n            axis.current[index] = nv\n            await sendAxis()\n        }\n\n    return (\n        <Grid container spacing={2}>\n            {Array(axisCount)\n                .fill(0)\n                .map((_, i) => (\n                    <Grid item xs={6} key={`axis${i}`}>\n                        <SliderWithLabel\n                            size=\"small\"\n                            label={`AXIS ${i}`}\n                            title={`axis ${i}`}\n                            min={-1}\n                            max={1}\n                            step={0.1}\n                            marks\n                            defaultValue={0}\n                            onChange={handleAxisChange(i)}\n                        />\n                    </Grid>\n                ))}\n        </Grid>\n    )\n}\n\nfunction ButtonsWidget(props: DashboardServiceProps) {\n    const { service } = props\n\n    const server = useServiceServer<HIDJoystickServer>(service)\n    const serverButtons = useChange(server, _ => _?.buttons)\n    const buttonCountRegister = useRegister(service, HidJoystickReg.ButtonCount)\n    const [buttonCount = 0] = useRegisterUnpackedValue(\n        buttonCountRegister,\n        props\n    )\n    const buttons = useRef<number[]>(new Array(buttonCount).fill(0))\n    // update size\n    useEffect(() => {\n        buttons.current = new Array(buttonCount).fill(0)\n    }, [buttonCount])\n\n    // buttons\n    const sendButtons = () =>\n        service.sendCmdPackedAsync(HidJoystickCmd.SetButtons, [\n            buttons.current.map(v => [v]),\n        ])\n    const handleButtonDown = (index: number) => async () => {\n        buttons.current[index] = 1\n        await sendButtons()\n    }\n    const handleButtonUp = (index: number) => async () => {\n        buttons.current[index] = 0\n        await sendButtons()\n    }\n\n    return (\n        <Grid container spacing={1}>\n            {Array(buttonCount)\n                .fill(0)\n                .map((_, i) => (\n                    <Grid item key={`button${i}`}>\n                        <Button\n                            size=\"small\"\n                            variant={\n                                serverButtons?.[i] > 127\n                                    ? \"contained\"\n                                    : \"outlined\"\n                            }\n                            title={`button ${i}`}\n                            onPointerDown={handleButtonDown(i)}\n                            onPointerUp={handleButtonUp(i)}\n                        >\n                            B{i}\n                        </Button>\n                    </Grid>\n                ))}\n        </Grid>\n    )\n}\n\nexport default function DashboardHIDJoystick(props: DashboardServiceProps) {\n    return (\n        <Grid container spacing={1} direction=\"row\">\n            <Grid xs={12} item>\n                <ButtonsWidget {...props} />\n            </Grid>\n            <Grid xs={12} item>\n                <AxisWidget {...props} />\n            </Grid>\n        </Grid>\n    )\n}\n","import { Slider, SliderProps, Typography } from \"@mui/material\"\nimport React from \"react\"\nimport { useId } from \"react\"\n\nexport default function SliderWithLabel(\n    props: {\n        label?: string\n    } & SliderProps\n) {\n    const { label, ...others } = props\n    const labelId = useId()\n    const sliderId = labelId + \"sliderId\"\n\n    return (\n        <>\n            <Typography id={labelId} variant=\"caption\" gutterBottom>\n                {label}\n            </Typography>\n            <Slider\n                id={sliderId}\n                aria-labelledby={labelId}\n                aria-label={label}\n                valueLabelDisplay=\"auto\"\n                {...others}\n            />\n        </>\n    )\n}\n"],"names":["axisCountRegister","useRegister","HidJoystickReg","axisCount","useRegisterUnpackedValue","axis","useRef","useEffect","sendAxis","service","HidJoystickCmd","v","handleAxisChange","index","nv","Array","server","useServiceServer","serverButtons","useChange","_","buttonCountRegister","buttonCount","buttons","sendButtons","handleButtonDown","handleButtonUp","others","labelId","useId","sliderId"],"sourceRoot":""}