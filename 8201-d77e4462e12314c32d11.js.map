{"version":3,"file":"8201-d77e4462e12314c32d11.js","mappings":";;;;;;;;;;;;;;;;;;;;AAiBO,GAAMA,CAAAA,mBAAmB,CAAzB,cACA,GAAMC,CAAAA,sBAAsB,CAA5B,iBACA,GAAMC,CAAAA,uBAAuB,CAA7B,kBAEQ,4BAA6B,CACxC,GAAM,cAAkBC,mFAAxB,GACA,GAAM,qBAAyBC,8EAA/B,GAEAC,gDAAS,CACL,IACIC,WAAW,CAAC,CACR,CACIC,EAAE,CADN,oBAEIC,WAAW,CAFf,2BAGIC,OAAO,CAAEC,GAAG,EAAIA,GAAG,CAJf,OAIYA,EAHpB,CADQ,CAMR,CACIH,EAAE,CADN,uBAEIC,WAAW,CAFf,qBAGIC,OAAO,CAAEC,GAAG,EAAIA,GAAG,CATf,UASYA,EAHpB,CANQ,CAWR,CACIH,EAAE,CADN,wBAEIC,WAAW,CAFf,0EAIIG,IAAI,CAAE,gPAWRC,8FAA0B,GAA1BA,GAAAA,CACWC,CAAC,QAAUA,CAAC,CAAX,KADZD,KAAAA,EAAAA,IAAAA,CAXQ,IAWRA,CAXQ,yBAcLE,oGAA0B,GAA1BA,GAAAA,CACQD,CAAC,QAAUA,CAAC,CAAX,KADTC,KAAAA,EAAAA,IAAAA,CAdK,IAcLA,CAdK,uBAiBPC,yFAAqB,GAArBA,MAAAA,CACaC,EAAE,EAAI,CAACC,oFAAgB,CADpCF,EACoC,CADpCA,EAAAA,GAAAA,CAEUF,CAAC,QAAUA,CAAC,CAAX,QAFXE,KAAAA,EAAAA,IAAAA,CAjBO,IAiBPA,CAjBO,CAJV,KA0BIN,OAAO,0HAAE,mBAAuC,CAC5C,GAAM,OAAN,KACA,GAAMS,CAAAA,IAAI,CAAGN,8FAA0B,GAA1BA,IAAAA,CACTO,CAAC,EAAIA,CAAC,CAADA,IAAAA,GADT,IAAaP,CAAb,CAGA,QAAU,CACNQ,kBAAkB,CAAlBA,IAAkB,CAAlBA,CACA,OAEJ,IAAMC,CAAAA,GAAG,CAAGP,oGAA0B,GAA1BA,IAAAA,CACRQ,CAAC,EAAIA,CAAC,CAADA,IAAAA,GADT,IAAYR,CAAZ,CAGA,OAAS,CACLS,4FAAkB,KAAlBA,GAAkB,CAAlBA,CACA,OAGJ,IAAMC,CAAAA,GAAG,CAAGC,gGAA4B,CAAxC,IAAwC,CAAxC,CACA,OAAS,CACLC,8GAAoC,KAEhCF,GAAG,CAFPE,eAAoC,CAApCA,CAIA,OAEJ,IAAMnB,CAAAA,EAAE,CAAGoB,oFAAe,CAA1B,IAA0B,CAA1B,CACA,MAAQ,CACJD,8GAAoC,KAApCA,EAAoC,CAApCA,CACA,OAEJ,MAAM,6BAAN,YAAM,CAAN,CA9BG,kFAvCd,CAuCc,EA1BX,CAXQ,CAAD,CAFV,CAATrB,EAAS,CAATA,CA2EA,YACH","sources":["webpack://jacdac-docs/./src/components/commands/SimulatorCommands.ts"],"sourcesContent":["import {\n    addServiceProvider,\n    serviceProviderDefinitions,\n    startServiceProviderFromServiceClass,\n} from \"../../../jacdac-ts/src/servers/servers\"\nimport { useEffect } from \"react\"\nimport { useCommandPalette } from \"./CommandPaletteContext\"\nimport { parseIdentifier } from \"../../../jacdac-ts/src/jdom/utils\"\nimport {\n    isInfrastructure,\n    serviceSpecificationFromName,\n    serviceSpecifications,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport useHostedSimulators, {\n    hostedSimulatorDefinitions,\n} from \"../HostedSimulatorsContext\"\n\nexport const COMMAND_BUS_CONNECT = \"bus.connect\"\nexport const COMMAND_BUS_DISCONNECT = \"bus.disconnect\"\nexport const COMMAND_SIMULATOR_START = \"simulator.start\"\n\nexport default function SimulatorCommands() {\n    const { addCommands } = useCommandPalette()\n    const { addHostedSimulator } = useHostedSimulators()\n\n    useEffect(\n        () =>\n            addCommands([\n                {\n                    id: COMMAND_BUS_CONNECT,\n                    description: \"start connecting the bus\",\n                    handler: bus => bus.connect(),\n                },\n                {\n                    id: COMMAND_BUS_DISCONNECT,\n                    description: \"disconnect the bus\",\n                    handler: bus => bus.disconnect(),\n                },\n                {\n                    id: COMMAND_SIMULATOR_START,\n                    description:\n                        \"Starts a simulator from a named template, service name or service class\",\n                    help: () => `\nThis command launches a simulator from the list of existing simulator templates.\n\n\\`\\`\\`typescript\n    ...\n    args: {\n        // template name, service name or service class\n        name: string \n    }\n\\`\\`\\`\n\n* hosted names: ${hostedSimulatorDefinitions()\n                        .map(s => `\\`\"${s.name}\"\\``)\n                        .join(\", \")}\n* simulator names: ${serviceProviderDefinitions()\n                        .map(s => `\\`\"${s.name}\"\\``)\n                        .join(\", \")}\n* service names: ${serviceSpecifications()\n                        .filter(sc => !isInfrastructure(sc))\n                        .map(s => `\\`\"${s.shortId}\"\\``)\n                        .join(\", \")}\n`,\n                    handler: async (bus, args: { name: string }) => {\n                        const { name } = args\n                        const hdef = hostedSimulatorDefinitions().find(\n                            h => h.name === name\n                        )\n                        if (hdef) {\n                            addHostedSimulator(hdef)\n                            return\n                        }\n                        const def = serviceProviderDefinitions().find(\n                            d => d.name === name\n                        )\n                        if (def) {\n                            addServiceProvider(bus, def)\n                            return\n                        }\n\n                        const srv = serviceSpecificationFromName(name)\n                        if (srv) {\n                            startServiceProviderFromServiceClass(\n                                bus,\n                                srv.classIdentifier\n                            )\n                            return\n                        }\n                        const id = parseIdentifier(name)\n                        if (id) {\n                            startServiceProviderFromServiceClass(bus, id)\n                            return\n                        }\n                        throw new Error(`simulator ${name} not found`)\n                    },\n                },\n            ]),\n        []\n    )\n    return null\n}\n"],"names":["COMMAND_BUS_CONNECT","COMMAND_BUS_DISCONNECT","COMMAND_SIMULATOR_START","useCommandPalette","useHostedSimulators","useEffect","addCommands","id","description","handler","bus","help","hostedSimulatorDefinitions","s","serviceProviderDefinitions","serviceSpecifications","sc","isInfrastructure","hdef","h","addHostedSimulator","def","d","addServiceProvider","srv","serviceSpecificationFromName","startServiceProviderFromServiceClass","parseIdentifier"],"sourceRoot":""}