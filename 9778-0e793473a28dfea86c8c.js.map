{"version":3,"file":"9778-0e793473a28dfea86c8c.js","mappings":";;;;;;;;;;;;;;;;AAMA,qBAAsB,CAClB,GAAMA,CAAAA,UAAU,CAAGC,8CAAO,CACtB,gEACI,8BACA,CAAC,sBAAC,iBAAD,wEAAC,gCAAD,4BAAC,CAAD,0CAAC,sBAFN,OAEK,CAFL,CADsB,EAA1B,EAA0B,CAA1B,CAMA,MAAO,CAAP,UAAO,CAAP,CAGJ,CAAe,gCAA8C,CACzD,GAAM,aAAiBC,UAAvB,GACA,GAAM,yBAAwBC,+CAAQ,CAAtC,KAAsC,CAAtC,CACA,GAAM,qCAAoCA,+CAAQ,CAAlD,IAAkD,CAAlD,CACA,GAAM,kBAAsBC,uEAA5B,GACA,GAAM,aAAiBC,yEAAvB,GAEA;AACAC,0EAAc,CACV;AADU,sBAGVC,CAAC,EAAI,CACDC,UAAU,CAAVA,mBAAU,CAAVA,CACAD,CAAC,CAADA,cAAAA,GACAE,UAAU,CAAVA,IAAU,CAAVA,CACAC,gBAAgB,CAAhBA,CAAgB,CAAhBA,CAPM,QAAdJ,EAAc,CAAdA,CAaA;AACAA,0EAAc,gBAAwB,IAAM,CACxCE,UAAU,CAAVA,eAAU,CAAVA,CACAC,UAAU,CAAVA,KAAU,CAAVA,CACAE,eAAe,yBAAfA,SAAe,CAAfA,CAHJL,CAAc,CAAdA,CAMA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAEI,GAAI,UAAJ,WAA4B,YAE5B,GAAMM,CAAAA,OAAO,mIAAG,cAAoD,CAChEC,GAAG,CAAHA,cAAAA,GACA,KAAMC,CAAAA,aAAN,OAAMA,EAAAA,aAAN,SAAMA,CAAN,MAAMA,CAAAA,aAAa,CAAnB,MAAMA,EAAN,CAFS,SAAPF,SAAAA,CAAAA,OAAAA,CAAO,EAAPA,CAAO,qCAAb,CAAa,EAAb,CAIA,mBACI,+HACI,IAAI,CADR,QAEI,aAFJ,sBAGI,KAAK,CAHT,sBAII,OAAO,CAJX,QAKI,OAAO,CALX,mBADJ,SACI,CADJ,CAYH","sources":["webpack://jacdac-docs/./src/components/ui/InstallPWAButton.tsx"],"sourcesContent":["import React, { useMemo, useState } from \"react\"\nimport useWindowEvent from \"../hooks/useWindowEvent\"\nimport { Button, ButtonProps } from \"@mui/material\"\nimport useAnalytics from \"../hooks/useAnalytics\"\nimport useSnackbar from \"../hooks/useSnackbar\"\n\nfunction usePWAInfo() {\n    const standAlone = useMemo(\n        () =>\n            typeof window !== \"undefined\" &&\n            !!window.matchMedia?.(\"(display-mode: standalone)\")?.matches,\n        []\n    )\n    return { standAlone }\n}\n\nexport default function InstallPWAButton(props: ButtonProps) {\n    const { standAlone } = usePWAInfo()\n    const [visible, setVisible] = useState(false)\n    const [promptInstall, setPromptInstall] = useState(null)\n    const { enqueueSnackbar } = useSnackbar()\n    const { trackEvent } = useAnalytics()\n\n    // listen for prompt\n    useWindowEvent(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        \"beforeinstallprompt\" as any,\n        e => {\n            trackEvent(\"app.beforeinstall\")\n            e.preventDefault()\n            setVisible(true)\n            setPromptInstall(e)\n        },\n        false,\n        []\n    )\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    useWindowEvent(\"appinstalled\" as any, () => {\n        trackEvent(\"app.installed\")\n        setVisible(false)\n        enqueueSnackbar(\"Jacdac app installed!\", \"success\")\n    })\n\n    // detect installed apps\n    /*\n    useEffectAsync(async () => {\n        if (\n            typeof window === \"undefined\" ||\n            !(\"getInstalledRelatedApps\" in navigator)\n        )\n            return\n\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const apps = await (navigator as any).getInstalledRelatedApps()\n            console.log(\"installed apps\", { apps })\n        } catch (e) {\n            console.debug(e)\n        }\n    }, [])\n    */\n\n    if (!visible || standAlone) return null\n\n    const onClick = async (evt: React.MouseEvent<HTMLButtonElement>) => {\n        evt.preventDefault()\n        await promptInstall?.prompt()\n    }\n    return (\n        <Button\n            size=\"small\"\n            aria-label=\"Install application\"\n            title=\"Install application\"\n            onClick={onClick}\n            variant=\"outlined\"\n            {...props}\n        >\n            Install\n        </Button>\n    )\n}\n"],"names":["standAlone","useMemo","usePWAInfo","useState","useSnackbar","useAnalytics","useWindowEvent","e","trackEvent","setVisible","setPromptInstall","enqueueSnackbar","onClick","evt","promptInstall"],"sourceRoot":""}