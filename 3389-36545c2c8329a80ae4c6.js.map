{"version":3,"file":"3389-36545c2c8329a80ae4c6.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAoBe,gCAAwD,CACnE,GAAM,UAAN,MAEA,GAAMA,CAAAA,eAAe,CAAGC,uEAAW,SAAUC,gGAAV,CAAnC,CACA,GAAMC,CAAAA,eAAe,CAAGF,uEAAW,SAAUC,gGAAV,CAAnC,CACA,GAAM,UAAYE,4FAAwB,iBAA1C,KAA0C,CAA1C,CACA,GAAMC,CAAAA,OAAO,CAAGC,wFAAoB,iBAApC,KAAoC,CAApC,CACA,GAAM,CAAEC,IAAI,CAAN,QAAmBC,4EAAa,SAAtC,KAAsC,CAAtC,CACA,GAAMC,CAAAA,GAAG,CAAG,CAAZ,QAEA,GAAMC,CAAAA,MAAM,CAAGC,4EAAgB,CAA/B,OAA+B,CAA/B,CACA,GAAMC,CAAAA,KAAK,CAAGF,MAAM,aAApB,UACA,GAAM,gDACFG,4EAAc,CADlB,KACkB,CADlB,CAGA,GAAIC,OAAO,GAAX,UACI,mBAAO,mIAAgC,QAAQ,CAA/C,eAAO,EAAP,CAEJ,GAAMC,CAAAA,WAAW,CAAGC,MAAM,GAAKC,+GAA/B,CAEA,GAAMC,CAAAA,CAAC,CAAP,GACA,GAAMC,CAAAA,CAAC,CAAP,GACA,GAAMC,CAAAA,EAAE,CAAR,EACA,GAAMC,CAAAA,CAAC,CAAG,CAACH,CAAC,EAAF,GAAV,EACA,GAAMI,CAAAA,EAAE,CAAR,EACA,GAAMC,CAAAA,EAAE,CAAGL,CAAC,EAAZ,EACA,GAAMM,CAAAA,EAAE,CAAGL,CAAC,EAAZ,EACA,GAAMM,CAAAA,EAAE,CAAR,EACA,GAAMC,CAAAA,EAAE,CAAR,EACA,GAAMC,CAAAA,GAAG,CAAT,EAEA,GAAMC,CAAAA,YAAY,oIAAG,sBAAoD,CACrE,KAAMlB,CAAAA,MAAN,OAAMA,EAAAA,MAAN,SAAMA,CAAN,MAAMA,CAAAA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,CAA0B,CAAhC,QAAgC,CAA1BA,CAAN,CACAV,eAAe,CAAfA,OAAAA,GAFc,SAAZ4B,SAAAA,CAAAA,YAAAA,CAAY,EAAZA,CAAY,GAAZA,CAAY,qCAAlB,CAAkB,EAAlB,CAIA,GAAMC,CAAAA,YAAY,CAAIC,KAAD,EAAsBC,IAAI,CAAJA,KAAAA,CAAtB,KAAsBA,EAA3C,OACA,GAAMC,CAAAA,SAAS,CAAG,IAAM7B,eAAe,CAAfA,gBAAAA,CAAAA,GAAAA,CAAxB,IAAwBA,CAAxB,CACA,GAAM8B,CAAAA,UAAU,CAAhB,0BAEA,mBACI,mHAAM,SAAS,CAAf,KAAgB,SAAS,CAAzB,uBACI,mHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,sHAAW,KAAK,CAAhB,EAAqB,MAAM,CAA3B,EAAgC,IAAI,CAApC,yBACI,2DACI,EAAE,CADN,GAEI,EAAE,CAFN,GAGI,CAAC,CAHL,EAII,IAAI,CAJR,kBAKI,MAAM,CALV,WAMI,WAAW,CAPnB,EACI,EADJ,cASI,sDACI,SAAS,YAAYxB,GAAG,GAAf,eAAkCS,CAAC,EAAnC,SACLC,CAAC,EADI,GADb,kBAKI,yDACI,CAAC,OAAOI,EAAE,CAAT,SACGC,EAAE,CAAGC,EAAE,CADV,+BAEwB,CAFxB,EADL,KAII,IAAI,CAJR,WAKI,MAAM,CALV,WAMI,WAAW,CAXnB,EAKI,EALJ,cAaI,yDACI,CAAC,OAAOF,EAAE,CAAT,SACGC,EAAE,CAAGC,EAAE,CADV,gBAEW,CAFX,iBADL,KAII,MAAM,CAJV,WAKI,IAAI,CAAEhB,GAAG,mBALb,OAMI,WAAW,CA5BvB,EAsBQ,EAbJ,CATJ,CA+BKM,WAAW,eACR,2DACI,EAAE,CADN,GAEI,EAAE,CAFN,GAGI,CAAC,CAHL,EAII,OAAO,CAJX,IAKI,IAAI,CArChB,UAgCQ,EAhCR,CAwCKA,WAAW,eACR,uEAAM,CAAC,CAAP,GAAa,CAAC,CAAd,GAAoB,QAAQ,CAA5B,cAzCR,aAyCQ,CAzCR,cA6CI,wHACI,CAAC,CADL,GAEI,EAAE,CAFN,IAGI,EAAE,CAAEG,CAAC,CAADA,EAAAA,CAHR,EAII,EAAE,CAAEC,CAAC,CAADA,EAAAA,CAJR,EAKI,KAAK,CALT,MAMI,WAAW,CANf,EAOI,GAAG,CAPP,IAQI,OAAO,CAvDvB,SA+CY,EA7CJ,CADJ,CADJ,CA2DKT,MAAM,eACH,mHAAM,IAAI,CAAV,mBACI,mHACI,KAAK,CADT,MAEI,iBAAiB,CAFrB,OAGI,gBAAgB,CAHpB,aAII,GAAG,CAJP,EAKI,GAAG,CALP,IAMI,IAAI,CANR,EAOI,KAAK,CAPT,QAQI,QAAQ,CARZ,aASI,aAvEpB,SA8DgB,EADJ,CA5DR,CADJ,CA6EH;;;;;;;;;;;;;AChIc,uCAGb,CACE,GAAMwB,CAAAA,QAAQ,CAAGjC,uEAAW,SAAUkC,qGAAV,CAA5B,CACA,GAAM,CAAC5B,IAAI,CAAL,EAAW6B,UAAU,CAArB,GAA6BhC,4FAAwB,UAA3D,OAA2D,CAA3D,CAIA,MAAO,MAAP,UAAO,CAAP,CACH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardCompass.tsx","webpack://jacdac-docs/./src/components/services/useStatusCode.ts"],"sourcesContent":["import React from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { Grid, Slider } from \"@mui/material\"\nimport { SensorServer } from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport {\n    CompassReg,\n    SystemStatusCodes,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport PowerButton from \"../widgets/PowerButton\"\nimport useRegister from \"../hooks/useRegister\"\nimport useStatusCode from \"../services/useStatusCode\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\n\nexport default function DashboardCompass(props: DashboardServiceProps) {\n    const { service } = props\n\n    const headingRegister = useRegister(service, CompassReg.Heading)\n    const enabledRegister = useRegister(service, CompassReg.Enabled)\n    const [heading] = useRegisterUnpackedValue<[number]>(headingRegister, props)\n    const enabled = useRegisterBoolValue(enabledRegister, props)\n    const { code: status } = useStatusCode(service, props)\n    const off = !enabled\n\n    const server = useServiceServer<SensorServer<[number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active, textProps } =\n        useWidgetTheme(color)\n\n    if (heading === undefined)\n        return <DashboardRegisterValueFallback register={headingRegister} />\n\n    const calibrating = status === SystemStatusCodes.Calibrating\n\n    const w = 64\n    const h = 64\n    const mw = 5\n    const r = (w >> 1) - 4\n    const sw = 3\n    const cx = w >> 1\n    const cy = h >> 1\n    const sp = 1\n    const pr = 5\n    const pri = 3\n\n    const handleChange = async (ev: unknown, newValue: number | number[]) => {\n        await server?.reading.setValues([newValue as number])\n        headingRegister.refresh()\n    }\n    const valueDisplay = (angle: number) => `${Math.round(angle)}Â°`\n    const toggleOff = () => enabledRegister.sendSetBoolAsync(off, true)\n    const widgetSize = `clamp(3rem, 10vw, 10vh)`\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h} size={widgetSize}>\n                    <circle\n                        cx={cx}\n                        cy={cy}\n                        r={r}\n                        fill={controlBackground}\n                        stroke={background}\n                        strokeWidth={sw}\n                    />\n                    <g\n                        transform={`rotate(${off ? 0 : heading}, ${w >> 1}, ${\n                            h >> 1\n                        })`}\n                    >\n                        <path\n                            d={`M ${cx - mw} ${\n                                cy + sp / 2\n                            } l ${mw} ${r} l ${mw} ${-r} z`}\n                            fill={background}\n                            stroke={background}\n                            strokeWidth={sp}\n                        />\n                        <path\n                            d={`M ${cx - mw} ${\n                                cy - sp / 2\n                            } l ${mw} ${-r} l ${mw} ${r} z`}\n                            stroke={background}\n                            fill={off ? controlBackground : active}\n                            strokeWidth={sp}\n                        />\n                    </g>\n                    {calibrating && (\n                        <circle\n                            cx={cx}\n                            cy={cy}\n                            r={r}\n                            opacity={0.9}\n                            fill={background}\n                        />\n                    )}\n                    {calibrating && (\n                        <text x={cx} y={cy} fontSize={8} {...textProps}>\n                            calibrating\n                        </text>\n                    )}\n                    <PowerButton\n                        r={pr}\n                        ri={pri}\n                        cx={w - pr - 1}\n                        cy={h - pr - 1}\n                        color={color}\n                        strokeWidth={1}\n                        off={off}\n                        onClick={toggleOff}\n                    />\n                </SvgWidget>\n            </Grid>\n            {server && (\n                <Grid item>\n                    <Slider\n                        color={color}\n                        valueLabelDisplay=\"auto\"\n                        valueLabelFormat={valueDisplay}\n                        min={0}\n                        max={360}\n                        step={1}\n                        value={heading}\n                        onChange={handleChange}\n                        aria-label=\"heading\"\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import { SystemReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    RegisterOptions,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function useStatusCode(\n    service: JDService,\n    options?: RegisterOptions\n) {\n    const register = useRegister(service, SystemReg.StatusCode)\n    const [code = 0, vendorCode = 0] = useRegisterUnpackedValue<[number, number]>(\n        register,\n        options\n    )\n    return { code, vendorCode }\n}\n"],"names":["headingRegister","useRegister","CompassReg","enabledRegister","useRegisterUnpackedValue","enabled","useRegisterBoolValue","code","useStatusCode","off","server","useServiceServer","color","useWidgetTheme","heading","calibrating","status","SystemStatusCodes","w","h","mw","r","sw","cx","cy","sp","pr","pri","handleChange","valueDisplay","angle","Math","toggleOff","widgetSize","register","SystemReg","vendorCode"],"sourceRoot":""}