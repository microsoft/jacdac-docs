{"version":3,"file":"4097-a4cf1377c6c7b76a762f.js","mappings":";;;;;;;;;;;;;;;;;;;;AAUe,gCAGZ,CACC,GAAM,kBAAN,MACA,GAAMA,CAAAA,IAAI,CAAG,CAAC,CAAd,QACA,GAAMC,CAAAA,QAAQ,CAAGC,4CAAjB,GACA,GAAMC,CAAAA,OAAO,CAAGF,QAAQ,CAAxB,SACA,GAAMG,CAAAA,WAAW,CAAGC,mFAApB,GACA,GAAMC,CAAAA,KAAK,CAAGC,sEAAS,aAAcC,EAAE,EAAIA,EAAJ,OAAIA,EAAAA,EAAJ,SAAIA,CAAJ,MAAIA,CAAAA,EAAE,CAAFA,eAAAA,CAApB,OAAoBA,CAApB,CAAkD,CAAzE,OAAyE,CAAlD,CAAvB,CAGA,GAAMC,CAAAA,WAAW,CAAGF,sEAAS,SAAUG,GAAG,EAAIA,GAAG,CAAjD,IAA6B,CAA7B,CACA,GAAMC,CAAAA,QAAQ,CAAG,CAAC,EAACL,KAAD,OAACA,EAAAA,KAAD,SAACA,EAAAA,KAAK,CAAxB,MAAkB,CAAlB,CAEA,GAAMM,CAAAA,WAAW,CAAIC,IAAD,gHAAgB,WAAY,CAC5C,KAAMT,CAAAA,WAAW,CAAXA,OAAAA,CAAAA,OAAAA,CAA6BS,IAAI,CAAvC,IAAMT,CAAN,CACAU,OAAO,GAFX,CAAoB,CAApB,CAKA,mBACI,iHACI,EAAE,CADN,SAEI,kBAFJ,QAGI,IAAI,CAHR,KAII,OAAO,CAJX,sBAMI,4HAAsB,OAAO,CAA7B,QAAwC,EAAE,CAA1C,SACKH,QAAQ,iBAPjB,mBAMI,CANJ,cASI,qHACKA,QAAQ,cACL,qHACKL,KAAK,CAALA,GAAAA,CAAUO,IAAI,eACX,0HACI,GAAG,CAAEA,IAAI,CADb,KAEI,IAAI,CAFR,KAGI,QAAQ,CAAEJ,WAAW,GAAKI,IAAI,CAHlC,KAII,OAAO,CAAED,WAAW,CAP3B,IAO2B,CAJxB,EADHN,CADL,CADK,cAYL,iHAAY,OAAO,CAAnB,SAvBhB,qBAuBgB,CAbR,CATJ,CADJ,CA4BH","sources":["webpack://jacdac-docs/./src/components/dialogs/SelectRoleDialog.tsx"],"sourcesContent":["import { Dialog, DialogContent, List, Typography } from \"@mui/material\"\nimport React from \"react\"\nimport { useId } from \"react\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport useRoleManagerClient from \"../services/useRoleManagerClient\"\nimport useChange from \"../../jacdac/useChange\"\nimport RoleListItem from \"../services/RoleListItem\"\nimport { Role } from \"../../../jacdac-ts/src/jdom/clients/rolemanagerclient\"\nimport DialogTitleWithClose from \"../ui/DialogTitleWithClose\"\n\nexport default function SelectRoleDialog(props: {\n    service: JDService\n    onClose: () => void\n}) {\n    const { service, onClose } = props\n    const open = !!service\n    const dialogId = useId()\n    const labelId = dialogId + \"-label\"\n    const roleManager = useRoleManagerClient()\n    const roles = useChange(roleManager, rm => rm?.compatibleRoles(service), [\n        service,\n    ])\n    const currentRole = useChange(service, srv => srv.role)\n    const hasRoles = !!roles?.length\n\n    const handleClick = (role: Role) => async () => {\n        await roleManager.setRole(service, role.name)\n        onClose()\n    }\n\n    return (\n        <Dialog\n            id={dialogId}\n            aria-labelledby={labelId}\n            open={open}\n            onClose={onClose}\n        >\n            <DialogTitleWithClose onClose={onClose} id={labelId}>\n                {hasRoles ? `Select a role` : `No role available`}\n            </DialogTitleWithClose>\n            <DialogContent>\n                {hasRoles ? (\n                    <List>\n                        {roles.map(role => (\n                            <RoleListItem\n                                key={role.name}\n                                role={role}\n                                selected={currentRole === role.name}\n                                onClick={handleClick(role)}\n                            />\n                        ))}\n                    </List>\n                ) : (\n                    <Typography variant=\"body1\">No roles available.</Typography>\n                )}\n            </DialogContent>\n        </Dialog>\n    )\n}\n"],"names":["open","dialogId","useId","labelId","roleManager","useRoleManagerClient","roles","useChange","rm","currentRole","srv","hasRoles","handleClick","role","onClose"],"sourceRoot":""}