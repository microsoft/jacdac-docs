{"version":3,"file":"1084-a2457e1c1cdb67aca3cd.js","mappings":";;;;;;;;;;;;AAQe,yCAGb,CACE,GAAMA,CAAAA,oBAAoB,CAAGC,uEAAW,SAAUC,yGAAV,CAAxC,CACA,GAAM,eAAiBC,4FAAwB,sBAA/C,OAA+C,CAA/C,CAIA,oBACH;;;;;;;;;;;;;;;;;;;;;oDCfD;AAEA;AAEA;AAEA;AACA;AAKA,GAAMC,CAAAA,MAAM,CAAZ,eACA,GAAMC,CAAAA,OAAO,CAAG,CACZC,IAAI,CAAKF,MAAL,CADQ,OAEZG,OAAO,CAAKH,MAAL,CAFX,SAAgB,CAAhB,CAIA,GAAMI,CAAAA,cAAc,CAAGC,0EAAM,CAANA,kEAAM,CAANA,CAAiB,UAAC,CAAD,KAAC,EAAD,WAAgB,CACpD,MAAMJ,OAAO,CAAb,MAAuB,CACnBK,QAAQ,CAFwC,CAC7B,CAD6B,CAKpD,MAAML,OAAO,CAAb,SAA0B,CACtBM,UAAU,CAAEC,KAAK,CAALA,OAAAA,CADU,GACVA,CADU,CAEtBC,WAAW,CAAED,KAAK,CAALA,OAAAA,CAPmB,GAOnBA,CAFS,CAL0B,CAAhB,CAAxC,CAAuBH,CAAvB,CAWe,4BAAgD,CAC3D,GAAM,kCAAN,MAA6CK,KAA7C,+HAEA,GAAM,2BAA0BC,+CAAQ,CAAWC,eAAe,EAAlE,EAAwC,CAAxC,CACA,GAAM,2BAA0BD,+CAAQ,CAAWE,eAAe,EAAlE,EAAwC,CAAxC,CACA,GAAMC,CAAAA,OAAO,CAAGC,sEAAU,CAAC,CAAEC,oBAAoB,CAAE,CAACC,6FAAzB,CAAD,CAA1B,CAEA,GAAMC,CAAAA,YAAY,CAAG,iBAGhB,CACDC,WAAW,CAAXA,OAAW,CAAXA,CAJJ,EAOA,GAAMC,CAAAA,YAAY,CAAG,iBAGhB,CACDC,WAAW,CAAXA,OAAW,CAAXA,CAJJ,EAOA,mBACI,iEACI,SAAS,CAAEC,yDAAI,CAACrB,OAAO,CAAR,KAAeA,OAAO,CADzC,OACmB,CADnB,CAEI,mBAAmB,cAAE,oIAFzB,IAEyB,CAFzB,CAGI,iBAAiB,cAAE,iIAHvB,IAGuB,CAHvB,CAII,cAAc,cAAE,wDAAK,KAAK,CAAE,CAAEsB,KAAK,CAJvC,EAIgC,CAAZ,EAJpB,CAKI,QAAQ,CALZ,SAMI,QAAQ,CANZ,SAOI,YAAY,CAPhB,aAQI,YAAY,CARhB,cAUKT,OAVL,OAUKA,EAAAA,OAVL,SAUKA,CAVL,MAUKA,CAAAA,OAAO,CAAPA,GAAAA,CAAaU,MAAM,eAChB,yIACI,GAAG,CAAEA,MAAM,CADf,GAEI,MAAM,CAFV,OAGI,QAAQ,CAHZ,SAII,QAAQ,CAJZ,UAZZ,KAYY,EADHV,CAVL,CADJ,CAsBH","sources":["webpack://jacdac-docs/./src/components/services/useInstanceName.ts","webpack://jacdac-docs/./src/components/tools/JDomTreeView.tsx"],"sourcesContent":["import { SystemReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    RegisterOptions,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function useInstanceName(\n    service: JDService,\n    options?: RegisterOptions\n) {\n    const instanceNameRegister = useRegister(service, SystemReg.InstanceName)\n    const [instanceName] = useRegisterUnpackedValue<[string]>(\n        instanceNameRegister,\n        options\n    )\n    return instanceName\n}\n","import React, { lazy, useContext, useState } from \"react\"\nimport { styled } from \"@mui/material/styles\"\nimport clsx from \"clsx\"\n// tslint:disable-next-line: no-submodule-imports\nimport TreeView from \"@mui/lab/TreeView\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport useDevices from \"../hooks/useDevices\"\nimport { DeviceTreeItem, JDomTreeViewProps } from \"./JDomTreeViewItems\"\nimport { Flags } from \"../../../jacdac-ts/src/jdom/flags\"\n\nconst PREFIX = \"JDomTreeView\"\nconst classes = {\n    root: `${PREFIX}root`,\n    margins: `${PREFIX}margins`,\n}\nconst StyledTreeView = styled(TreeView)(({ theme }) => ({\n    [`&.${classes.root}`]: {\n        flexGrow: 1,\n    },\n\n    [`&.${classes.margins}`]: {\n        marginLeft: theme.spacing(0.5),\n        marginRight: theme.spacing(0.5),\n    },\n}))\n\nexport default function JDomTreeView(props: JDomTreeViewProps) {\n    const { defaultExpanded, defaultSelected, ...other } = props\n\n    const [expanded, setExpanded] = useState<string[]>(defaultExpanded || [])\n    const [selected, setSelected] = useState<string[]>(defaultSelected || [])\n    const devices = useDevices({ ignoreInfrastructure: !Flags.diagnostics })\n\n    const handleToggle = (\n        event: React.ChangeEvent<unknown>,\n        nodeIds: string[]\n    ) => {\n        setExpanded(nodeIds)\n    }\n\n    const handleSelect = (\n        event: React.ChangeEvent<unknown>,\n        nodeIds: string[]\n    ) => {\n        setSelected(nodeIds)\n    }\n\n    return (\n        <StyledTreeView\n            className={clsx(classes.root, classes.margins)}\n            defaultCollapseIcon={<ArrowDropDownIcon />}\n            defaultExpandIcon={<ArrowRightIcon />}\n            defaultEndIcon={<div style={{ width: 12 }} />}\n            expanded={expanded}\n            selected={selected}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n        >\n            {devices?.map(device => (\n                <DeviceTreeItem\n                    key={device.id}\n                    device={device}\n                    expanded={expanded}\n                    selected={selected}\n                    {...other}\n                />\n            ))}\n        </StyledTreeView>\n    )\n}\n"],"names":["instanceNameRegister","useRegister","SystemReg","useRegisterUnpackedValue","PREFIX","classes","root","margins","StyledTreeView","styled","flexGrow","marginLeft","theme","marginRight","other","useState","defaultExpanded","defaultSelected","devices","useDevices","ignoreInfrastructure","Flags","handleToggle","setExpanded","handleSelect","setSelected","clsx","width","device"],"sourceRoot":""}