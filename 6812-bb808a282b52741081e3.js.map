{"version":3,"file":"6812-bb808a282b52741081e3.js","mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,6BAA6B;AAC3C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4BAA4B;AACxC;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,MAAM;AACN,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,CAAC;AACD","sources":["webpack://jacdac-docs/./src/workers/vm/dist/node_modules/vm-worker.js"],"sourcesContent":["(() => {\n  // vm-worker.ts\n  importScripts(\n    \"https://microsoft.github.io/devicescript/dist/devicescript-vm.js\"\n  );\n  console.log(Module);\n  var init = Module().then((m) => {\n    m.sendPacket = (data) => {\n      self.postMessage({\n        worker: \"vm\",\n        type: \"packet\",\n        data\n      });\n    };\n    m.devsStart();\n    return m;\n  });\n  var handlers = {\n    packet: (props) => {\n      const { data } = props;\n      init.then((m) => m.handlePacket(data));\n      return void 0;\n    },\n    // not used\n    deploy: async (props) => {\n      const { binary, debugInfo, restart } = props;\n      const Module2 = await init;\n      const verificationError = Module2.devsDeploy(binary);\n      if (verificationError != 0) {\n        console.log(\"verification error: \" + verificationError);\n        return { verificationError };\n      }\n      return {};\n    }\n  };\n  function processMessage(message) {\n    try {\n      const handler = handlers[message.type];\n      return handler?.(message);\n    } catch (e) {\n      console.debug(e);\n      return void 0;\n    }\n  }\n  async function handleMessage(event) {\n    const message = event.data;\n    const { id, worker, type, ...rest } = message;\n    if (worker !== \"vm\")\n      return;\n    try {\n      const result = await processMessage(message);\n      if (result) {\n        const resp = { id, worker, ...rest, ...result };\n        self.postMessage(resp);\n      }\n    } catch (e) {\n      console.debug(`devicescript vm: error ${e + \"\"}`, e);\n      self.postMessage({\n        id,\n        type,\n        worker,\n        error: e + \"\"\n      });\n    }\n  }\n  self.addEventListener(\"message\", handleMessage);\n  console.debug(`devicescript vm: worker registered`);\n})();\n//# sourceMappingURL=vm-worker.js.map\n"],"names":[],"sourceRoot":""}