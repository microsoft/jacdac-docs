{"version":3,"file":"6301-0304293f62f6cffbf183.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/widgets/ServoWidget.tsx","webpack://jacdac-docs/./src/components/dashboard/DashboardServo.tsx"],"sourcesContent":["import React, { useRef } from \"react\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport PowerButton from \"./PowerButton\"\nimport useAnimationFrame from \"../hooks/useAnimationFrame\"\n\nexport default function ServoWidget(props: {\n    angle: number\n    offset: number\n    color: \"primary\" | \"secondary\"\n    enabled?: boolean\n    toggleOff?: () => void\n    widgetSize?: string\n    rotationRate?: number\n    visible?: boolean\n}) {\n    const {\n        widgetSize,\n        toggleOff,\n        angle,\n        offset,\n        color,\n        enabled,\n        rotationRate,\n        visible,\n    } = props\n    const { background, controlBackground, active, textPrimary, textProps } =\n        useWidgetTheme(color)\n    const continuous = rotationRate !== undefined\n    const offsetRef = useRef(0)\n    const armRef = useRef<SVGPathElement>()\n    const textRef = useRef<SVGTextElement>()\n\n    const cx = 78\n    const cy = 55\n\n    const a = enabled ? angle + (offset || 0) : 90\n    const transform = `rotate(${-a + 90}, ${cx}, ${cy})`\n    const h = 111.406\n    const w = 158.50195\n    const pr = 14\n    const pri = 6\n    const text = enabled ? `${Math.round(a)}Â°` : \"off\"\n\n    useAnimationFrame(\n        continuous && enabled && visible && rotationRate !== undefined\n            ? time => {\n                  const arm = armRef.current\n                  if (!arm) return\n                  const text = textRef.current\n\n                  let offset = offsetRef.current\n                  offset = (offset + (time / 1000) * rotationRate) % 360\n                  offsetRef.current = offset\n                  const transform = `rotate(${offset}, ${cx}, ${cy})`\n                  arm.setAttribute(\"transform\", transform)\n                  text.childNodes[0].nodeValue = `${Math.round(\n                      rotationRate / 360 * 60\n                  )}rpm`\n\n                  return true\n              }\n            : undefined,\n        [continuous, visible, enabled, rotationRate]\n    )\n\n    return (\n        <SvgWidget\n            title={`servo at angle ${angle}`}\n            width={w}\n            height={h}\n            size={widgetSize}\n        >\n            <rect\n                fill={background}\n                x={0}\n                y={10.687}\n                width={158.62}\n                height={89.75}\n                rx={4}\n                ry={4}\n            />\n            <path\n                fill={controlBackground}\n                d=\"M125.545 55.641c0-24.994-20.26-45.256-45.254-45.256-17.882.016-34.077 9.446-41.328 25.79-2.655.024-4.192.076-6.35.07-11.158 0-20.204 9.046-20.204 20.204 0 11.158 9.046 20.203 20.203 20.203 2.389-.005 4.354-.332 6.997-.256 7.56 15.59 23.356 24.485 40.682 24.5 24.992 0 45.254-20.264 45.254-45.256z\"\n            />\n            <path\n                ref={armRef}\n                fill={enabled ? active : background}\n                stroke={active}\n                transform={transform}\n                d=\"M93.782 55.623c-.032-3.809-.19-6.403-.352-7.023h-.002c-.93-3.558-6.621-6.73-14.793-6.73-8.17 0-14.649 3.016-14.795 6.73-.25 6.419-4.049 62.795 13.561 62.806 14.308.008 16.52-39.277 16.38-55.783zm-8.05.08a7.178 7.178 0 010 .012 7.178 7.178 0 01-7.179 7.176 7.178 7.178 0 01-7.177-7.176 7.178 7.178 0 017.177-7.178 7.178 7.178 0 017.178 7.166z\"\n            />\n            <text\n                ref={textRef}\n                {...textProps}\n                x={w / 2}\n                y={30}\n                textAnchor=\"middle\"\n                fill={textPrimary}\n            >\n                {text}\n            </text>\n            {toggleOff && (\n                <PowerButton\n                    r={pr}\n                    ri={pri}\n                    cx={w - pr - 4}\n                    cy={pr + 14}\n                    color={color}\n                    strokeWidth={1.5}\n                    off={!enabled}\n                    onClick={toggleOff}\n                />\n            )}\n        </SvgWidget>\n    )\n}\n","import React from \"react\"\nimport { BaseReg, ServoReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useThrottledValue from \"../hooks/useThrottledValue\"\nimport { SG90_RESPONSE_SPEED } from \"../../../jacdac-ts/src/servers/servers\"\nimport { Grid, Slider } from \"@mui/material\"\nimport { ServoServer } from \"../../../jacdac-ts/src/servers/servoserver\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport ServoWidget from \"../widgets/ServoWidget\"\nimport useRegister from \"../hooks/useRegister\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\n\nfunction useActualAngle(service: JDService, visible: boolean) {\n    const angleRegister = useRegister(service, ServoReg.Angle)\n    const [angle] = useRegisterUnpackedValue<[number]>(angleRegister, {\n        visible,\n    })\n    const actualAngleRegister = useRegister(service, ServoReg.ActualAngle)\n    const [actualAngle] = useRegisterUnpackedValue<[number]>(\n        actualAngleRegister,\n        {\n            visible,\n        }\n    )\n    // sec/60deg\n    const responseSpeedRegister = useRegister(service, ServoReg.ResponseSpeed)\n    const [responseSpeed = SG90_RESPONSE_SPEED] = useRegisterUnpackedValue<\n        [number]\n    >(responseSpeedRegister, { visible })\n    const rotationalSpeed = 60 / responseSpeed\n    const computedAngle = useThrottledValue(angle, rotationalSpeed)\n\n    return actualAngle !== undefined ? actualAngle : computedAngle\n}\n\nexport default function DashboardServo(props: DashboardServiceProps) {\n    const { service, visible } = props\n\n    const enabledRegister = useRegister(service, ServoReg.Enabled)\n    const enabled = useRegisterBoolValue(enabledRegister, props)\n    const angleRegister = useRegister(service, ServoReg.Angle)\n    const angle = useActualAngle(service, visible)\n    const offsetRegister = useRegister(service, ServoReg.Offset)\n    const [offset] = useRegisterUnpackedValue<[number]>(offsetRegister, props)\n    const clientVariantRegister = useRegister(service, BaseReg.ClientVariant)\n    const [clientVariant] = useRegisterUnpackedValue<[string]>(\n        clientVariantRegister,\n        props\n    )\n    const minAngleRegister = useRegister(service, ServoReg.MinAngle)\n    const [minAngle] = useRegisterUnpackedValue<[number]>(\n        minAngleRegister,\n        props\n    )\n    const maxAngleRegister = useRegister(service, ServoReg.MaxAngle)\n    const [maxAngle] = useRegisterUnpackedValue<[number]>(\n        maxAngleRegister,\n        props\n    )\n    const responseSpeedRegister = useRegister(service, ServoReg.ResponseSpeed)\n    const [responseSpeed = SG90_RESPONSE_SPEED] = useRegisterUnpackedValue<\n        [number]\n    >(responseSpeedRegister, { visible })\n    const server = useServiceServer<ServoServer>(service)\n\n    if (angle === undefined)\n        return <DashboardRegisterValueFallback register={angleRegister} />\n    if (minAngle === undefined)\n        return <DashboardRegisterValueFallback register={minAngleRegister} />\n    if (maxAngle === undefined)\n        return <DashboardRegisterValueFallback register={maxAngleRegister} />\n\n    const rotationalSpeed = 60 / responseSpeed\n\n    const continuous = /cont=1/.test(clientVariant)\n    const throttle = ((angle - minAngle) / (maxAngle - minAngle)) * 200 - 100\n\n    const color = server ? \"secondary\" : \"primary\"\n\n    const toggleOff = () => enabledRegister.sendSetBoolAsync(!enabled, true)\n    const widgetSize = `clamp(6rem, 16vw, 16vh)`\n    const readOnly = false\n\n    const label = continuous ? \"Throttle (%)\" : \"Angle\"\n    const angleFormat = (a: number) => `${Math.round(a)}`\n    const continuousFormat = (throttle: number) => {\n        return Math.round(throttle) + \"%\"\n    }\n    const handleContinuousChange = (\n        ev: unknown,\n        newValue: number | number[]\n    ) => {\n        const newAngle =\n            (0.5 + (newValue as number) / 200) * (maxAngle - minAngle) +\n            minAngle\n        angleRegister.sendSetPackedAsync([newAngle], true)\n    }\n    const handleAngleChange = (ev: unknown, newValue: number | number[]) =>\n        angleRegister.sendSetPackedAsync([newValue as number], true)\n\n    return (\n        <Grid container alignContent=\"center\">\n            <Grid item xs={12}>\n                <ServoWidget\n                    angle={angle}\n                    offset={offset}\n                    color={color}\n                    enabled={enabled}\n                    toggleOff={toggleOff}\n                    widgetSize={widgetSize}\n                    rotationRate={\n                        continuous\n                            ? (throttle * rotationalSpeed) / 100\n                            : undefined\n                    }\n                    visible={visible}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                {continuous ? (\n                    <Slider\n                        aria-label={label}\n                        color={color}\n                        value={throttle}\n                        valueLabelFormat={continuousFormat}\n                        onChange={readOnly ? undefined : handleContinuousChange}\n                        min={-100}\n                        max={100}\n                        step={10}\n                        valueLabelDisplay=\"auto\"\n                    />\n                ) : (\n                    <Slider\n                        aria-label={label}\n                        color={color}\n                        value={angle}\n                        valueLabelFormat={angleFormat}\n                        onChange={readOnly ? undefined : handleAngleChange}\n                        min={minAngle}\n                        max={maxAngle}\n                        step={5}\n                        valueLabelDisplay=\"auto\"\n                    />\n                )}\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["useWidgetTheme","continuous","rotationRate","offsetRef","useRef","armRef","textRef","cx","cy","a","enabled","angle","offset","transform","h","w","pr","pri","text","Math","useAnimationFrame","time","arm","toggleOff","angleRegister","useRegister","ServoReg","useRegisterUnpackedValue","actualAngleRegister","responseSpeedRegister","responseSpeed","rotationalSpeed","computedAngle","useThrottledValue","actualAngle","enabledRegister","useRegisterBoolValue","useActualAngle","offsetRegister","clientVariantRegister","BaseReg","minAngleRegister","maxAngleRegister","server","useServiceServer","minAngle","maxAngle","throttle","color","widgetSize","readOnly","label","angleFormat","continuousFormat","handleContinuousChange","newAngle","newValue","handleAngleChange"],"sourceRoot":""}