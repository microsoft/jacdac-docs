{"version":3,"file":"2544c2700771a4c44b8ec71bb041eb4bb4b49cea-cd064fb8bb7141ec5729.js","mappings":";;;;;;;AAAa;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;AACnF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;AACf,4CAA4C,mBAAO,CAAC,KAAuB;AAC3E,kBAAkB,mBAAO,CAAC,KAAmB;AAC7C;AACA;AACA,CAAC;AACD,SAAe;;;;;;;;ACZF;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;AACnF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;AACf,4CAA4C,mBAAO,CAAC,KAAuB;AAC3E,kBAAkB,mBAAO,CAAC,KAAmB;AAC7C;AACA;AACA,CAAC;AACD,SAAe;;;;;;;;ACZF;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;AACnF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;AACf,4CAA4C,mBAAO,CAAC,KAAuB;AAC3E,kBAAkB,mBAAO,CAAC,KAAmB;AAC7C;AACA;AACA,CAAC;AACD,SAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZuD;AACI;AACnE;AACP,SAAS,uCAAoB;AAC7B;AACA,wBAAwB,yCAAsB;AAC9C,6DAAe,+DAAe;;;;ACN4B;AAC0C;AACpG;AAC+B;AACP;AACW;AACoC;AACD;AACkC;AACxD;AACG;AACS;AACZ;AAChD;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,SAAS,iCAAc,QAAQ,uBAAuB;AACtD;AACA,qBAAqB,0BAAM;AAC3B;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB;AAC9C,gBAAgB,gCAAa;AAC7B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,YAAY,+CAA6B;AACzC,gBAAgB,2BAAQ;AACxB;AACA,qBAAqB,8BAAQ,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,iBAAiB,wBAAK;AACtB,kBAAkB,YAAY;AAC9B,oBAAoB,6BAAU;AAC9B,4CAA4C,cAAc;AAC1D,kBAAkB,YAAY,GAAG;AACjC,uBAAuB,YAAY,GAAG;AACtC,uCAAuC,gCAAa;AACpD;AACA;AACA;AACA;AACA,GAAG;AACH,uCAAuC,gCAAa;AACpD;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC,uBAAuB,iBAAiB;AACxC,qBAAqB,iBAAiB;AACtC,qBAAqB,iBAAiB;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,YAAY;AACvC,gCAAgC,YAAY;AAC5C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,yBAAyB,iBAAiB;AAC1C,mBAAmB,8BAAQ,GAAG;AAC9B;AACA;AACA;AACA,yDAAyD,gCAAa;AACtE;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,uBAAuB,iBAAiB;AACxC;AACA,GAAG;AACH,yBAAyB,iBAAiB;AAC1C,mBAAmB,8BAAQ,GAAG;AAC9B;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbsBAAsB,mBAAI,CAAC,gDAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2BAA2B,mBAAI,CAAC,qCAAkB;AAClD,6BAA6B,mBAAI,eAAe,8BAAQ;AACxD;AACA;AACA;AACA;AACA,mBAAmB,yBAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH,CAAC;AACD,MAAqC,GAAG,CAiHvC,CAAC;AACF,sDAAe,QAAQ;;;;;;;;ACv0BQ;;AAE/B;AACA;AACA;AACA,qCAAqC,gDAAmB,GAAG;AAC3D,IAAI,KAAqC,EAAE,EAE1C;AACD,yDAAe,eAAe;;;;;;;;;;;;;;;;ACTsE;AAC1C;AAC1D;AAC+B;AACI;AACmD;;AAEtF;AACA;AACA;;AAEA;AACgD;AAChD;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,uCAAuC,gDAAmB,GAAG;AAC7D,IAAI,KAAqC,EAAE,EAE1C;AACD;AACA,cAAc,yCAAY;AAC1B,EAAE,4CAAe;AACjB;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,0BAA0B,2CAAc;AACxC;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,6CAAgB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,EAAE,wEAAiB;AACnB;AACA,yBAAyB,uFAAQ,GAAG;AACpC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,IAAI;AACJ,uBAAuB,2CAAc;AACrC,6BAA6B,8CAAiB;AAC9C;AACA;AACA,QAAQ;AACR,cAAc,4GAA6B;AAC3C;AACA;AACA;AACA;AACA,gBAAgB,uFAAQ,GAAG;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,uFAAQ,GAAG;AACnC;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,GAAG;AACH,+BAA+B,8CAAiB;AAChD;AACA,GAAG;AACH,gBAAgB,0CAAa;AAC7B;AACA;AACA;AACA;AACA,GAAG;AACH,sBAAsB,sDAAI;AAC1B;AACA;AACA,GAAG;AACH;AACA,MAAqC,GAAG,CAGvC,CAAC;;;;;;;;;;;;;;ACnLa,qCAAoF,CAC/F,GAAM,sBAAN,MACA,GAAM,iDAAN,OAEA,GAAMA,CAAAA,IAAI,CAAG,UAETC,KAAK,EAFI,QAGTC,aAAa,CAAGC,wHAAhBD,EAHS,SAITA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AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnE0D;AAC0C;AACpG;AAC+B;AACP;AACW;AACK;;AAExC;AACA;AACA;AACgD;AACE;AAClD,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,YAAY,+CAA6B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,WAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,oBAAK,QAAQ,8BAAQ;AACzB,iBAAiB,yBAAI;AACrB;AACA;AACA;AACA,KAAK;AACL,8BAA8B,mBAAI;AAClC;AACA;AACA,OAAO,gBAAgB,mBAAI;AAC3B;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,CAAC;AACD,MAAqC,GAAG,CA0CvC,CAAC;AACF,6DAAe,eAAe;;;;;;AC/GwC;AACI;AACnE;AACP,SAAS,uCAAoB;AAC7B;AACA,wBAAwB,yCAAsB;AAC9C,6DAAe,eAAe;;ACNsE;AAC1C;AAC1D,MAAM,iBAAS;AACgB;AACP;AACW;AACkB;AACP;AACsB;AACa;AACX;AACZ;AACkB;AAC5B;AAC6B;AAC7B;AACE;AAClD;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iCAAc,QAAQ,uBAAuB;AACtD;AACA,qBAAqB,0BAAM;AAC3B;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD,8BAA8B,0BAAM,CAAC,wBAAe;AACpD;AACA;AACA;AACA;AACA,aAAa,sCAA6B,CAAC;AAC3C,KAAK;AACL,aAAa,8BAAqB,CAAC;AACnC,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,QAAQ,iCAAwB,CAAC;AACjC;AACA;AACA,GAAG;AACH,QAAQ,gCAAuB,CAAC;AAChC;AACA,GAAG;AACH,QAAQ,iCAAwB,CAAC;AACjC,0CAA0C,wCAAwC,IAAI,0CAA0C,KAAK,kCAAK;AAC1I;AACA,4CAA4C,wCAAwC,SAAS,2CAA2C,IAAI,uCAAuC,MAAM,kCAAK;AAC9L;AACA;AACA,8CAA8C,wCAAwC,IAAI,0CAA0C,KAAK,kCAAK;AAC9I;AACA,KAAK;AACL,UAAU,gCAAuB,CAAC;AAClC,4CAA4C,wCAAwC,SAAS,2CAA2C,IAAI,uCAAuC,MAAM,kCAAK;AAC9L;AACA,GAAG;AACH,SAAS,sCAA6B,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,SAAS,8BAAqB,CAAC,IAAI,8BAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD,sBAAsB,0BAAM,CAAC,uBAAQ;AACrC;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD,8BAA8B,gBAAgB;AAC9C,gBAAgB,gCAAa;AAC7B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,yBAAyB,wBAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAQ;AACpC;AACA,MAAM;AACN,YAAY,+CAA6B,QAAQ,iBAAS;AAC1D;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,gBAAgB,CAAC,8BAAe;AACtC;AACA;AACA;AACA,IAAI;AACJ,YAAY,OAAO,GAAG,OAAO;AAC7B;AACA,gDAAgD,cAAc;AAC9D,qBAAqB,YAAY;AACjC,oBAAoB,6BAAU;AAC9B,qBAAqB,aAAa;AAClC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI,EAAE,oCAAa;AACnB;AACA;AACA;AACA;AACA;AACA,qBAAqB,8BAAQ,GAAG;AAChC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gCAAa;AACnB;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oBAAK,eAAe,8BAAQ;AAClD,eAAe,yBAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,4BAA4B,mBAAI,wBAAwB,8BAAQ;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,2CAA2C,mBAAI,CAAC,qCAAkB;AACvE;AACA,6BAA6B,mBAAI,gBAAgB,8BAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH,CAAC;AACD,MAAqC,GAAG,CAuFvC,CAAC;AACF,sDAAe,QAAQ;;;;;;;;;;;;;;uKCpXvB,GAAME,CAAAA,MAAM,CAAZ,iBAEA,GAAMC,CAAAA,OAAO,CAAG,CACZC,IAAI,CAAKF,MAAL,CADQ,OAEZG,OAAO,CAAKH,MAAL,CAFK,UAGZI,KAAK,CAAKJ,MAAL,CAHO,QAIZK,QAAQ,CAAKL,MAAL,CAJI,WAKZM,QAAQ,CAAKN,MAAL,CALI,WAMZO,KAAK,CAAKP,MAAL,CANO,QAOZQ,SAAS,CAAKR,MAAL,CAPG,YAQZS,SAAS,CAAKT,MAAL,CARG,YASZvB,SAAS,CAAKuB,MAAL,CATb,WAAgB,CAAhB,CAYA,GAAMU,CAAAA,IAA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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/ArrowDropDown.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/ArrowRight.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Warning.js","webpack://jacdac-docs/./node_modules/@mui/lab/TreeView/treeViewClasses.js","webpack://jacdac-docs/./node_modules/@mui/lab/TreeView/TreeView.js","webpack://jacdac-docs/./node_modules/@mui/lab/TreeView/TreeViewContext.js","webpack://jacdac-docs/./node_modules/@mui/lab/TreeView/descendants.js","webpack://jacdac-docs/./src/components/devices/AnnounceFlagsTreeItem.tsx","webpack://jacdac-docs/./src/components/hooks/useBestRegister.ts","webpack://jacdac-docs/./src/components/devices/DeviceInformationTreeItem.tsx","webpack://jacdac-docs/./src/components/tools/JDomTreeViewItems.tsx","webpack://jacdac-docs/./node_modules/@mui/lab/TreeItem/useTreeItem.js","webpack://jacdac-docs/./node_modules/@mui/lab/TreeItem/TreeItemContent.js","webpack://jacdac-docs/./node_modules/@mui/lab/TreeItem/treeItemClasses.js","webpack://jacdac-docs/./node_modules/@mui/lab/TreeItem/TreeItem.js","webpack://jacdac-docs/./src/components/ui/StyledTreeItem.tsx","webpack://jacdac-docs/./src/jacdac/useEventCount.ts","webpack://jacdac-docs/./src/jacdac/useServiceSpecification.ts"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m7 10 5 5 5-5z\"\n}), 'ArrowDropDown');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m10 17 5-5-5-5v10z\"\n}), 'ArrowRight');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\"\n}), 'Warning');\nexports.default = _default;","import generateUtilityClass from '@mui/material/generateUtilityClass';\nimport generateUtilityClasses from '@mui/material/generateUtilityClasses';\nexport function getTreeViewUtilityClass(slot) {\n  return generateUtilityClass('MuiTreeView', slot);\n}\nconst treeViewClasses = generateUtilityClasses('MuiTreeView', ['root']);\nexport default treeViewClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"defaultSelected\", \"disabledItemsFocusable\", \"disableSelection\", \"expanded\", \"id\", \"multiSelect\", \"onBlur\", \"onFocus\", \"onKeyDown\", \"onNodeFocus\", \"onNodeSelect\", \"onNodeToggle\", \"selected\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useTheme, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useControlled, useForkRef, ownerDocument, unstable_useId as useId } from '@mui/material/utils';\nimport TreeViewContext from './TreeViewContext';\nimport { DescendantProvider } from './descendants';\nimport { getTreeViewUtilityClass } from './treeViewClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTreeViewUtilityClass, classes);\n};\nconst TreeViewRoot = styled('ul', {\n  name: 'MuiTreeView',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: 0,\n  margin: 0,\n  listStyle: 'none',\n  outline: 0\n});\nfunction isPrintableCharacter(string) {\n  return string && string.length === 1 && string.match(/\\S/);\n}\nfunction findNextFirstChar(firstChars, startIndex, char) {\n  for (let i = startIndex; i < firstChars.length; i += 1) {\n    if (char === firstChars[i]) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction noopSelection() {\n  return false;\n}\nconst defaultDefaultExpanded = [];\nconst defaultDefaultSelected = [];\nconst TreeView = /*#__PURE__*/React.forwardRef(function TreeView(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeView'\n  });\n  const {\n      children,\n      className,\n      defaultCollapseIcon,\n      defaultEndIcon,\n      defaultExpanded = defaultDefaultExpanded,\n      defaultExpandIcon,\n      defaultParentIcon,\n      defaultSelected = defaultDefaultSelected,\n      disabledItemsFocusable = false,\n      disableSelection = false,\n      expanded: expandedProp,\n      id: idProp,\n      multiSelect = false,\n      onBlur,\n      onFocus,\n      onKeyDown,\n      onNodeFocus,\n      onNodeSelect,\n      onNodeToggle,\n      selected: selectedProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const theme = useTheme();\n  const isRtl = theme.direction === 'rtl';\n  const ownerState = _extends({}, props, {\n    defaultExpanded,\n    defaultSelected,\n    disabledItemsFocusable,\n    disableSelection,\n    multiSelect\n  });\n  const classes = useUtilityClasses(ownerState);\n  const treeId = useId(idProp);\n  const treeRef = React.useRef(null);\n  const handleRef = useForkRef(treeRef, ref);\n  const [focusedNodeId, setFocusedNodeId] = React.useState(null);\n  const nodeMap = React.useRef({});\n  const firstCharMap = React.useRef({});\n  const [expanded, setExpandedState] = useControlled({\n    controlled: expandedProp,\n    default: defaultExpanded,\n    name: 'TreeView',\n    state: 'expanded'\n  });\n  const [selected, setSelectedState] = useControlled({\n    controlled: selectedProp,\n    default: defaultSelected,\n    name: 'TreeView',\n    state: 'selected'\n  });\n\n  /*\n   * Status Helpers\n   */\n  const isExpanded = React.useCallback(id => Array.isArray(expanded) ? expanded.indexOf(id) !== -1 : false, [expanded]);\n  const isExpandable = React.useCallback(id => nodeMap.current[id] && nodeMap.current[id].expandable, []);\n  const isSelected = React.useCallback(id => Array.isArray(selected) ? selected.indexOf(id) !== -1 : selected === id, [selected]);\n  const isDisabled = React.useCallback(id => {\n    let node = nodeMap.current[id];\n\n    // This can be called before the node has been added to the node map.\n    if (!node) {\n      return false;\n    }\n    if (node.disabled) {\n      return true;\n    }\n    while (node.parentId != null) {\n      node = nodeMap.current[node.parentId];\n      if (node.disabled) {\n        return true;\n      }\n    }\n    return false;\n  }, []);\n  const isFocused = id => focusedNodeId === id;\n\n  /*\n   * Child Helpers\n   */\n\n  // Using Object.keys -> .map to mimic Object.values we should replace with Object.values() once we stop IE11 support.\n  const getChildrenIds = id => Object.keys(nodeMap.current).map(key => {\n    return nodeMap.current[key];\n  }).filter(node => node.parentId === id).sort((a, b) => a.index - b.index).map(child => child.id);\n  const getNavigableChildrenIds = id => {\n    let childrenIds = getChildrenIds(id);\n    if (!disabledItemsFocusable) {\n      childrenIds = childrenIds.filter(node => !isDisabled(node));\n    }\n    return childrenIds;\n  };\n\n  /*\n   * Node Helpers\n   */\n\n  const getNextNode = id => {\n    // If expanded get first child\n    if (isExpanded(id) && getNavigableChildrenIds(id).length > 0) {\n      return getNavigableChildrenIds(id)[0];\n    }\n    let node = nodeMap.current[id];\n    while (node != null) {\n      // Try to get next sibling\n      const siblings = getNavigableChildrenIds(node.parentId);\n      const nextSibling = siblings[siblings.indexOf(node.id) + 1];\n      if (nextSibling) {\n        return nextSibling;\n      }\n\n      // If the sibling does not exist, go up a level to the parent and try again.\n      node = nodeMap.current[node.parentId];\n    }\n    return null;\n  };\n  const getPreviousNode = id => {\n    const node = nodeMap.current[id];\n    const siblings = getNavigableChildrenIds(node.parentId);\n    const nodeIndex = siblings.indexOf(id);\n    if (nodeIndex === 0) {\n      return node.parentId;\n    }\n    let currentNode = siblings[nodeIndex - 1];\n    while (isExpanded(currentNode) && getNavigableChildrenIds(currentNode).length > 0) {\n      currentNode = getNavigableChildrenIds(currentNode).pop();\n    }\n    return currentNode;\n  };\n  const getLastNode = () => {\n    let lastNode = getNavigableChildrenIds(null).pop();\n    while (isExpanded(lastNode)) {\n      lastNode = getNavigableChildrenIds(lastNode).pop();\n    }\n    return lastNode;\n  };\n  const getFirstNode = () => getNavigableChildrenIds(null)[0];\n  const getParent = id => nodeMap.current[id].parentId;\n\n  /**\n   * This is used to determine the start and end of a selection range so\n   * we can get the nodes between the two border nodes.\n   *\n   * It finds the nodes' common ancestor using\n   * a naive implementation of a lowest common ancestor algorithm\n   * (https://en.wikipedia.org/wiki/Lowest_common_ancestor).\n   * Then compares the ancestor's 2 children that are ancestors of nodeA and NodeB\n   * so we can compare their indexes to work out which node comes first in a depth first search.\n   * (https://en.wikipedia.org/wiki/Depth-first_search)\n   *\n   * Another way to put it is which node is shallower in a trémaux tree\n   * https://en.wikipedia.org/wiki/Tr%C3%A9maux_tree\n   */\n  const findOrderInTremauxTree = (nodeAId, nodeBId) => {\n    if (nodeAId === nodeBId) {\n      return [nodeAId, nodeBId];\n    }\n    const nodeA = nodeMap.current[nodeAId];\n    const nodeB = nodeMap.current[nodeBId];\n    if (nodeA.parentId === nodeB.id || nodeB.parentId === nodeA.id) {\n      return nodeB.parentId === nodeA.id ? [nodeA.id, nodeB.id] : [nodeB.id, nodeA.id];\n    }\n    const aFamily = [nodeA.id];\n    const bFamily = [nodeB.id];\n    let aAncestor = nodeA.parentId;\n    let bAncestor = nodeB.parentId;\n    let aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n    let bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n    let continueA = true;\n    let continueB = true;\n    while (!bAncestorIsCommon && !aAncestorIsCommon) {\n      if (continueA) {\n        aFamily.push(aAncestor);\n        aAncestorIsCommon = bFamily.indexOf(aAncestor) !== -1;\n        continueA = aAncestor !== null;\n        if (!aAncestorIsCommon && continueA) {\n          aAncestor = nodeMap.current[aAncestor].parentId;\n        }\n      }\n      if (continueB && !aAncestorIsCommon) {\n        bFamily.push(bAncestor);\n        bAncestorIsCommon = aFamily.indexOf(bAncestor) !== -1;\n        continueB = bAncestor !== null;\n        if (!bAncestorIsCommon && continueB) {\n          bAncestor = nodeMap.current[bAncestor].parentId;\n        }\n      }\n    }\n    const commonAncestor = aAncestorIsCommon ? aAncestor : bAncestor;\n    const ancestorFamily = getChildrenIds(commonAncestor);\n    const aSide = aFamily[aFamily.indexOf(commonAncestor) - 1];\n    const bSide = bFamily[bFamily.indexOf(commonAncestor) - 1];\n    return ancestorFamily.indexOf(aSide) < ancestorFamily.indexOf(bSide) ? [nodeAId, nodeBId] : [nodeBId, nodeAId];\n  };\n  const getNodesInRange = (nodeA, nodeB) => {\n    const [first, last] = findOrderInTremauxTree(nodeA, nodeB);\n    const nodes = [first];\n    let current = first;\n    while (current !== last) {\n      current = getNextNode(current);\n      nodes.push(current);\n    }\n    return nodes;\n  };\n\n  /*\n   * Focus Helpers\n   */\n\n  const focus = (event, id) => {\n    if (id) {\n      setFocusedNodeId(id);\n      if (onNodeFocus) {\n        onNodeFocus(event, id);\n      }\n    }\n  };\n  const focusNextNode = (event, id) => focus(event, getNextNode(id));\n  const focusPreviousNode = (event, id) => focus(event, getPreviousNode(id));\n  const focusFirstNode = event => focus(event, getFirstNode());\n  const focusLastNode = event => focus(event, getLastNode());\n  const focusByFirstCharacter = (event, id, char) => {\n    let start;\n    let index;\n    const lowercaseChar = char.toLowerCase();\n    const firstCharIds = [];\n    const firstChars = [];\n    // This really only works since the ids are strings\n    Object.keys(firstCharMap.current).forEach(nodeId => {\n      const firstChar = firstCharMap.current[nodeId];\n      const map = nodeMap.current[nodeId];\n      const visible = map.parentId ? isExpanded(map.parentId) : true;\n      const shouldBeSkipped = disabledItemsFocusable ? false : isDisabled(nodeId);\n      if (visible && !shouldBeSkipped) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    });\n\n    // Get start index for search based on position of currentItem\n    start = firstCharIds.indexOf(id) + 1;\n    if (start >= firstCharIds.length) {\n      start = 0;\n    }\n\n    // Check remaining slots in the menu\n    index = findNextFirstChar(firstChars, start, lowercaseChar);\n\n    // If not found in remaining slots, check from beginning\n    if (index === -1) {\n      index = findNextFirstChar(firstChars, 0, lowercaseChar);\n    }\n\n    // If match was found...\n    if (index > -1) {\n      focus(event, firstCharIds[index]);\n    }\n  };\n\n  /*\n   * Expansion Helpers\n   */\n\n  const toggleExpansion = (event, value = focusedNodeId) => {\n    let newExpanded;\n    if (expanded.indexOf(value) !== -1) {\n      newExpanded = expanded.filter(id => id !== value);\n    } else {\n      newExpanded = [value].concat(expanded);\n    }\n    if (onNodeToggle) {\n      onNodeToggle(event, newExpanded);\n    }\n    setExpandedState(newExpanded);\n  };\n  const expandAllSiblings = (event, id) => {\n    const map = nodeMap.current[id];\n    const siblings = getChildrenIds(map.parentId);\n    const diff = siblings.filter(child => isExpandable(child) && !isExpanded(child));\n    const newExpanded = expanded.concat(diff);\n    if (diff.length > 0) {\n      setExpandedState(newExpanded);\n      if (onNodeToggle) {\n        onNodeToggle(event, newExpanded);\n      }\n    }\n  };\n\n  /*\n   * Selection Helpers\n   */\n\n  const lastSelectedNode = React.useRef(null);\n  const lastSelectionWasRange = React.useRef(false);\n  const currentRangeSelection = React.useRef([]);\n  const handleRangeArrowSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      next,\n      current\n    } = nodes;\n    if (!next || !current) {\n      return;\n    }\n    if (currentRangeSelection.current.indexOf(current) === -1) {\n      currentRangeSelection.current = [];\n    }\n    if (lastSelectionWasRange.current) {\n      if (currentRangeSelection.current.indexOf(next) !== -1) {\n        base = base.filter(id => id === start || id !== current);\n        currentRangeSelection.current = currentRangeSelection.current.filter(id => id === start || id !== current);\n      } else {\n        base.push(next);\n        currentRangeSelection.current.push(next);\n      }\n    } else {\n      base.push(next);\n      currentRangeSelection.current.push(current, next);\n    }\n    if (onNodeSelect) {\n      onNodeSelect(event, base);\n    }\n    setSelectedState(base);\n  };\n  const handleRangeSelect = (event, nodes) => {\n    let base = selected.slice();\n    const {\n      start,\n      end\n    } = nodes;\n    // If last selection was a range selection ignore nodes that were selected.\n    if (lastSelectionWasRange.current) {\n      base = base.filter(id => currentRangeSelection.current.indexOf(id) === -1);\n    }\n    let range = getNodesInRange(start, end);\n    range = range.filter(node => !isDisabled(node));\n    currentRangeSelection.current = range;\n    let newSelected = base.concat(range);\n    newSelected = newSelected.filter((id, i) => newSelected.indexOf(id) === i);\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n    setSelectedState(newSelected);\n  };\n  const handleMultipleSelect = (event, value) => {\n    let newSelected;\n    if (selected.indexOf(value) !== -1) {\n      newSelected = selected.filter(id => id !== value);\n    } else {\n      newSelected = [value].concat(selected);\n    }\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n    setSelectedState(newSelected);\n  };\n  const handleSingleSelect = (event, value) => {\n    const newSelected = multiSelect ? [value] : value;\n    if (onNodeSelect) {\n      onNodeSelect(event, newSelected);\n    }\n    setSelectedState(newSelected);\n  };\n  const selectNode = (event, id, multiple = false) => {\n    if (id) {\n      if (multiple) {\n        handleMultipleSelect(event, id);\n      } else {\n        handleSingleSelect(event, id);\n      }\n      lastSelectedNode.current = id;\n      lastSelectionWasRange.current = false;\n      currentRangeSelection.current = [];\n      return true;\n    }\n    return false;\n  };\n  const selectRange = (event, nodes, stacked = false) => {\n    const {\n      start = lastSelectedNode.current,\n      end,\n      current\n    } = nodes;\n    if (stacked) {\n      handleRangeArrowSelect(event, {\n        start,\n        next: end,\n        current\n      });\n    } else if (start != null && end != null) {\n      handleRangeSelect(event, {\n        start,\n        end\n      });\n    }\n    lastSelectionWasRange.current = true;\n  };\n  const rangeSelectToFirst = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getFirstNode()\n    });\n  };\n  const rangeSelectToLast = (event, id) => {\n    if (!lastSelectedNode.current) {\n      lastSelectedNode.current = id;\n    }\n    const start = lastSelectionWasRange.current ? lastSelectedNode.current : id;\n    selectRange(event, {\n      start,\n      end: getLastNode()\n    });\n  };\n  const selectNextNode = (event, id) => {\n    if (!isDisabled(getNextNode(id))) {\n      selectRange(event, {\n        end: getNextNode(id),\n        current: id\n      }, true);\n    }\n  };\n  const selectPreviousNode = (event, id) => {\n    if (!isDisabled(getPreviousNode(id))) {\n      selectRange(event, {\n        end: getPreviousNode(id),\n        current: id\n      }, true);\n    }\n  };\n  const selectAllNodes = event => {\n    selectRange(event, {\n      start: getFirstNode(),\n      end: getLastNode()\n    });\n  };\n\n  /*\n   * Mapping Helpers\n   */\n  const registerNode = React.useCallback(node => {\n    const {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    } = node;\n    nodeMap.current[id] = {\n      id,\n      index,\n      parentId,\n      expandable,\n      idAttribute,\n      disabled\n    };\n  }, []);\n  const unregisterNode = React.useCallback(id => {\n    const newMap = _extends({}, nodeMap.current);\n    delete newMap[id];\n    nodeMap.current = newMap;\n    setFocusedNodeId(oldFocusedNodeId => {\n      if (oldFocusedNodeId === id && treeRef.current === ownerDocument(treeRef.current).activeElement) {\n        return getChildrenIds(null)[0];\n      }\n      return oldFocusedNodeId;\n    });\n  }, []);\n  const mapFirstChar = React.useCallback((id, firstChar) => {\n    firstCharMap.current[id] = firstChar;\n  }, []);\n  const unMapFirstChar = React.useCallback(id => {\n    const newMap = _extends({}, firstCharMap.current);\n    delete newMap[id];\n    firstCharMap.current = newMap;\n  }, []);\n\n  /**\n   * Event handlers and Navigation\n   */\n\n  const handleNextArrow = event => {\n    if (isExpandable(focusedNodeId)) {\n      if (isExpanded(focusedNodeId)) {\n        focusNextNode(event, focusedNodeId);\n      } else if (!isDisabled(focusedNodeId)) {\n        toggleExpansion(event);\n      }\n    }\n    return true;\n  };\n  const handlePreviousArrow = event => {\n    if (isExpanded(focusedNodeId) && !isDisabled(focusedNodeId)) {\n      toggleExpansion(event, focusedNodeId);\n      return true;\n    }\n    const parent = getParent(focusedNodeId);\n    if (parent) {\n      focus(event, parent);\n      return true;\n    }\n    return false;\n  };\n  const handleKeyDown = event => {\n    let flag = false;\n    const key = event.key;\n\n    // If the tree is empty there will be no focused node\n    if (event.altKey || event.currentTarget !== event.target || !focusedNodeId) {\n      return;\n    }\n    const ctrlPressed = event.ctrlKey || event.metaKey;\n    switch (key) {\n      case ' ':\n        if (!disableSelection && !isDisabled(focusedNodeId)) {\n          if (multiSelect && event.shiftKey) {\n            selectRange(event, {\n              end: focusedNodeId\n            });\n            flag = true;\n          } else if (multiSelect) {\n            flag = selectNode(event, focusedNodeId, true);\n          } else {\n            flag = selectNode(event, focusedNodeId);\n          }\n        }\n        event.stopPropagation();\n        break;\n      case 'Enter':\n        if (!isDisabled(focusedNodeId)) {\n          if (isExpandable(focusedNodeId)) {\n            toggleExpansion(event);\n            flag = true;\n          } else if (multiSelect) {\n            flag = selectNode(event, focusedNodeId, true);\n          } else {\n            flag = selectNode(event, focusedNodeId);\n          }\n        }\n        event.stopPropagation();\n        break;\n      case 'ArrowDown':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectNextNode(event, focusedNodeId);\n        }\n        focusNextNode(event, focusedNodeId);\n        flag = true;\n        break;\n      case 'ArrowUp':\n        if (multiSelect && event.shiftKey && !disableSelection) {\n          selectPreviousNode(event, focusedNodeId);\n        }\n        focusPreviousNode(event, focusedNodeId);\n        flag = true;\n        break;\n      case 'ArrowRight':\n        if (isRtl) {\n          flag = handlePreviousArrow(event);\n        } else {\n          flag = handleNextArrow(event);\n        }\n        break;\n      case 'ArrowLeft':\n        if (isRtl) {\n          flag = handleNextArrow(event);\n        } else {\n          flag = handlePreviousArrow(event);\n        }\n        break;\n      case 'Home':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToFirst(event, focusedNodeId);\n        }\n        focusFirstNode(event);\n        flag = true;\n        break;\n      case 'End':\n        if (multiSelect && ctrlPressed && event.shiftKey && !disableSelection && !isDisabled(focusedNodeId)) {\n          rangeSelectToLast(event, focusedNodeId);\n        }\n        focusLastNode(event);\n        flag = true;\n        break;\n      default:\n        if (key === '*') {\n          expandAllSiblings(event, focusedNodeId);\n          flag = true;\n        } else if (multiSelect && ctrlPressed && key.toLowerCase() === 'a' && !disableSelection) {\n          selectAllNodes(event);\n          flag = true;\n        } else if (!ctrlPressed && !event.shiftKey && isPrintableCharacter(key)) {\n          focusByFirstCharacter(event, focusedNodeId, key);\n          flag = true;\n        }\n    }\n    if (flag) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n  const handleFocus = event => {\n    // if the event bubbled (which is React specific) we don't want to steal focus\n    if (event.target === event.currentTarget) {\n      const firstSelected = Array.isArray(selected) ? selected[0] : selected;\n      focus(event, firstSelected || getNavigableChildrenIds(null)[0]);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  const handleBlur = event => {\n    setFocusedNodeId(null);\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const activeDescendant = nodeMap.current[focusedNodeId] ? nodeMap.current[focusedNodeId].idAttribute : null;\n  return /*#__PURE__*/_jsx(TreeViewContext.Provider, {\n    // TODO: fix this lint error\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    value: {\n      icons: {\n        defaultCollapseIcon,\n        defaultExpandIcon,\n        defaultParentIcon,\n        defaultEndIcon\n      },\n      focus,\n      toggleExpansion,\n      isExpanded,\n      isExpandable,\n      isFocused,\n      isSelected,\n      isDisabled,\n      selectNode: disableSelection ? noopSelection : selectNode,\n      selectRange: disableSelection ? noopSelection : selectRange,\n      multiSelect,\n      disabledItemsFocusable,\n      mapFirstChar,\n      unMapFirstChar,\n      registerNode,\n      unregisterNode,\n      treeId\n    },\n    children: /*#__PURE__*/_jsx(DescendantProvider, {\n      children: /*#__PURE__*/_jsx(TreeViewRoot, _extends({\n        role: \"tree\",\n        id: treeId,\n        \"aria-activedescendant\": activeDescendant,\n        \"aria-multiselectable\": multiSelect,\n        className: clsx(classes.root, className),\n        ref: handleRef,\n        tabIndex: 0,\n        onKeyDown: handleKeyDown,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        ownerState: ownerState\n      }, other, {\n        children: children\n      }))\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n  /**\n   * Expanded node ids. (Uncontrolled)\n   * @default []\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n  /**\n   * Selected node ids. (Uncontrolled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   * @default []\n   */\n  defaultSelected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true` selection is disabled.\n   * @default false\n   */\n  disableSelection: PropTypes.bool,\n  /**\n   * Expanded node ids. (Controlled)\n   */\n  expanded: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n  /**\n   * If true `ctrl` and `shift` will trigger multiselect.\n   * @default false\n   */\n  multiSelect: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when tree items are focused.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback **Warning**: This is a generic event not a focus event.\n   * @param {string} value of the focused node.\n   */\n  onNodeFocus: PropTypes.func,\n  /**\n   * Callback fired when tree items are selected/unselected.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback\n   * @param {string[] | string} nodeIds Ids of the selected nodes. When `multiSelect` is true\n   * this is an array of strings; when false (default) a string.\n   */\n  onNodeSelect: PropTypes.func,\n  /**\n   * Callback fired when tree items are expanded/collapsed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {array} nodeIds The ids of the expanded nodes.\n   */\n  onNodeToggle: PropTypes.func,\n  /**\n   * Selected node ids. (Controlled)\n   * When `multiSelect` is true this takes an array of strings; when false (default) a string.\n   */\n  selected: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TreeView;","import * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst TreeViewContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  TreeViewContext.displayName = 'TreeViewContext';\n}\nexport default TreeViewContext;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"element\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\n\n/** Credit: https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/descendants/README.md\n *  Modified slightly to suit our purposes.\n */\n\n// To replace with .findIndex() once we stop IE11 support.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction binaryFindElement(array, element) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const middle = Math.floor((start + end) / 2);\n    if (array[middle].element === element) {\n      return middle;\n    }\n\n    // eslint-disable-next-line no-bitwise\n    if (array[middle].element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n  }\n  return start;\n}\nconst DescendantContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  DescendantContext.displayName = 'DescendantContext';\n}\nfunction usePrevious(value) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nconst noop = () => {};\n\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation.\n */\nexport function useDescendant(descendant) {\n  const [, forceUpdate] = React.useState();\n  const {\n    registerDescendant = noop,\n    unregisterDescendant = noop,\n    descendants = [],\n    parentId = null\n  } = React.useContext(DescendantContext);\n\n  // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n  const index = findIndex(descendants, item => item.element === descendant.element);\n  const previousDescendants = usePrevious(descendants);\n\n  // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n  const someDescendantsHaveChanged = descendants.some((newDescendant, position) => {\n    return previousDescendants && previousDescendants[position] && previousDescendants[position].element !== newDescendant.element;\n  });\n\n  // Prevent any flashing\n  useEnhancedEffect(() => {\n    if (descendant.element) {\n      registerDescendant(_extends({}, descendant, {\n        index\n      }));\n      return () => {\n        unregisterDescendant(descendant.element);\n      };\n    }\n    forceUpdate({});\n    return undefined;\n  }, [registerDescendant, unregisterDescendant, index, someDescendantsHaveChanged, descendant]);\n  return {\n    parentId,\n    index\n  };\n}\nexport function DescendantProvider(props) {\n  const {\n    children,\n    id\n  } = props;\n  const [items, set] = React.useState([]);\n  const registerDescendant = React.useCallback(_ref => {\n    let {\n        element\n      } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n    set(oldItems => {\n      let newItems;\n      if (oldItems.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        return [_extends({}, other, {\n          element,\n          index: 0\n        })];\n      }\n      const index = binaryFindElement(oldItems, element);\n      if (oldItems[index] && oldItems[index].element === element) {\n        // If the element is already registered, just use the same array\n        newItems = oldItems;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n\n        const newItem = _extends({}, other, {\n          element,\n          index\n        });\n\n        // If an index is not found we will push the element to the end.\n        newItems = oldItems.slice();\n        newItems.splice(index, 0, newItem);\n      }\n      newItems.forEach((item, position) => {\n        item.index = position;\n      });\n      return newItems;\n    });\n  }, []);\n  const unregisterDescendant = React.useCallback(element => {\n    set(oldItems => oldItems.filter(item => element !== item.element));\n  }, []);\n  const value = React.useMemo(() => ({\n    descendants: items,\n    registerDescendant,\n    unregisterDescendant,\n    parentId: id\n  }), [items, registerDescendant, unregisterDescendant, id]);\n  return /*#__PURE__*/_jsx(DescendantContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DescendantProvider.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string\n} : void 0;","import { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport React from \"react\"\nimport StyledTreeItem from \"../ui/StyledTreeItem\"\nimport { ControlAnnounceFlags } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport DeviceActions from \"./DeviceActions\"\n\nexport default function AnnounceFlagsTreeItem(props: { device: JDDevice, showIdentify?: boolean }) {\n    const { device, showIdentify } = props\n    const { announceFlags, id, deviceId, restartCounter, proxy } = device\n\n    const text = [\n        deviceId,\n        proxy && \"proxy\",\n        announceFlags & ControlAnnounceFlags.IsClient && \"client\",\n        announceFlags & ControlAnnounceFlags.SupportsACK && \"acks\",\n        announceFlags & ControlAnnounceFlags.SupportsBroadcast && \"broadcast\",\n        announceFlags & ControlAnnounceFlags.SupportsFrames && \"frames\",\n        (announceFlags & ControlAnnounceFlags.StatusLightRgbFade) ===\n            ControlAnnounceFlags.StatusLightMono && \"mono status LED\",\n        (announceFlags & ControlAnnounceFlags.StatusLightRgbFade) ===\n            ControlAnnounceFlags.StatusLightRgbNoFade &&\n            \"rgb no fade status LED\",\n        (announceFlags & ControlAnnounceFlags.StatusLightRgbFade) ===\n            ControlAnnounceFlags.StatusLightRgbFade && \"rgb fade status LED\",\n        restartCounter < 0xf ? `restart#${restartCounter}` : undefined,\n    ]\n        .filter(f => !!f)\n        .join(\", \")\n\n    return (\n        <StyledTreeItem\n            nodeId={`${id}:flags`}\n            labelText={text}\n            actions={\n                <DeviceActions\n                    device={device}\n                    showReset={true}\n                    showProxy={true}\n                    hideIdentity={!showIdentify}\n                />\n            }\n        ></StyledTreeItem>\n    )\n}\n","import { useMemo } from \"react\"\nimport { SystemReg } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    isReading,\n    isValue,\n    isValueOrIntensity,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport { useServiceSpecification } from \"../../jacdac/useServiceSpecification\"\n\nexport default function useBestRegister(service: JDService) {\n    const specification = useServiceSpecification(service)\n    return useMemo(() => {\n        const hasReading = specification?.packets.some(reg => isReading(reg))\n        if (hasReading) return service.register(SystemReg.Reading)\n        const hasValue = specification?.packets.some(reg => isValue(reg))\n        if (hasValue) return service.register(SystemReg.Value)\n        const hasIntensity = specification?.packets.some(reg =>\n            isValueOrIntensity(reg)\n        )\n        if (hasIntensity) return service.register(SystemReg.Intensity)\n        return undefined\n    }, [service, specification])\n}\n","import { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport React from \"react\"\nimport StyledTreeItem from \"../ui/StyledTreeItem\"\nimport useDeviceSpecification from \"../../jacdac/useDeviceSpecification\"\nimport { identifierToUrlPath } from \"../../../jacdac-ts/src/jdom/catalog\"\n\nexport default function DeviceProductInformationTreeItem(props: { device: JDDevice }) {\n    const { device } = props\n    const { id } = device\n    const specification = useDeviceSpecification(device)\n    if (!specification) return null\n\n    const to = `/devices/${identifierToUrlPath(specification.id)}`\n    return (\n        <StyledTreeItem\n            nodeId={`${id}:catalog`}\n            labelTo={to}\n            labelText={specification.name}\n            labelInfo={specification.company}\n        />\n    )\n}","import React, { useMemo, useCallback } from \"react\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport { JDEvent } from \"../../../jacdac-ts/src/jdom/event\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport useChange from \"../../jacdac/useChange\"\nimport {\n    isRegister,\n    isEvent,\n    isInfrastructure,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport { useRegisterHumanValue } from \"../../jacdac/useRegisterValue\"\nimport useEventCount from \"../../jacdac/useEventCount\"\nimport {\n    LOST,\n    FOUND,\n    GET_ATTEMPT,\n    SERVICE_NODE_NAME,\n    REGISTER_NODE_NAME,\n    EVENT_NODE_NAME,\n    SERVICE_MIXIN_NODE_NAME,\n    ANNOUNCE,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport useEventRaised from \"../../jacdac/useEventRaised\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport {\n    ellipseJoin,\n    roundWithPrecision,\n} from \"../../../jacdac-ts/src/jdom/utils\"\nimport useDeviceName from \"../devices/useDeviceName\"\nimport StyledTreeItem, {\n    StyledTreeViewItemProps,\n    StyledTreeViewProps,\n} from \"../ui/StyledTreeItem\"\nimport useInstanceName from \"../services/useInstanceName\"\nimport useBestRegister from \"../hooks/useBestRegister\"\nimport { humanify } from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport DeviceAvatar from \"../devices/DeviceAvatar\"\nimport DeviceProductInformationTreeItem from \"../devices/DeviceInformationTreeItem\"\nimport AnnounceFlagsTreeItem from \"../devices/AnnounceFlagsTreeItem\"\nimport useDeviceDescription from \"../../jacdac/useDeviceDescription\"\n\nexport interface JDomTreeViewProps extends StyledTreeViewProps {\n    deviceFilter?: (devices: JDDevice) => boolean\n    serviceFilter?: (services: JDService) => boolean\n    registerFilter?: (register: JDRegister) => boolean\n    eventFilter?: (event: JDEvent) => boolean\n}\n\nexport function DeviceTreeItem(\n    props: { device: JDDevice } & StyledTreeViewItemProps & JDomTreeViewProps\n) {\n    const { device, serviceFilter, ...other } = props\n    const { id, isPhysical } = useMemo(() => device, [device])\n    const name = useDeviceName(device, true)\n    const description = useDeviceDescription(device)\n    const kind = isPhysical ? \"device\" : \"virtualdevice\"\n    const lost = useEventRaised([LOST, FOUND], device, dev => !!dev?.lost)\n    const services = useEventRaised(ANNOUNCE, device, _ =>\n        _.services({ mixins: false }).filter(\n            srv => !serviceFilter || serviceFilter(srv)\n        )\n    )\n    const stats = useChange(device, _ => _.stats)\n    const dropped = useChange(stats, _ => _.dropped)\n    const restarts = useChange(stats, _ => _.restarts)\n    const serviceNames = ellipseJoin(\n        services\n            .filter(srv => !isInfrastructure(srv.specification))\n            .map(service => service.name),\n        26\n    )\n\n    const alert = lost\n        ? `lost device`\n        : restarts > 1\n        ? `${restarts} restarts`\n        : dropped > 2\n        ? `${roundWithPrecision(dropped, 1)} pkt lost`\n        : undefined\n    const warning = restarts > 1 || dropped > 2\n    const labelInfo = serviceNames\n\n    return (\n        <StyledTreeItem\n            nodeId={id}\n            labelText={name}\n            labelCaption={description}\n            labelInfo={labelInfo}\n            warning={warning}\n            alert={alert}\n            kind={kind}\n            icon={<DeviceAvatar device={device} size=\"small\" center={false} />}\n        >\n            <DeviceProductInformationTreeItem device={device} />\n            <AnnounceFlagsTreeItem device={device} />\n            {services?.map(service => (\n                <ServiceTreeItem\n                    key={service.nodeId}\n                    service={service}\n                    showSpecification={true}\n                    {...other}\n                />\n            ))}\n        </StyledTreeItem>\n    )\n}\n\nexport function ServiceMembersTreeItems(\n    props: { service: JDService } & StyledTreeViewItemProps & JDomTreeViewProps\n) {\n    const { service, registerFilter, eventFilter, ...other } = props\n    const { specification, mixins } = useMemo(() => service, [service])\n    const packets = specification?.packets\n    const registers = packets\n        ?.filter(pkt => !pkt.client && isRegister(pkt))\n        .map(info => service.register(info.identifier))\n        .filter(reg => !reg.notImplemented)\n        .filter(reg => !registerFilter || registerFilter(reg))\n        .sort((l, r) => l.name.localeCompare(r.name))\n    const events = packets\n        ?.filter(pkt => !pkt.client && isEvent(pkt))\n        .map(info => service.event(info.identifier))\n        .filter(ev => !eventFilter || eventFilter(ev))\n    return (\n        <>\n            {registers?.map(register => (\n                <RegisterTreeItem\n                    key={register.id}\n                    register={register}\n                    {...other}\n                />\n            ))}\n            {events?.map(event => (\n                <EventTreeItem key={event.id} event={event} {...other} />\n            ))}\n            {mixins?.map(mixin => (\n                <ServiceTreeItem key={mixin.id} service={mixin} {...other} />\n            ))}\n        </>\n    )\n}\n\nfunction ServiceSpecificationTreeItem(props: { service: JDService }) {\n    const { service } = props\n    const { id, specification } = service\n    if (!specification) return null\n\n    const { classIdentifier } = specification\n    const nodeId = `${id}:spec`\n    const labelText =\n        (specification?.notes[\"short\"] || specification.name).split(\".\", 1)[0] +\n        \".\"\n    const labelTo = `/services/${specification.shortId}/`\n\n    return (\n        <StyledTreeItem\n            nodeId={nodeId}\n            labelText={labelText}\n            labelInfo={`id: 0x${classIdentifier.toString(16)}`}\n            labelTo={labelTo}\n        />\n    )\n}\n\nexport function ServiceTreeItem(\n    props: {\n        service: JDService\n        showSpecification?: boolean\n        showMembersOnly?: boolean\n    } & StyledTreeViewItemProps &\n        JDomTreeViewProps\n) {\n    const { service, showSpecification, showMembersOnly } = props\n    const { isMixin, name, id } = useMemo(() => service, [service])\n    const instanceName = useInstanceName(service)\n    const readingRegister = useBestRegister(service)\n    const reading = useRegisterHumanValue(readingRegister, {\n        visible: true,\n        maxLength: 18,\n    })\n\n    const labelText = name + (instanceName ? ` ${instanceName}` : \"\")\n    const members = (\n        <>\n            {showSpecification && (\n                <ServiceSpecificationTreeItem service={service} />\n            )}\n            <ServiceMembersTreeItems service={service} {...props} />\n        </>\n    )\n\n    if (showMembersOnly) return members\n\n    return (\n        <StyledTreeItem\n            nodeId={id}\n            labelText={labelText}\n            labelInfo={reading}\n            kind={isMixin ? SERVICE_MIXIN_NODE_NAME : SERVICE_NODE_NAME}\n        >\n            {members}\n        </StyledTreeItem>\n    )\n}\n\nexport function RegisterTreeItem(\n    props: { register: JDRegister } & StyledTreeViewItemProps &\n        JDomTreeViewProps\n) {\n    const { register } = props\n    const { specification, id, notImplemented } = register\n    const optional = !!specification?.optional\n    const labelText = humanify(\n        `${specification?.name || id}${optional ? \"?\" : \"\"}`\n    )\n    const humanValue = useRegisterHumanValue(register, {\n        visible: true,\n    })\n    const handleClick = useCallback(() => register.sendGetAsync(), [register])\n\n    const attempts = useEventRaised(\n        GET_ATTEMPT,\n        register,\n        _ => _?.lastGetAttempts\n    )\n    const failedGet = attempts > 2\n\n    // not implemented\n    if (notImplemented) return null\n    // if register is optional and no data, hide\n    if (optional && failedGet && humanValue === undefined) return null\n\n    return (\n        <StyledTreeItem\n            nodeId={id}\n            labelText={labelText}\n            labelInfo={humanValue || (attempts > 0 && `#${attempts}`) || \"\"}\n            kind={specification?.kind || REGISTER_NODE_NAME}\n            alert={failedGet && !optional && humanValue === undefined && `???`}\n            onClick={handleClick}\n        />\n    )\n}\n\nexport function EventTreeItem(\n    props: { event: JDEvent } & StyledTreeViewItemProps & JDomTreeViewProps\n) {\n    const { event } = props\n    const { specification, id } = event\n    const count = useEventCount(event)\n    const labelText = humanify(specification?.name || event.id)\n\n    return (\n        <StyledTreeItem\n            nodeId={id}\n            labelText={labelText}\n            labelInfo={(count || \"\") + \"\"}\n            kind={EVENT_NODE_NAME}\n        />\n    )\n}\n","import * as React from 'react';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport default function useTreeItem(nodeId) {\n  const {\n    focus,\n    isExpanded,\n    isExpandable,\n    isFocused,\n    isDisabled,\n    isSelected,\n    multiSelect,\n    selectNode,\n    selectRange,\n    toggleExpansion\n  } = React.useContext(TreeViewContext);\n  const expandable = isExpandable ? isExpandable(nodeId) : false;\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n  const handleExpansion = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      // If already expanded and trying to toggle selection don't close\n      if (expandable && !(multiple && isExpanded(nodeId))) {\n        toggleExpansion(event, nodeId);\n      }\n    }\n  };\n  const handleSelection = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n      if (multiple) {\n        if (event.shiftKey) {\n          selectRange(event, {\n            end: nodeId\n          });\n        } else {\n          selectNode(event, nodeId, true);\n        }\n      } else {\n        selectNode(event, nodeId);\n      }\n    }\n  };\n  const preventSelection = event => {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n  return {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  };\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"classes\", \"className\", \"displayIcon\", \"expansionIcon\", \"icon\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport useTreeItem from './useTreeItem';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TreeItemContent = /*#__PURE__*/React.forwardRef(function TreeItemContent(props, ref) {\n  const {\n      classes,\n      className,\n      displayIcon,\n      expansionIcon,\n      icon: iconProp,\n      label,\n      nodeId,\n      onClick,\n      onMouseDown\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  } = useTreeItem(nodeId);\n  const icon = iconProp || expansionIcon || displayIcon;\n  const handleMouseDown = event => {\n    preventSelection(event);\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n  };\n  const handleClick = event => {\n    handleExpansion(event);\n    handleSelection(event);\n    if (onClick) {\n      onClick(event);\n    }\n  };\n  return (\n    /*#__PURE__*/\n    /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions -- Key event is handled by the TreeView */\n    _jsxs(\"div\", _extends({\n      className: clsx(className, classes.root, expanded && classes.expanded, selected && classes.selected, focused && classes.focused, disabled && classes.disabled),\n      onClick: handleClick,\n      onMouseDown: handleMouseDown,\n      ref: ref\n    }, other, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: classes.iconContainer,\n        children: icon\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: classes.label,\n        children: label\n      })]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItemContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * className applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display next to the tree node's label. Either a parent or end icon.\n   */\n  displayIcon: PropTypes.node,\n  /**\n   * The icon to display next to the tree node's label. Either an expansion or collapse icon.\n   */\n  expansionIcon: PropTypes.node,\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func\n} : void 0;\nexport default TreeItemContent;","import generateUtilityClass from '@mui/material/generateUtilityClass';\nimport generateUtilityClasses from '@mui/material/generateUtilityClasses';\nexport function getTreeItemUtilityClass(slot) {\n  return generateUtilityClass('MuiTreeItem', slot);\n}\nconst treeItemClasses = generateUtilityClasses('MuiTreeItem', ['root', 'group', 'content', 'expanded', 'selected', 'focused', 'disabled', 'iconContainer', 'label']);\nexport default treeItemClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"collapseIcon\", \"ContentComponent\", \"ContentProps\", \"endIcon\", \"expandIcon\", \"disabled\", \"icon\", \"id\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\", \"TransitionComponent\", \"TransitionProps\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport Collapse from '@mui/material/Collapse';\nimport { alpha, styled, useThemeProps } from '@mui/material/styles';\nimport { ownerDocument, useForkRef, unsupportedProp } from '@mui/material/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nimport { DescendantProvider, useDescendant } from '../TreeView/descendants';\nimport TreeItemContent from './TreeItemContent';\nimport treeItemClasses, { getTreeItemUtilityClass } from './treeItemClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    content: ['content'],\n    expanded: ['expanded'],\n    selected: ['selected'],\n    focused: ['focused'],\n    disabled: ['disabled'],\n    iconContainer: ['iconContainer'],\n    label: ['label'],\n    group: ['group']\n  };\n  return composeClasses(slots, getTreeItemUtilityClass, classes);\n};\nconst TreeItemRoot = styled('li', {\n  name: 'MuiTreeItem',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0,\n  outline: 0\n});\nconst StyledTreeItemContent = styled(TreeItemContent, {\n  name: 'MuiTreeItem',\n  slot: 'Content',\n  overridesResolver: (props, styles) => {\n    return [styles.content, styles.iconContainer && {\n      [`& .${treeItemClasses.iconContainer}`]: styles.iconContainer\n    }, styles.label && {\n      [`& .${treeItemClasses.label}`]: styles.label\n    }];\n  }\n})(({\n  theme\n}) => ({\n  padding: '0 8px',\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  cursor: 'pointer',\n  WebkitTapHighlightColor: 'transparent',\n  '&:hover': {\n    backgroundColor: (theme.vars || theme).palette.action.hover,\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  [`&.${treeItemClasses.disabled}`]: {\n    opacity: (theme.vars || theme).palette.action.disabledOpacity,\n    backgroundColor: 'transparent'\n  },\n  [`&.${treeItemClasses.focused}`]: {\n    backgroundColor: (theme.vars || theme).palette.action.focus\n  },\n  [`&.${treeItemClasses.selected}`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    '&:hover': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n      }\n    },\n    [`&.${treeItemClasses.focused}`]: {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n    }\n  },\n  [`& .${treeItemClasses.iconContainer}`]: {\n    marginRight: 4,\n    width: 15,\n    display: 'flex',\n    flexShrink: 0,\n    justifyContent: 'center',\n    '& svg': {\n      fontSize: 18\n    }\n  },\n  [`& .${treeItemClasses.label}`]: _extends({\n    width: '100%',\n    // fixes overflow - see https://github.com/mui/material-ui/issues/27372\n    minWidth: 0,\n    paddingLeft: 4,\n    position: 'relative'\n  }, theme.typography.body1)\n}));\nconst TreeItemGroup = styled(Collapse, {\n  name: 'MuiTreeItem',\n  slot: 'Group',\n  overridesResolver: (props, styles) => styles.group\n})({\n  margin: 0,\n  padding: 0,\n  marginLeft: 17\n});\nconst TreeItem = /*#__PURE__*/React.forwardRef(function TreeItem(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeItem'\n  });\n  const {\n      children,\n      className,\n      collapseIcon,\n      ContentComponent = TreeItemContent,\n      ContentProps,\n      endIcon,\n      expandIcon,\n      disabled: disabledProp,\n      icon,\n      id: idProp,\n      label,\n      nodeId,\n      onClick,\n      onMouseDown,\n      TransitionComponent = Collapse,\n      TransitionProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    icons: contextIcons = {},\n    focus,\n    isExpanded,\n    isFocused,\n    isSelected,\n    isDisabled,\n    multiSelect,\n    disabledItemsFocusable,\n    mapFirstChar,\n    unMapFirstChar,\n    registerNode,\n    unregisterNode,\n    treeId\n  } = React.useContext(TreeViewContext);\n  let id = null;\n  if (idProp != null) {\n    id = idProp;\n  } else if (treeId && nodeId) {\n    id = `${treeId}-${nodeId}`;\n  }\n  const [treeitemElement, setTreeitemElement] = React.useState(null);\n  const contentRef = React.useRef(null);\n  const handleRef = useForkRef(setTreeitemElement, ref);\n  const descendant = React.useMemo(() => ({\n    element: treeitemElement,\n    id: nodeId\n  }), [nodeId, treeitemElement]);\n  const {\n    index,\n    parentId\n  } = useDescendant(descendant);\n  const expandable = Boolean(Array.isArray(children) ? children.length : children);\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  const ownerState = _extends({}, props, {\n    expanded,\n    focused,\n    selected,\n    disabled\n  });\n  const classes = useUtilityClasses(ownerState);\n  let displayIcon;\n  let expansionIcon;\n  if (expandable) {\n    if (!expanded) {\n      expansionIcon = expandIcon || contextIcons.defaultExpandIcon;\n    } else {\n      expansionIcon = collapseIcon || contextIcons.defaultCollapseIcon;\n    }\n  }\n  if (expandable) {\n    displayIcon = contextIcons.defaultParentIcon;\n  } else {\n    displayIcon = endIcon || contextIcons.defaultEndIcon;\n  }\n  React.useEffect(() => {\n    // On the first render a node's index will be -1. We want to wait for the real index.\n    if (registerNode && unregisterNode && index !== -1) {\n      registerNode({\n        id: nodeId,\n        idAttribute: id,\n        index,\n        parentId,\n        expandable,\n        disabled: disabledProp\n      });\n      return () => {\n        unregisterNode(nodeId);\n      };\n    }\n    return undefined;\n  }, [registerNode, unregisterNode, parentId, index, nodeId, expandable, disabledProp, id]);\n  React.useEffect(() => {\n    if (mapFirstChar && unMapFirstChar && label) {\n      mapFirstChar(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n      return () => {\n        unMapFirstChar(nodeId);\n      };\n    }\n    return undefined;\n  }, [mapFirstChar, unMapFirstChar, nodeId, label]);\n  let ariaSelected;\n  if (multiSelect) {\n    ariaSelected = selected;\n  } else if (selected) {\n    /* single-selection trees unset aria-selected on un-selected items.\n     *\n     * If the tree does not support multiple selection, aria-selected\n     * is set to true for the selected node and it is not present on any other node in the tree.\n     * Source: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/\n     */\n    ariaSelected = true;\n  }\n  function handleFocus(event) {\n    // DOM focus stays on the tree which manages focus with aria-activedescendant\n    if (event.target === event.currentTarget) {\n      ownerDocument(event.target).getElementById(treeId).focus({\n        preventScroll: true\n      });\n    }\n    const unfocusable = !disabledItemsFocusable && disabled;\n    if (!focused && event.currentTarget === event.target && !unfocusable) {\n      focus(event, nodeId);\n    }\n  }\n  return /*#__PURE__*/_jsxs(TreeItemRoot, _extends({\n    className: clsx(classes.root, className),\n    role: \"treeitem\",\n    \"aria-expanded\": expandable ? expanded : null,\n    \"aria-selected\": ariaSelected,\n    \"aria-disabled\": disabled || null,\n    ref: handleRef,\n    id: id,\n    tabIndex: -1\n  }, other, {\n    ownerState: ownerState,\n    onFocus: handleFocus,\n    children: [/*#__PURE__*/_jsx(StyledTreeItemContent, _extends({\n      as: ContentComponent,\n      ref: contentRef,\n      classes: {\n        root: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        focused: classes.focused,\n        disabled: classes.disabled,\n        iconContainer: classes.iconContainer,\n        label: classes.label\n      },\n      label: label,\n      nodeId: nodeId,\n      onClick: onClick,\n      onMouseDown: onMouseDown,\n      icon: icon,\n      expansionIcon: expansionIcon,\n      displayIcon: displayIcon,\n      ownerState: ownerState\n    }, ContentProps)), children && /*#__PURE__*/_jsx(DescendantProvider, {\n      id: nodeId,\n      children: /*#__PURE__*/_jsx(TreeItemGroup, _extends({\n        as: TransitionComponent,\n        unmountOnExit: true,\n        className: classes.group,\n        in: expanded,\n        component: \"ul\",\n        role: \"group\"\n      }, TransitionProps, {\n        children: children\n      }))\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItem.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: PropTypes.node,\n  /**\n   * The component used for the content node.\n   * @default TreeItemContent\n   */\n  ContentComponent: elementTypeAcceptingRef,\n  /**\n   * Props applied to ContentComponent\n   */\n  ContentProps: PropTypes.object,\n  /**\n   * If `true`, the node is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: PropTypes.node,\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: PropTypes.node,\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * This prop isn't supported.\n   * Use the `onNodeFocus` callback on the tree if you need to monitor a node's focus.\n   */\n  onFocus: unsupportedProp,\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default TreeItem;","import React, { ReactNode } from \"react\"\nimport { styled } from \"@mui/material/styles\"\nimport TreeItem, { TreeItemProps } from \"@mui/lab/TreeItem\"\nimport Typography from \"@mui/material/Typography\"\nimport KindIcon from \"../KindIcon\"\nimport WarningIcon from \"@mui/icons-material/Warning\"\n\nimport { useId } from \"react\"\nimport { Link } from \"gatsby-material-ui-components\"\nimport { Tooltip } from \"@mui/material\"\nimport { ellipse } from \"../../../jacdac-ts/src/jdom/utils\"\n\nconst PREFIX = \"StyledTreeView\"\n\nconst classes = {\n    root: `${PREFIX}root`,\n    content: `${PREFIX}content`,\n    group: `${PREFIX}group`,\n    expanded: `${PREFIX}expanded`,\n    selected: `${PREFIX}selected`,\n    label: `${PREFIX}label`,\n    labelRoot: `${PREFIX}labelRoot`,\n    labelIcon: `${PREFIX}labelIcon`,\n    labelText: `${PREFIX}labelText`,\n}\n\nconst Root = styled(\"div\")(({ theme }) => ({\n    [`& .${classes.root}`]: {\n        color: theme.palette.text.secondary,\n        \"&:hover > $content\": {\n            backgroundColor: theme.palette.action.hover,\n        },\n        \"&:focus > $content, &$selected > $content\": {\n            backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey})`,\n            color: \"var(--tree-view-color)\",\n        },\n        \"&:focus > $content $label, &:hover > $content $label, &$selected > $content $label\":\n            {\n                backgroundColor: \"transparent\",\n            },\n    },\n\n    [`& .${classes.content}`]: {\n        color: theme.palette.text.secondary,\n        fontWeight: theme.typography.fontWeightMedium,\n        \"$expanded > &\": {\n            fontWeight: theme.typography.fontWeightRegular,\n        },\n    },\n\n    [`& .${classes.group}`]: {\n        marginLeft: 0,\n        \"& $content\": {\n            paddingLeft: theme.spacing(1),\n        },\n    },\n\n    [`& .${classes.expanded}`]: {},\n\n    [`& .${classes.selected}`]: {\n        fontWeight: theme.typography.fontWeightBold,\n    },\n\n    [`& .${classes.label}`]: {\n        fontWeight: \"inherit\",\n        color: \"inherit\",\n    },\n\n    [`&.${classes.labelRoot}`]: {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: theme.spacing(0.5, 0),\n    },\n\n    [`& .${classes.labelIcon}`]: {\n        marginRight: theme.spacing(0.5),\n    },\n\n    [`& .${classes.labelText}`]: {\n        fontWeight: \"inherit\",\n        flexGrow: 1,\n        marginRight: theme.spacing(0.5),\n    },\n}))\n\ndeclare module \"csstype\" {\n    interface Properties {\n        \"--tree-view-color\"?: string\n        \"--tree-view-bg-color\"?: string\n    }\n}\n\nexport interface StyledTreeViewItemProps {\n    key: string\n    expanded: string[]\n    selected: string[]\n}\n\nexport interface StyledTreeViewProps {\n    defaultExpanded?: string[]\n    defaultSelected?: string[]\n    onToggle?: (expanded: string[]) => void\n    onSelect?: (selected: string[]) => void\n}\n\nexport default function StyledTreeItem(\n    props: TreeItemProps & {\n        nodeId: string\n        bgColor?: string\n        color?: string\n        kind?: string\n        icon?: JSX.Element\n        warning?: boolean\n        alert?: string\n        labelInfo?: string\n        labelText?: string\n        labelTextVariant?: \"caption\" | \"subtitle1\" | \"subtitle2\"\n        labelCaption?: string\n        labelTo?: string\n        actions?: JSX.Element | JSX.Element[]\n        children?: ReactNode\n    }\n) {\n    const {\n        labelText,\n        labelCaption,\n        labelTo,\n        labelTextVariant,\n        kind,\n        icon,\n        labelInfo,\n        color,\n        bgColor,\n        actions,\n        nodeId,\n        warning,\n        alert,\n        ...other\n    } = props\n    const domId = useId()\n\n    return (\n        <TreeItem\n            id={domId}\n            tabIndex={0}\n            nodeId={nodeId}\n            label={\n                <Root className={classes.labelRoot}>\n                    {kind && !icon && (\n                        <KindIcon\n                            kind={kind}\n                            className={classes.labelIcon}\n                            fontSize=\"small\"\n                        />\n                    )}\n                    {icon && <span className={classes.labelIcon}>{icon}</span>}\n                    {warning && (\n                        <WarningIcon\n                            color=\"error\"\n                            className={classes.labelIcon}\n                        />\n                    )}\n                    {labelText && (\n                        <Typography\n                            component=\"span\"\n                            variant={labelTextVariant || \"body2\"}\n                            className={classes.labelText}\n                        >\n                            {labelTo ? (\n                                <Link\n                                    color=\"textPrimary\"\n                                    to={labelTo}\n                                    underline=\"hover\"\n                                >\n                                    {labelText}\n                                </Link>\n                            ) : (\n                                labelText\n                            )}\n                            {labelCaption && (\n                                <Typography component=\"span\" variant=\"caption\">\n                                    , {labelCaption}\n                                </Typography>\n                            )}\n                        </Typography>\n                    )}\n                    {alert && \"!\"}\n                    <Typography\n                        component=\"span\"\n                        variant=\"caption\"\n                        color=\"inherit\"\n                    >\n                        {alert && (\n                            <Typography variant=\"caption\" component=\"span\">\n                                {alert},\n                            </Typography>\n                        )}\n                        {labelInfo?.length > 18 ? (\n                            <Tooltip title={labelInfo}>\n                                <span>{ellipse(labelInfo, 18)}</span>\n                            </Tooltip>\n                        ) : (\n                            labelInfo\n                        )}\n                        {actions}\n                    </Typography>\n                </Root>\n            }\n            style={\n                {\n                    \"--tree-view-color\": color,\n                    \"--tree-view-bg-color\": bgColor,\n                } as any\n            }\n            classes={{\n                root: classes.root,\n                content: classes.content,\n                expanded: classes.expanded,\n                selected: classes.selected,\n                group: classes.group,\n                label: classes.label,\n            }}\n            {...other}\n        />\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { JDEvent } from \"../../jacdac-ts/src/jdom/event\"\nimport { CHANGE } from \"../../jacdac-ts/src/jdom/constants\"\n\nexport default function useEventCount(event: JDEvent) {\n    const [count, setCount] = useState(event?.count || 0)\n    useEffect(\n        () =>\n            event?.subscribe(CHANGE, () => {\n                setCount(event.count)\n            }),\n        [event]\n    )\n\n    return count\n}\n","import { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { useMemo } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../jacdac-ts/src/jdom/spec\"\n\nexport function useServiceSpecificationFromServiceClass(serviceClass: number) {\n    const specification = useMemo(\n        () => serviceSpecificationFromClassIdentifier(serviceClass),\n        [serviceClass]\n    )\n    return specification\n}\n\nexport function useServiceSpecification(service: JDService) {\n    const serviceClass = service?.serviceClass\n    const specification = useServiceSpecificationFromServiceClass(serviceClass)\n    return specification\n}\n"],"names":["text","proxy","announceFlags","ControlAnnounceFlags","restartCounter","f","id","specification","useServiceSpecification","useMemo","hasReading","reg","isReading","service","SystemReg","hasValue","isValue","hasIntensity","isValueOrIntensity","useDeviceSpecification","to","identifierToUrlPath","other","name","useDeviceName","description","useDeviceDescription","kind","isPhysical","lost","useEventRaised","dev","services","_","mixins","srv","serviceFilter","stats","useChange","dropped","restarts","serviceNames","ellipseJoin","isInfrastructure","alert","roundWithPrecision","warning","labelInfo","packets","registers","pkt","isRegister","info","registerFilter","l","r","events","isEvent","ev","eventFilter","register","event","mixin","nodeId","labelText","labelTo","classIdentifier","instanceName","useInstanceName","readingRegister","useBestRegister","reading","useRegisterHumanValue","visible","maxLength","members","showSpecification","isMixin","optional","humanify","humanValue","handleClick","useCallback","attempts","failedGet","count","useEventCount","PREFIX","classes","root","content","group","expanded","selected","label","labelRoot","labelIcon","Root","styled","color","theme","backgroundColor","fontWeight","marginLeft","paddingLeft","display","alignItems","padding","marginRight","flexGrow","domId","useId","icon","labelTextVariant","labelCaption","ellipse","useState","useEffect","setCount","serviceSpecificationFromClassIdentifier","serviceClass","useServiceSpecificationFromServiceClass"],"sourceRoot":""}