{"version":3,"file":"2c0fffe43fb9a4b5d22760a26753e0b3e19127dd-cecd6f8b95152a55834f.js","mappings":"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","sources":["webpack://jacdac-docs/./jacdac-ts/src/testdom/nodes.ts","webpack://jacdac-docs/./jacdac-ts/src/testdom/spec.ts","webpack://jacdac-docs/./jacdac-ts/src/testdom/testrules.ts"],"sourcesContent":["import { JDBus } from \"../jdom/bus\"\nimport {\n    CHANGE,\n    DISCONNECT,\n    EVENT,\n    REPORT_UPDATE,\n    SystemReg,\n    STATE_CHANGE,\n} from \"../jdom/constants\"\nimport { JDDevice } from \"../jdom/device\"\nimport { JDEvent } from \"../jdom/event\"\nimport { JDSubscriptionScope } from \"../jdom/eventsource\"\nimport { JDNode } from \"../jdom/node\"\nimport { randomDeviceId } from \"../jdom/random\"\nimport { JDRegister } from \"../jdom/register\"\nimport { JDService } from \"../jdom/service\"\nimport { arrayConcatMany, delay } from \"../jdom/utils\"\nimport {\n    DeviceTestSpec,\n    ManualSteps,\n    PanelTestSpec,\n    TestResult,\n    TestState,\n    TestUploadState,\n} from \"./spec\"\n\nexport const PANEL_TEST_KIND = \"panelTest\"\nexport const DEVICE_TEST_KIND = \"deviceTest\"\nexport const DEVICE_STATS_TEST_KIND = \"deviceStatsTestKind\"\nexport const STATUS_LIGHT_TEST_KIND = \"statusLightTestKind\"\nexport const SERVICE_TEST_KIND = \"serviceTest\"\nexport const SERVICE_COMMAND_TEST_KIND = \"serviceCommandTest\"\nexport const REGISTER_TEST_KIND = \"registerTest\"\nexport const EVENT_TEST_KIND = \"eventTest\"\nexport const REGISTER_ORACLE_KIND = \"registerOracle\"\n\nconst DEVICE_STATS_MAX_RESTARTS = 2\nconst DEVICE_STATS_MAX_DROPPED_PACKETS = 4\nconst DEVICE_STATS_MIN_ANNOUNCE_PACKETS = 2\n\nexport type TestLogger = (msg: string) => void\n\nexport abstract class TestNode extends JDNode {\n    private readonly _id: string = randomDeviceId()\n    private _parent: TestNode\n    private _state: TestState = TestState.Indeterminate\n    private _uploadState: TestUploadState = TestUploadState.Local\n    private _output: string\n    private _node: JDNode = undefined\n    private _children: TestNode[] = []\n    protected readonly subscriptions = new JDSubscriptionScope()\n\n    constructor(\n        private _name: string,\n        private _manualSteps: ManualSteps = undefined,\n    ) {\n        super()\n    }\n\n    get manualSteps() {\n        return this._manualSteps\n    }\n\n    get description(): string {\n        return \"\"\n    }\n\n    get name(): string {\n        return this._name\n    }\n\n    protected set name(value: string) {\n        if (value !== this._name) {\n            this._name = value\n            this.emit(CHANGE)\n        }\n    }\n\n    get bus(): JDBus {\n        return this.parent?.bus\n    }\n\n    get label(): string {\n        return this._name\n    }\n\n    get info(): string {\n        return undefined\n    }\n\n    get factory(): boolean {\n        return this.parent?.factory\n    }\n    get uploadState() {\n        return this._uploadState\n    }\n\n    set uploadState(value: TestUploadState) {\n        if (this._uploadState !== value) {\n            this._uploadState = value\n            this.emit(CHANGE)\n        }\n    }\n\n    get id() {\n        return this._id\n    }\n    get parent() {\n        return this._parent\n    }\n    private set parent(value: TestNode) {\n        if (value !== this._parent) {\n            this.node = undefined\n            this._parent = value\n        }\n    }\n    get node(): JDNode {\n        return this._node\n    }\n    set node(value: JDNode) {\n        if (value !== this._node) {\n            if (this._node) {\n                //console.log(`unbound ${this._node} from ${this}`)\n            }\n            this.unmount()\n            this._node = value\n            this.bindChildren()\n            if (value) {\n                //console.log(`bound ${value} to ${this}`)\n                this.mount()\n                this.updateState()\n            } else this.state = TestState.Indeterminate\n        }\n    }\n\n    private handleChange() {\n        this.bindChildren()\n        this.updateState()\n    }\n\n    private bindChildren() {\n        if (this.node) this._children.forEach(c => c.bind())\n        else this._children.forEach(c => (c.node = undefined))\n    }\n\n    protected updateState(): void {\n        const { prepare } = this.manualSteps || {}\n        if (\n            prepare &&\n            !this.factory &&\n            (this.state == TestState.Indeterminate ||\n                this.state == TestState.Fail)\n        )\n            return\n\n        // compute local state\n        const { state, output } = this.nodeState()\n        if (output !== undefined) this.output = output\n        if (this.children.length === 0 || state === TestState.Fail)\n            this.state = state\n        // compute child states\n        else this.state = this.computeChildrenState()\n    }\n\n    prepared() {\n        this.state = TestState.Running\n        this.updateState()\n        if (this.state != <any>TestState.Pass) this.state = TestState.Fail\n    }\n\n    resolveOracle(reg: JDRegister): RegisterOracle {\n        return (\n            this.children\n                ?.filter(c => c.nodeKind === REGISTER_ORACLE_KIND)\n                .map<RegisterOracle>(c => <RegisterOracle>c)\n                .filter(c => !!c.register)\n                .find(\n                    (o: RegisterOracle) =>\n                        o.serviceClass === reg.service.serviceClass &&\n                        o.code === reg.code,\n                ) || this.parent?.resolveOracle(reg)\n        )\n    }\n\n    protected nodeState(): TestResult {\n        return {\n            state: this.node ? TestState.Running : TestState.Indeterminate,\n        }\n    }\n\n    protected mount() {\n        this.subscriptions.mount(\n            this.node.subscribe(CHANGE, this.handleChange.bind(this)),\n        )\n    }\n\n    protected unmount() {\n        this.subscriptions.unmount()\n        this._children.forEach(c => c.unmount())\n    }\n\n    get children(): TestNode[] {\n        return this._children.slice(0)\n    }\n\n    get descendants(): TestNode[] {\n        return [\n            ...this._children,\n            ...arrayConcatMany(this._children.map(child => child.descendants)),\n        ]\n    }\n\n    appendChild(child: TestNode) {\n        if (child && this._children.indexOf(child) < 0) {\n            this._children.push(child)\n            child.parent = this\n            if (this.node) child.bind()\n            else child.node = undefined\n            this.emit(CHANGE)\n            this.updateState()\n        }\n    }\n\n    protected bind() {}\n\n    get qualifiedName(): string {\n        return this._parent ? `${this.parent}:${this.name}` : this.name\n    }\n\n    get state() {\n        return this._state\n    }\n    set state(value: TestState) {\n        if (value != this._state) {\n            this._state = value\n            this.emit(CHANGE)\n            this.emit(STATE_CHANGE)\n            this.parent?.updateState()\n        }\n    }\n\n    get output() {\n        return this._output\n    }\n\n    set output(value: string) {\n        if (this._output !== value) {\n            this._output = value\n            this.emit(CHANGE)\n        }\n    }\n\n    protected computeChildrenState() {\n        return this._children.reduce(\n            (s, c) => Math.max(s, c.state),\n            TestState.Pass,\n        )\n    }\n\n    override toString(): string {\n        return this.qualifiedName\n    }\n\n    export(): object {\n        const children = this.children.map(child => child.export())\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const res: any = {\n            id: this.id,\n            name: this.name,\n            state: TestState[this.state]?.toLowerCase(),\n            kind: this.nodeKind,\n            ...this.customProperties(),\n        }\n        if (this.output) res.output = this.output\n        if (children.length > 0) res.children = children\n        return res\n    }\n\n    protected customProperties(): object {\n        return {}\n    }\n}\n\nexport class PanelTest extends TestNode {\n    constructor(\n        id: string,\n        readonly specification: PanelTestSpec,\n    ) {\n        super(id || \"panel\")\n    }\n    get nodeKind(): string {\n        return PANEL_TEST_KIND\n    }\n    get bus() {\n        return this.node as JDBus\n    }\n    set bus(value: JDBus) {\n        this.node = value\n    }\n    get factory() {\n        return !!this.specification.factory\n    }\n    get deviceTests() {\n        return this.children as DeviceTest[]\n    }\n\n    override get label() {\n        const children = this.children.filter(\n            c => c.nodeKind === DEVICE_TEST_KIND,\n        )\n        const found = children.filter(c => !!c.node).length\n        return `${this.name}, found ${found}/${children.length} devices`\n    }\n\n    override customProperties(): object {\n        return {\n            time: new Date().toUTCString(),\n            userAgent: typeof navigator !== \"undefined\" && navigator?.userAgent,\n        }\n    }\n}\n\nexport class DeviceTest extends TestNode {\n    constructor(\n        readonly productIdentifier: number,\n        readonly specification: jdspec.DeviceSpec,\n        readonly testSpecification: DeviceTestSpec,\n    ) {\n        super(\n            specification\n                ? `${specification.name} (0x${productIdentifier.toString(16)})`\n                : productIdentifier\n                ? `0x${productIdentifier.toString(16)}`\n                : \"???\",\n        )\n    }\n    get nodeKind(): string {\n        return DEVICE_TEST_KIND\n    }\n    get device() {\n        return this.node as JDDevice\n    }\n    set device(value: JDDevice) {\n        this.node = value\n    }\n    get bus() {\n        return this.device?.bus || super.bus\n    }\n    get factory() {\n        return this.parent?.factory || !!this.testSpecification.factory\n    }\n    get serviceTests() {\n        return this.children.filter(\n            child => child.nodeKind === SERVICE_TEST_KIND,\n        ) as ServiceTest[]\n    }\n\n    test(device: JDDevice): boolean {\n        return this.productIdentifier === device.productIdentifier\n    }\n\n    bind(): void {\n        // clear bindings if needed\n        if (this.device) {\n            if (!this.device.connected) this.device = undefined\n            // already bound\n            else return\n        }\n\n        if (!this.parent) return\n\n        const { deviceTests, specification, bus } = this.parent as PanelTest\n        const { oracles } = specification\n\n        // list unbound devices on the bus\n        const unboundDevices = bus\n            .devices({ ignoreInfrastructure: true })\n            // ignore devices that are already bound\n            .filter(d => !deviceTests.some(t => t.device === d))\n            // ignore oracles\n            .filter(\n                d => !oracles?.find(oracle => oracle.deviceId === d.deviceId),\n            )\n        // quadratic search, find first device that matches a test\n        const device = unboundDevices.find(d => this.test(d))\n        this.device = device\n    }\n\n    protected mount(): void {\n        super.mount()\n        const device = this.device\n        this.subscriptions.mount(\n            device.subscribe(DISCONNECT, () => {\n                if (device === this.node) this.node = undefined\n            }),\n        )\n    }\n\n    protected customProperties(): object {\n        const d = this.device\n        if (!d) return {}\n        return {\n            deviceId: d.deviceId,\n            shortId: d.shortId,\n            firmwareVersion: d.firmwareVersion,\n        }\n    }\n}\n\nexport class DeviceStatsTest extends TestNode {\n    constructor() {\n        super(\"statistics\")\n    }\n    get description(): string {\n        return \"monitor device statistics (# restarts, # packets, etc.)\"\n    }\n    get nodeKind(): string {\n        return DEVICE_STATS_TEST_KIND\n    }\n    get device(): JDDevice {\n        return this.node as JDDevice\n    }\n    bind() {\n        const { device } = (this.parent || {}) as DeviceTest\n        this.node = device\n    }\n    override mount(): void {\n        super.mount()\n        const device = this.device\n        let mounted = true\n        const work = async () => {\n            while (mounted) {\n                const stats = device.stats\n                if (stats.restarts >= DEVICE_STATS_MAX_RESTARTS) {\n                    this.state = TestState.Fail\n                    this.output = `device restarted (> ${stats.restarts} times)`\n                    break\n                } else if (stats.dropped >= DEVICE_STATS_MAX_DROPPED_PACKETS) {\n                    this.state = TestState.Fail\n                    this.output = `device dropped packets (> ${stats.dropped})`\n                    break\n                } else if (\n                    stats.announce >= DEVICE_STATS_MIN_ANNOUNCE_PACKETS\n                ) {\n                    this.state = TestState.Pass\n                    this.output = `device is transferring packets correctly`\n                }\n                await delay(505)\n            }\n        }\n        work()\n        this.subscriptions.mount(() => {\n            mounted = false\n        })\n    }\n    updateState() {\n        // don't reset state\n        if (this.state !== TestState.Fail) {\n            this.state = TestState.Running\n            this.output = \"\"\n        }\n    }\n}\n\nexport class StatusLightTest extends TestNode {\n    constructor() {\n        super(\"status light\")\n    }\n    get description(): string {\n        return \"slow blink (2x/s green) = pass, fast blink (4x/s red) = fail\"\n    }\n    get nodeKind(): string {\n        return STATUS_LIGHT_TEST_KIND\n    }\n    get device(): JDDevice {\n        return this.node as JDDevice\n    }\n    bind() {\n        const { device } = (this.parent || {}) as DeviceTest\n        this.node = device\n    }\n    override mount(): void {\n        super.mount()\n        const device = this.device\n        const statusLight = device?.statusLight\n        if (!statusLight) return\n\n        let mounted = true\n        const work = async () => {\n            while (mounted && statusLight) {\n                switch (this.parent.state) {\n                    case TestState.Pass:\n                        statusLight.blink(0x006000, 0x000000, 500, 1)\n                        break\n                    case TestState.Fail:\n                        statusLight.blink(0x500000, 0x000000, 250, 4)\n                        break\n                }\n                await delay(1000)\n            }\n        }\n        work()\n        this.subscriptions.mount(() => {\n            mounted = false\n        })\n    }\n    updateState() {\n        this.state = TestState.Pass\n    }\n}\n\nexport class ServiceTest extends TestNode {\n    constructor(\n        name: string,\n        readonly serviceClass: number,\n    ) {\n        super(name)\n    }\n    get nodeKind(): string {\n        return SERVICE_TEST_KIND\n    }\n    get service() {\n        return this.node as JDService\n    }\n    set service(value: JDService) {\n        this.node = value\n    }\n\n    test(service: JDService) {\n        return service.serviceClass === this.serviceClass\n    }\n\n    override bind(): void {\n        if (this.service || !this.parent) return\n        const { serviceTests, device } = this.parent as DeviceTest\n        const unboundServices = device\n            .services({\n                serviceClass: this.serviceClass,\n            })\n            .filter(srv => !serviceTests.find(st => st.node === srv))\n        const service = unboundServices.find(srv => this.test(srv))\n        this.service = service\n    }\n\n    override customProperties(): object {\n        const s = this.service\n        if (!s) return {}\n        return {\n            serviceClass: s.serviceClass.toString(16),\n            serviceIndex: s.serviceIndex,\n        }\n    }\n}\n\nexport abstract class ServiceMemberTestNode extends TestNode {\n    constructor(name: string, manualSteps: ManualSteps) {\n        super(name, manualSteps)\n    }\n    get service(): JDService {\n        if (!this.parent) return undefined\n        const { service } = this.parent as ServiceTest\n        return service\n    }\n}\n\nexport interface ServiceMemberOptions {\n    name: string\n    manualSteps?: ManualSteps\n    start: (test: ServiceMemberTestNode) => () => void\n    hasChildren?: boolean\n}\n\nexport class ServiceCommandTest extends ServiceMemberTestNode {\n    constructor(readonly options: ServiceMemberOptions) {\n        super(options.name, options.manualSteps)\n    }\n    get nodeKind(): string {\n        return SERVICE_COMMAND_TEST_KIND\n    }\n    override updateState() {\n        if (this.options?.hasChildren) super.updateState()\n    }\n    override mount(): void {\n        super.mount()\n\n        const service = this.service\n        const { start } = this.options\n        if (service) {\n            const unsubscribe = start(this)\n            this.subscriptions.mount(unsubscribe)\n        }\n    }\n    override bind() {\n        this.node = this.service\n    }\n}\n\nexport abstract class RegisterTestNode extends ServiceMemberTestNode {\n    constructor(\n        name: string,\n        manualSteps: ManualSteps,\n        readonly code: number,\n    ) {\n        super(name, manualSteps)\n    }\n    get register() {\n        return this.node as JDRegister\n    }\n    set register(value: JDRegister) {\n        this.node = value\n    }\n\n    get description(): string {\n        const specification = this.register?.specification\n        return specification?.description\n    }\n\n    override mount() {\n        super.mount()\n        const register = this.register\n        //console.log(`register subscribe ${this.code} to ${register}`)\n        this.subscriptions.mount(\n            register.subscribe(REPORT_UPDATE, () => {\n                this.updateState()\n                this.emit(CHANGE)\n            }),\n        )\n        this.updateState()\n    }\n    override get info(): string {\n        return this.register?.humanValue || \"?\"\n    }\n}\n\nexport class RegisterOracle extends RegisterTestNode {\n    constructor(\n        name: string,\n        readonly deviceId: string,\n        readonly serviceIndex: number,\n        readonly serviceClass: number,\n        readonly tolerance: number,\n    ) {\n        super(name, undefined, SystemReg.Reading)\n    }\n\n    get nodeKind(): string {\n        return REGISTER_ORACLE_KIND\n    }\n\n    override nodeState(): TestResult {\n        return {\n            state: this.register?.unpackedValue?.length\n                ? TestState.Pass\n                : TestState.Fail,\n        }\n    }\n\n    override bind(): void {\n        if (this.register || !this.parent) return\n\n        const device = this.bus.device(this.deviceId, true)\n        const service = device?.services({\n            serviceIndex: this.serviceIndex,\n            serviceClass: this.serviceClass,\n        })[0]\n        const register = service?.register(this.code)\n        this.register = register\n    }\n}\n\nexport class RegisterTest extends RegisterTestNode {\n    constructor(\n        name: string,\n        manualSteps: ManualSteps,\n        code: number,\n        readonly computeState: (\n            node: RegisterTest,\n            logger: TestLogger,\n        ) => TestState,\n    ) {\n        super(name, manualSteps, code)\n    }\n    get nodeKind(): string {\n        return REGISTER_TEST_KIND\n    }\n\n    override nodeState(): TestResult {\n        const register = this.register\n        const log: string[] = []\n        const logger = (msg: string) => {\n            msg && log.push(msg)\n        }\n        let state = TestState.Indeterminate\n        if (register) {\n            try {\n                // always turn off color before querying service\n                const statusLight = register.service?.device?.statusLight\n                statusLight?.setColor(0)\n                state = this.computeState(this, logger)\n            } catch (e) {\n                state = TestState.Fail\n                logger(e?.toString())\n            }\n        }\n        return {\n            state,\n            output: log?.length ? log.join(\"\\n\") : undefined,\n        }\n    }\n\n    override bind(): void {\n        const service = this.service\n        const register = service?.register(this.code)\n        this.register = register\n    }\n}\n\nexport class EventTest extends ServiceMemberTestNode {\n    constructor(\n        name: string,\n        manualSteps: ManualSteps,\n        readonly code: number,\n        readonly computeState: (\n            node: EventTest,\n            logger: TestLogger,\n        ) => TestState,\n    ) {\n        super(name, manualSteps)\n    }\n    get nodeKind(): string {\n        return EVENT_TEST_KIND\n    }\n    get event() {\n        return this.node as JDEvent\n    }\n    set event(value: JDEvent) {\n        this.node = value\n    }\n    get description(): string {\n        const specification = this.event?.specification\n        return specification?.description\n    }\n\n    override mount() {\n        super.mount()\n        const event = this.event\n        //console.log(`event subscribe ${this.code} to ${event}`)\n        this.subscriptions.mount(\n            event.subscribe(EVENT, () => {\n                this.updateState()\n                this.emit(CHANGE)\n            }),\n        )\n    }\n\n    override nodeState(): TestResult {\n        const event = this.event\n        const log: string[] = []\n        const logger = (msg: string) => {\n            msg && log.push(msg)\n        }\n        let state = TestState.Indeterminate\n        if (event) {\n            try {\n                state = this.computeState(this, logger)\n            } catch (e) {\n                state = TestState.Fail\n                logger(e?.toString())\n            }\n        }\n        return {\n            state,\n            output: log.join(\"\\n\"),\n        }\n    }\n\n    override bind(): void {\n        const service = this.service\n        const event = service?.event(this.code)\n        this.event = event\n    }\n\n    override get info(): string {\n        const c = this.event?.count\n        return c ? `#${c}` : \"?\"\n    }\n}\n","export enum TestState {\n    Pass,\n    Indeterminate,\n    Running,\n    Fail,\n}\n\nexport enum TestUploadState {\n    Local,\n    Uploading,\n    Uploaded,\n    UploadError,\n}\n\nexport interface TestResult {\n    state: TestState\n    output?: string\n}\n\nexport interface PanelTestSpec {\n    id?: string\n    /**\n     * Tests should be fast and automated\n     */\n    factory?: boolean\n    devices: DeviceTestSpec[]\n    oracles?: OracleTestSpec[]\n}\n\nexport interface OracleTestSpec {\n    serviceClass: number\n    deviceId: string\n    serviceIndex?: number\n    tolerance?: number\n}\n\nexport interface DeviceTestSpec {\n    productIdentifier?: number\n    count: number\n    firmwareVersion?: string\n    services: ServiceTestSpec[]\n    factory?: boolean\n}\n\nexport interface ServiceTestSpec {\n    name?: string\n    serviceClass: number\n    count?: number\n    rules?: ServiceTestRule[]\n    disableBuiltinRules?: boolean\n}\n\nexport interface ManualSteps {\n    prepare?: string\n    validate?: string\n}\n\nexport interface ServiceTestRule {\n    type:\n        | \"reading\"\n        | \"intensity\"\n        | \"value\"\n        | \"oracleReading\"\n        | \"event\"\n        | \"setIntensityAndValue\"\n    name?: string\n    manualSteps?: ManualSteps\n    factory?: boolean\n}\nexport interface ReadingTestRule extends ServiceTestRule {\n    type: \"reading\" | \"intensity\" | \"value\"\n    value: number\n    tolerance?: number\n    samples?: number\n    op?: \">\" | \"<\" | \"==\"\n}\nexport interface SetIntensityAndValueTestRule extends ServiceTestRule {\n    type: \"setIntensityAndValue\"\n    steps: {\n        duration: number\n        intensity?: number\n        value?: number\n    }[]\n}\nexport interface OracleReadingTestRule extends ServiceTestRule {\n    type: \"oracleReading\"\n    oracle: OracleTestSpec\n    tolerance?: number\n}\nexport interface EventTestRule extends ServiceTestRule {\n    type: \"event\"\n    eventName: string\n}\n","import {\n    BuzzerCmd,\n    DotMatrixReg,\n    GamepadReg,\n    GamepadEvent,\n    GamepadButtons,\n    LedReg,\n    LedStripCmd,\n    SRV_ACCELEROMETER,\n    SRV_BUTTON,\n    SRV_BUZZER,\n    SRV_DOT_MATRIX,\n    SRV_GAMEPAD,\n    SRV_LED,\n    SRV_LED_STRIP,\n    SRV_MOTION,\n    SRV_POTENTIOMETER,\n    SRV_RELAY,\n    SRV_ROTARY_ENCODER,\n    SRV_SWITCH,\n    REPORT_UPDATE,\n    RotaryEncoderReg,\n    SRV_LIGHT_LEVEL,\n    SRV_MAGNETIC_FIELD_LEVEL,\n    SRV_DISTANCE,\n    SRV_TEMPERATURE,\n    SRV_HUMIDITY,\n    SRV_SERVO,\n    ServoReg,\n    SRV_REFLECTED_LIGHT,\n    SRV_VIBRATION_MOTOR,\n    VibrationMotorCmd,\n    SRV_POWER,\n    PowerReg,\n    PowerPowerStatus,\n    SRV_SOIL_MOISTURE,\n} from \"../jdom/constants\"\nimport { lightEncode } from \"../jdom/light\"\nimport { jdpack } from \"../jdom/pack\"\nimport { delay } from \"../jdom/utils\"\nimport {\n    EventTest,\n    RegisterTest,\n    ServiceMemberOptions,\n    ServiceMemberTestNode,\n} from \"./nodes\"\nimport {\n    EventTestRule,\n    ReadingTestRule,\n    ServiceTestRule,\n    SetIntensityAndValueTestRule,\n    TestState,\n} from \"./spec\"\n\nconst testColors = [0x220000, 0x002200, 0x000022, 0]\nconst builtinTestRules: Record<number, ServiceTestRule[]> = {\n    [SRV_SWITCH]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            manualSteps: {\n                prepare: \"switch to inactive\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 1,\n            manualSteps: {\n                prepare: \"switch to active\",\n            },\n        },\n    ],\n    [SRV_RELAY]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"intensity\",\n            value: 0,\n            factory: true,\n        },\n        <ReadingTestRule>{\n            type: \"intensity\",\n            value: 1,\n            factory: true,\n        },\n        <SetIntensityAndValueTestRule>{\n            type: \"setIntensityAndValue\",\n            name: \"activate and deactive every 3s\",\n            factory: true,\n            steps: [\n                {\n                    duration: 3000,\n                    intensity: 0,\n                },\n                {\n                    duration: 3000,\n                    intensity: 1,\n                },\n            ],\n        },\n    ],\n    [SRV_ACCELEROMETER]: <ServiceTestRule[]>[\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"face_up\",\n            manualSteps: {\n                prepare: \"turn face up\",\n            },\n        },\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"face_down\",\n            manualSteps: {\n                prepare: \"turn face down\",\n            },\n        },\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"tilt_up\",\n            factory: true,\n            manualSteps: {\n                prepare: \"tilt up\",\n            },\n        },\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"tilt_down\",\n            factory: true,\n            manualSteps: {\n                prepare: \"tilt down\",\n            },\n        },\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"tilt_left\",\n            factory: true,\n            manualSteps: {\n                prepare: \"tilt left\",\n            },\n        },\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"tilt_right\",\n            factory: true,\n            manualSteps: {\n                prepare: \"tilt right\",\n            },\n        },\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"shake\",\n            manualSteps: {\n                prepare: \"shake device\",\n            },\n        },\n    ],\n    [SRV_BUTTON]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            tolerance: 0.001,\n            factory: true,\n            manualSteps: {\n                prepare: \"release button\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 1,\n            tolerance: 0.001,\n            factory: true,\n            manualSteps: {\n                prepare: \"press button\",\n            },\n        },\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"down\",\n            factory: true,\n        },\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"up\",\n            factory: true,\n        },\n    ],\n    [SRV_REFLECTED_LIGHT]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            tolerance: 0.3,\n            factory: true,\n            manualSteps: {\n                prepare: \"place the sensor over a dark surface\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            tolerance: 0.3,\n            factory: true,\n            manualSteps: {\n                prepare: \"place the sensor over a light surface\",\n            },\n        },\n    ],\n    [SRV_MOTION]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            factory: true,\n            manualSteps: {\n                prepare: \"do not move\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 1,\n            factory: true,\n            manualSteps: {\n                prepare: \"move\",\n            },\n        },\n        <EventTestRule>{\n            type: \"event\",\n            eventName: \"movement\",\n            factory: true,\n        },\n    ],\n    [SRV_MAGNETIC_FIELD_LEVEL]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            tolerance: 0.2,\n            factory: true,\n            manualSteps: {\n                prepare: \"remove magnet\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 1,\n            tolerance: 0.3,\n            factory: true,\n            manualSteps: {\n                prepare: \"place north pole on top of sensor\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: -1,\n            tolerance: 0.3,\n            factory: true,\n            manualSteps: {\n                prepare: \"place south pole on top of sensor\",\n            },\n        },\n    ],\n    [SRV_DISTANCE]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0.2,\n            samples: 1,\n            factory: true,\n            op: \"<\",\n            manualSteps: {\n                prepare:\n                    \"cover distance sensor to get a reading less than 20cm\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0.4,\n            samples: 1,\n            factory: true,\n            manualSteps: {\n                prepare: \"uncover distance sensor with at least 40cm free\",\n            },\n            op: \">\",\n        },\n    ],\n    [SRV_SOIL_MOISTURE]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            tolerance: 0.2,\n            factory: true,\n            manualSteps: {\n                prepare: \"dip in dry dirt\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 1,\n            tolerance: 0.2,\n            factory: true,\n            manualSteps: {\n                prepare: \"dip in wet dirt\",\n            },\n        },\n    ],\n    [SRV_POTENTIOMETER]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            tolerance: 0.01,\n            factory: true,\n            manualSteps: {\n                prepare: \"slide to minimum\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0.5,\n            tolerance: 0.01,\n            manualSteps: {\n                prepare: \"slide to middle\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 1,\n            tolerance: 0.01,\n            factory: true,\n            manualSteps: {\n                prepare: \"slide to maximum\",\n            },\n        },\n    ],\n    [SRV_LIGHT_LEVEL]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            tolerance: 0.1,\n            factory: true,\n            manualSteps: {\n                prepare: \"cover sensor to block light\",\n            },\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 1,\n            tolerance: 0.1,\n            factory: true,\n            manualSteps: {\n                prepare: \"apply bright light to sensor\",\n            },\n        },\n    ],\n    [SRV_ROTARY_ENCODER]: <ServiceTestRule[]>[\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: -2,\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: -1,\n            factory: true,\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 0,\n            factory: true,\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 1,\n            factory: true,\n        },\n        <ReadingTestRule>{\n            type: \"reading\",\n            value: 2,\n        },\n    ],\n}\nconst builtinReadingTolerances: Record<number, number> = {\n    [SRV_TEMPERATURE]: 2,\n    [SRV_HUMIDITY]: 4,\n}\n\nexport function resolveTestRules(serviceClass: number) {\n    return builtinTestRules[serviceClass]\n}\n\nexport function resolveReadingTolerage(serviceClass: number) {\n    return builtinReadingTolerances[serviceClass]\n}\n\nfunction createGamepadButtonTests(\n    test: ServiceMemberTestNode,\n    buttons: number,\n) {\n    const addReadingTest = (name: string, flag: number) => {\n        let seenEventArg = false\n        test.appendChild(\n            new RegisterTest(\n                `${name} reading`,\n                {\n                    prepare: `press ${name} button`,\n                },\n                GamepadReg.Direction,\n                (node, logger) => {\n                    const { register } = node\n                    const [buttons] = (register.unpackedValue || []) as [\n                        GamepadButtons,\n                        number,\n                        number,\n                    ]\n                    const seen = !!(buttons & flag)\n                    if (!seenEventArg && !seen)\n                        logger(`reading not observed or incorrect flag`)\n                    else if (seen) {\n                        seenEventArg = seen\n                    }\n                    return seenEventArg ? TestState.Pass : TestState.Running\n                },\n            ),\n        )\n    }\n    const addEventTest = (name: string, flag: number) => {\n        let seenEventArg = false\n        test.appendChild(\n            new EventTest(\n                `${name} event`,\n                {\n                    prepare: `press ${name} button to raise event`,\n                },\n                GamepadEvent.ButtonsChanged,\n                (node, logger) => {\n                    const { event } = node\n                    const seen = !!(event?.count > 0 && event?.data[0] & flag)\n                    if (!seenEventArg && !seen)\n                        logger(`event not observed or incorrect flag`)\n                    else if (seen) {\n                        seenEventArg = seen\n                    }\n                    return seenEventArg ? TestState.Pass : TestState.Running\n                },\n            ),\n        )\n    }\n    if (test.children.length !== 0) return // TODO: revisit this\n\n    for (const key in GamepadButtons) {\n        const value = parseInt(GamepadButtons[key])\n        if (!isNaN(value)) {\n            if (value & buttons) {\n                addReadingTest(key, value)\n                addEventTest(key, value)\n            }\n        }\n    }\n    // if buttons doesn't have any of L/R/D/U, then add the four events,\n    // as we have a analog joystick that will generate them\n    const LRUD: number[] = [\n        GamepadButtons.Down,\n        GamepadButtons.Up,\n        GamepadButtons.Left,\n        GamepadButtons.Right,\n    ]\n    if (\n        !(\n            buttons &\n            (GamepadButtons.Down |\n                GamepadButtons.Up |\n                GamepadButtons.Left |\n                GamepadButtons.Right)\n        )\n    ) {\n        LRUD.forEach(value => {\n            const key = GamepadButtons[value]\n            addReadingTest(key, value)\n            addEventTest(key, value)\n        })\n    }\n}\n\nconst builtinServiceCommandTests: Record<number, ServiceMemberOptions> = {\n    [SRV_GAMEPAD]: {\n        name: \"buttons and events\",\n        start: test => {\n            const service = test.service\n            const buttonsAvailable = service.register(\n                GamepadReg.ButtonsAvailable,\n            )\n            const buttons = buttonsAvailable.unpackedValue\n            if (buttons?.length > 0) {\n                createGamepadButtonTests(test, buttons[0])\n                return undefined\n            } else {\n                const unsubscribe = buttonsAvailable.subscribe(\n                    REPORT_UPDATE,\n                    () => {\n                        unsubscribe()\n                        createGamepadButtonTests(\n                            test,\n                            buttonsAvailable.unpackedValue[0],\n                        )\n                    },\n                )\n                return unsubscribe\n            }\n        },\n        hasChildren: true,\n    },\n    [SRV_DOT_MATRIX]: {\n        name: \"blink matrix\",\n        manualSteps: {\n            validate: \"verify all LEDs blink\",\n        },\n        start: test => {\n            const service = test.service\n            const { factory } = test\n            let mounted = true\n            const work = async () => {\n                test.state = TestState.Running\n                const dotsRegister = service.register(DotMatrixReg.Dots)\n                const brightnessRegister = service.register(\n                    DotMatrixReg.Brightness,\n                )\n                let dots: Uint8Array = undefined\n                while (dots === undefined && mounted) {\n                    await dotsRegister.refresh(true)\n                    dots = dotsRegister.unpackedValue[0]\n                }\n                let state = 0xff\n                let brightness = 1\n                while (mounted) {\n                    dots.fill(state)\n                    await Promise.all([\n                        brightnessRegister.sendSetPackedAsync([brightness]),\n                        dotsRegister.sendSetPackedAsync([dots]),\n                    ])\n                    brightnessRegister.scheduleRefresh()\n                    dotsRegister.scheduleRefresh()\n                    if (state > 0) brightness = (brightness + 0.1) % 1.01\n                    state = ~state\n                    await delay(500)\n                    if (factory && test.state == TestState.Running)\n                        test.state = TestState.Pass\n                }\n            }\n            work()\n            return () => {\n                mounted = false\n            }\n        },\n    },\n    [SRV_LED]: {\n        name: \"cycle red, green, blue colors on all LEDs starting from the connector, clockwize.\",\n        manualSteps: {\n            validate: \"verify colors on LED\",\n        },\n        start: test => {\n            const service = test.service\n            const factory = test.factory\n            let mounted = true\n            const work = async () => {\n                test.state = TestState.Running\n                const pixelsRegister = service.register(LedReg.Pixels)\n                const numPixelsRegister = service.register(LedReg.NumPixels)\n                let n: number = undefined\n                while (n === undefined && mounted) {\n                    await numPixelsRegister.refresh(true)\n                    n = numPixelsRegister.uintValue\n                }\n                if (n == 0) {\n                    test.state = TestState.Fail\n                    test.output = \"number of pixels is 0\"\n                    return\n                }\n                // cycle through color and turn on pixels one by one\n                const pixels = new Uint8Array(n * 3)\n                let k = 0\n                while (mounted) {\n                    if (factory) {\n                        // factory test: render all leds\n                        const color = testColors[k++ % testColors.length]\n                        for (let i = 0; i < n; ++i) {\n                            pixels[i * 3] = (color >> 16) & 0xff\n                            pixels[i * 3 + 1] = (color >> 8) & 0xff\n                            pixels[i * 3 + 2] = (color >> 0) & 0xff\n                        }\n                        await pixelsRegister.sendSetPackedAsync([pixels], true)\n                        await delay(500)\n                        if (test.state == TestState.Running)\n                            test.state = TestState.Pass\n                    } else {\n                        // non factory test: render led one by one\n                        for (\n                            let ci = 0;\n                            ci < testColors.length && mounted;\n                            ++ci\n                        ) {\n                            const color = testColors[ci]\n                            pixels.fill(0)\n                            for (let i = 0; i < n && mounted; ++i) {\n                                pixels[i * 3] = (color >> 16) & 0xff\n                                pixels[i * 3 + 1] = (color >> 8) & 0xff\n                                pixels[i * 3 + 2] = (color >> 0) & 0xff\n                                await pixelsRegister.sendSetPackedAsync(\n                                    [pixels],\n                                    true,\n                                )\n                                await delay(Math.max(100, 500 - i * 20))\n                            }\n                            if (factory && test.state == TestState.Running)\n                                test.state = TestState.Pass\n                            // pause for a second\n                            await delay(1000)\n                            pixels.fill(0)\n                            if (!mounted) break\n                            await pixelsRegister.sendSetPackedAsync(\n                                [pixels],\n                                true,\n                            )\n                            await delay(500)\n                        }\n                    }\n                }\n            }\n            work()\n            return () => {\n                mounted = false\n            }\n        },\n    },\n    [SRV_SERVO]: {\n        name: \"change angle\",\n        manualSteps: {\n            validate:\n                \"verify arm is moving between 0 (min), 1/3, 1/2, and 1 (max)\",\n        },\n        start: test => {\n            const { factory } = test\n            let mounted = true\n            const work = async () => {\n                test.state = TestState.Running\n                const service = test.service\n                const enabled = service.intensityRegister\n                const angleRegister = service.valueRegister\n                const actualAngleRegister = service.readingRegister\n                const minAngleRegister = service.register(ServoReg.MinAngle)\n                const maxAngleRegister = service.register(ServoReg.MaxAngle)\n\n                while (mounted) {\n                    await minAngleRegister.refresh()\n                    await maxAngleRegister.refresh()\n                    const minAngle: number =\n                        minAngleRegister.unpackedValue?.[0] || 0\n                    const maxAngle: number =\n                        maxAngleRegister?.unpackedValue?.[0] || 0\n\n                    const na = 9\n                    const da = (maxAngle - minAngle) / (na - 1)\n                    const angles = [\n                        ...Array(na)\n                            .fill(0)\n                            .map((_, i) => minAngle + i * da),\n                        ...Array(na)\n                            .fill(0)\n                            .map((_, i) => maxAngle - i * da),\n                    ]\n                    const tolerance = (maxAngle - minAngle) / 10\n\n                    // min angle\n                    for (const angle of angles) {\n                        if (!mounted) break\n\n                        await enabled.sendSetBoolAsync(true)\n                        await angleRegister.sendSetPackedAsync([angle])\n\n                        await delay(700)\n                        await angleRegister.sendGetAsync()\n                        await actualAngleRegister.sendGetAsync()\n\n                        if (!actualAngleRegister.notImplemented) {\n                            const angle: number =\n                                angleRegister.unpackedValue?.[0]\n                            const actualAngle: number =\n                                actualAngleRegister.unpackedValue?.[0]\n                            if (Math.abs(actualAngle - angle) > tolerance) {\n                                test.state = TestState.Fail\n                                test.output = `expected angle ${angle}, got actual angle ${actualAngle}`\n                            }\n                        }\n                    }\n\n                    if (factory && test.state == TestState.Running)\n                        test.state = TestState.Pass\n                }\n\n                // turn off servo\n                await enabled.sendSetBoolAsync(false)\n            }\n            work()\n            return () => {\n                mounted = false\n            }\n        },\n    },\n    [SRV_LED_STRIP]: {\n        name: \"cycle red, green, blue colors on all LEDs\",\n        manualSteps: {\n            validate: \"verify colors on LED\",\n        },\n        start: test => {\n            const { factory } = test\n            let mounted = true\n            const work = async () => {\n                test.state = TestState.Running\n                const service = test.service\n                let k = 0\n                while (mounted) {\n                    const color = testColors[k++ % testColors.length]\n                    const encoded = lightEncode(\n                        `setall #\n                            show 20`,\n                        [color],\n                    )\n                    await service?.sendCmdAsync(LedStripCmd.Run, encoded)\n                    await delay(500)\n                    if (factory && test.state == TestState.Running)\n                        test.state = TestState.Pass\n                }\n            }\n            work()\n            return () => {\n                mounted = false\n            }\n        },\n    },\n    [SRV_BUZZER]: {\n        name: \"beeps every 200ms every 1s, with increasing frequency\",\n        manualSteps: {\n            validate: \"sounds can be heard\",\n        },\n        start: test => {\n            const { factory } = test\n            let mounted = true\n            const pack = (frequency: number, ms: number, volume: number) => {\n                const period = (1000000 / frequency) | 0\n                const duty = (period * volume) >> 11\n                return jdpack<[number, number, number]>(\"u16 u16 u16\", [\n                    period,\n                    duty,\n                    ms,\n                ])\n            }\n            const work = async () => {\n                test.state = TestState.Running\n                let f = 440\n                while (mounted) {\n                    const service = test.service\n                    if (!service) {\n                        await delay(500)\n                        return\n                    }\n                    await service.sendCmdAsync(\n                        BuzzerCmd.PlayTone,\n                        pack(f, 200, 20),\n                    )\n                    await delay(1000)\n                    f = f << 1\n                    if (f > 4096) f = 440\n                    if (factory && test.state == TestState.Running)\n                        test.state = TestState.Pass\n                }\n            }\n            // start work async\n            work()\n            return () => {\n                mounted = false\n            }\n        },\n    },\n    [SRV_POWER]: {\n        name: \"power on/off at a 3s interval\",\n        manualSteps: {\n            validate: \"power can be observed\",\n        },\n        start: test => {\n            const { factory } = test\n            const INTERVAL = 3000\n            let mounted = true\n            const work = async () => {\n                test.state = TestState.Running\n                while (mounted) {\n                    const service = test.service\n                    if (!service) {\n                        await delay(500)\n                        return\n                    }\n                    let ok = true\n                    const allowed = service.register(PowerReg.Allowed)\n                    const powerStatus = service.register(PowerReg.PowerStatus)\n                    const currentDraw = service.register(PowerReg.CurrentDraw)\n                    await allowed.sendSetBoolAsync(true, true)\n                    await delay(INTERVAL)\n                    await powerStatus.refresh()\n\n                    // check state\n                    if (\n                        powerStatus.unpackedValue?.[0] !=\n                        PowerPowerStatus.Powering\n                    ) {\n                        test.output = \"power status is not powering\"\n                        ok = false\n                    } else if (!currentDraw.notImplemented) {\n                        await currentDraw.refresh()\n                        if (currentDraw.uintValue == 0) {\n                            test.output = \"current draw is 0\"\n                            ok = false\n                        }\n                    }\n\n                    // turn off power\n                    await allowed.sendSetBoolAsync(false, true)\n                    await delay(INTERVAL)\n\n                    // check state\n                    await powerStatus.refresh()\n                    if (\n                        powerStatus.unpackedValue?.[0] !=\n                        PowerPowerStatus.Disallowed\n                    ) {\n                        test.output = \"power status is not dissallowed\"\n                        ok = false\n                    } else if (!currentDraw.notImplemented) {\n                        await currentDraw.refresh()\n                        if (currentDraw.uintValue != 0) {\n                            test.output = \"current draw is 0\"\n                            ok = false\n                        }\n                    }\n\n                    if (ok && factory && test.state == TestState.Running)\n                        test.state = TestState.Pass\n                }\n            }\n            // start work async\n            work()\n            return () => {\n                mounted = false\n            }\n        },\n    },\n    [SRV_VIBRATION_MOTOR]: {\n        name: \"vibration with increasing duration, strength\",\n        manualSteps: {\n            validate: \"vibration can be detected\",\n        },\n        start: test => {\n            const { factory } = test\n            const MAX_DURATION = 512\n            let mounted = true\n            const pack = (ms: number, volume: number) => {\n                return jdpack<[[number, number][]]>(\"r: u8 u0.8\", [\n                    [[ms >> 3, volume]],\n                ])\n            }\n            const work = async () => {\n                test.state = TestState.Running\n                let ms = 64\n                while (mounted) {\n                    const service = test.service\n                    if (!service) {\n                        await delay(500)\n                        return\n                    }\n                    await service.sendCmdAsync(\n                        VibrationMotorCmd.Vibrate,\n                        pack(ms, ms / MAX_DURATION),\n                    )\n                    await delay(ms + 1000)\n                    ms = ms << 1\n                    if (ms > MAX_DURATION) {\n                        ms = 64\n                        if (factory && test.state == TestState.Running)\n                            test.state = TestState.Pass\n                    }\n                }\n            }\n            // start work async\n            work()\n            return () => {\n                mounted = false\n            }\n        },\n    },\n    [SRV_ROTARY_ENCODER]: {\n        name: \"rotate clockwise slowly 1 full turn, without missing a click\",\n        start: test => {\n            const { factory } = test\n            let mounted = true\n            const work = async () => {\n                test.state = TestState.Running\n                const service = test.service\n                const clicksPerTurnRegister = service.register(\n                    RotaryEncoderReg.ClicksPerTurn,\n                )\n                const positionRegister = service.register(\n                    RotaryEncoderReg.Position,\n                )\n\n                // read number of clicks\n                test.output = \"reading clicks per turn\"\n                let clicksPerTurn = 0\n                while (mounted && !clicksPerTurn) {\n                    await delay(100)\n                    await clicksPerTurnRegister.refresh()\n                    clicksPerTurn = clicksPerTurnRegister\n                        .unpackedValue?.[0] as number\n                }\n\n                let lastPosition: number = undefined\n                let count = 0\n                while (mounted) {\n                    await positionRegister.refresh()\n                    const position = positionRegister.unpackedValue?.[0]\n                    if (lastPosition === position) await delay(20)\n                    else if (\n                        lastPosition === undefined ||\n                        (lastPosition + 1) % clicksPerTurn ===\n                            position % clicksPerTurn\n                    ) {\n                        lastPosition = position % clicksPerTurn\n                        count++\n                        if (count === clicksPerTurn) {\n                            test.output = `${count}/${clicksPerTurn} at ${lastPosition}`\n                            test.state = TestState.Pass\n                            break\n                        }\n                    } else {\n                        lastPosition = position % clicksPerTurn\n                        count = 0\n                    }\n                    test.output = `${count}/${clicksPerTurn} at ${lastPosition}`\n                    if (factory && test.state == TestState.Running)\n                        test.state = TestState.Pass\n                }\n                // look for full sequence\n            }\n            work()\n            return () => {\n                mounted = false\n            }\n        },\n    },\n}\n\nexport function resolveServiceCommandTest(serviceClass: number) {\n    return builtinServiceCommandTests[serviceClass]\n}\n"],"names":["PANEL_TEST_KIND","DEVICE_TEST_KIND","DEVICE_STATS_TEST_KIND","STATUS_LIGHT_TEST_KIND","SERVICE_TEST_KIND","SERVICE_COMMAND_TEST_KIND","REGISTER_TEST_KIND","EVENT_TEST_KIND","REGISTER_ORACLE_KIND","DEVICE_STATS_MAX_RESTARTS","DEVICE_STATS_MAX_DROPPED_PACKETS","DEVICE_STATS_MIN_ANNOUNCE_PACKETS","TestNode","_id","randomDeviceId","_state","TestState","Indeterminate","_uploadState","TestUploadState","Local","_node","undefined","_children","subscriptions","_name","_manualSteps","value","c","prepare","output","state","prepared","resolveOracle","o","reg","arrayConcatMany","child","appendChild","Math","export","children","res","id","name","kind","PanelTest","specification","found","time","userAgent","navigator","DeviceTest","productIdentifier","testSpecification","test","device","bind","unboundDevices","ignoreInfrastructure","d","deviceTests","t","oracles","oracle","deviceId","shortId","firmwareVersion","DeviceStatsTest","mounted","work","stats","delay","updateState","StatusLightTest","statusLight","ServiceTest","serviceClass","service","unboundServices","srv","serviceTests","st","s","serviceIndex","ServiceMemberTestNode","ServiceCommandTest","options","unsubscribe","start","RegisterTestNode","code","register","RegisterOracle","tolerance","SystemReg","RegisterTest","computeState","log","logger","msg","e","EventTest","event","testColors","builtinTestRules","type","manualSteps","factory","steps","duration","intensity","eventName","samples","op","builtinReadingTolerances","addReadingTest","seenEventArg","GamepadReg","seen","buttons","addEventTest","GamepadEvent","parseInt","GamepadButtons","isNaN","LRUD","key","builtinServiceCommandTests","buttonsAvailable","createGamepadButtonTests","hasChildren","validate","dotsRegister","DotMatrixReg","brightnessRegister","dots","brightness","Promise","pixelsRegister","LedReg","numPixelsRegister","n","pixels","k","color","i","ci","enabled","angleRegister","actualAngleRegister","minAngleRegister","ServoReg","maxAngleRegister","minAngle","maxAngle","na","da","angles","Array","angle","actualAngle","encoded","lightEncode","LedStripCmd","pack","period","duty","jdpack","f","BuzzerCmd","INTERVAL","ok","allowed","PowerReg","powerStatus","currentDraw","PowerPowerStatus","MAX_DURATION","ms","VibrationMotorCmd","clicksPerTurnRegister","RotaryEncoderReg","positionRegister","clicksPerTurn","lastPosition","count","position"],"sourceRoot":""}