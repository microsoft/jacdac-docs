{"version":3,"file":"1560-9ff5324b448a1ad97f66.js","mappings":";;;;;;;;;;;;;;;;;;;AAee,uCAA+D,CAC1E,GAAM,UAAN,MAEA,GAAMA,CAAAA,gBAAgB,CAAGC,uEAAW,SAAUC,6GAAV,CAApC,CACA,GAAMC,CAAAA,eAAe,CAAGF,uEAAW,SAAUC,uGAAV,CAAnC,CAEA,GAAM,aAAeE,4FAAwB,kBAA7C,KAA6C,CAA7C,CAIA,GAAM,gBAAkBA,4FAAwB,iBAAhD,KAAgD,CAAhD,CAKA,GAAMC,CAAAA,MAAM,CAAGC,4EAAgB,CAA/B,OAA+B,CAA/B,CACA,GAAMC,CAAAA,KAAK,CAAGF,MAAM,aAApB,UACA,GAAM,+BAAoCG,4EAAc,CAAxD,KAAwD,CAAxD,CACA,GAAMC,CAAAA,UAAU,CAAhB,0BAEA,GAAMC,CAAAA,QAAQ,CAAd,IACA,GAAMC,CAAAA,UAAU,CAAG,IAAM,CACrBN,MAAM,CAANA,OAAAA,CAAAA,SAAAA,CAAyB,CAACO,UAAU,CAAVA,CAAAA,CAAAA,CAAAA,CAA1BP,GAAyB,CAAzBA,EACAL,gBAAgB,CAAhBA,OAAAA,GAFJ,EAIA,GAAMa,CAAAA,WAAW,CAAGC,6EAAiB,iBAEjCT,MAAM,EAFV,UAAqC,CAArC,CAKA,GAAMU,CAAAA,gBAAgB,CAAGC,6EAAiB,CAACJ,UAAU,EAAX,EAAkBF,QAAQ,EAApE,CAA0C,CAA1C,CAEA,GAAMO,CAAAA,CAAC,CAAP,GACA,GAAMC,CAAAA,CAAC,CAAP,GACA,GAAMC,CAAAA,CAAC,CAAP,EACA,GAAMC,CAAAA,EAAE,CAAGC,aAAa,GAAKC,yHAAlBD,CAAAA,EAAAA,CAAX,GACA,GAAME,CAAAA,EAAE,CAAGN,CAAC,EAAZ,EACA,GAAMO,CAAAA,CAAC,CAAG,CAACP,CAAC,CAADA,EAAAA,CAAD,MAAqBF,gBAAgB,CAAjB,QAACA,CAA/B,GACA,GAAMU,CAAAA,EAAE,CAAR,GACA,GAAMC,CAAAA,IAAI,CAAV,OACA,GAAMC,CAAAA,MAAM,CAAZ,OAEA,mBACI,sHAAW,KAAK,CAAhB,EAAqB,MAAM,CAA3B,EAAgC,IAAI,CAApC,yBACI,uEACI,CAAC,CADL,EAEI,CAAC,CAFL,EAGI,KAAK,CAAEV,CAAC,EAHZ,EAII,MAAM,CAJV,EAKI,IAAI,CALR,KAMI,aANJ,aADJ,WACI,EADJ,cAUI,uEACI,CAAC,CAAEA,CAAC,EADR,EAEI,CAAC,CAFL,EAGI,KAAK,CAAEA,CAAC,EAHZ,EAII,MAAM,CAJV,EAKI,IAAI,CALR,OAMI,aANJ,eAVJ,WAUI,EAVJ,cAmBI,sDAAG,SAAS,sBAAqBC,CAAC,CAADA,CAAAA,CAArB,IAAZ,kBACI,uEACI,CAAC,CADL,EAEI,CAAC,CAFL,EAGI,KAAK,CAHT,GAII,MAAM,CAJV,GAKI,IAAI,CALR,YADJ,WACI,EADJ,cASI,2DACI,EAAE,CAAEE,EAAE,EADV,EAEI,EAAE,CAAEK,EAAE,CAFV,EAGI,CAAC,CAAEL,EAAE,CAAFA,CAAAA,CAHP,EAII,IAAI,CAJR,KAKI,MAAM,CALV,kBAMI,WAAW,CANf,EAOI,KAAK,CAAE,CAAEQ,UAAU,CAAZ,OAAsBC,aAAa,CAhBlD,MAgBe,CAPX,EATJ,cAkBI,2DACI,EAAE,CAAET,EAAE,EADV,EAEI,EAAE,CAAGK,EAAE,CAAH,CAACA,CAFT,EAGI,CAAC,CAAEL,EAAE,CAAFA,CAAAA,CAHP,EAII,IAAI,CAJR,OAKI,MAAM,CALV,kBAMI,WAAW,CANf,EAOI,KAAK,CAAE,CAAEQ,UAAU,CAAZ,OAAsBC,aAAa,CA7C1D,MA6CuB,CAPX,EAlBJ,CAnBJ,CADJ,CAkDH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardReflectedLight.tsx"],"sourcesContent":["import React from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useThrottledValue from \"../hooks/useThrottledValue\"\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\"\nimport { ReflectedLightServer } from \"../../../jacdac-ts/src/servers/reflectedlightserver\"\nimport {\n    ReflectedLightReg,\n    ReflectedLightVariant,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardReflectedLight(props: DashboardServiceProps) {\n    const { service } = props\n\n    const brighessRegister = useRegister(service, ReflectedLightReg.Brightness)\n    const variantRegister = useRegister(service, ReflectedLightReg.Variant)\n\n    const [brightness] = useRegisterUnpackedValue<[number]>(\n        brighessRegister,\n        props\n    )\n    const [sensorVariant] = useRegisterUnpackedValue<[ReflectedLightVariant]>(\n        variantRegister,\n        props\n    )\n\n    const server = useServiceServer<ReflectedLightServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground } = useWidgetTheme(color)\n    const widgetSize = `clamp(3rem, 10vw, 10vh)`\n\n    const maxValue = 1.0\n    const handleDown = () => {\n        server.reading.setValues([brightness > 0 ? 0 : 1.0])\n        brighessRegister.refresh()\n    }\n    const buttonProps = useSvgButtonProps<SVGRectElement>(\n        \"line detector\",\n        server && handleDown\n    )\n\n    const actualBrightness = useThrottledValue(brightness || 0, maxValue << 2)\n\n    const w = 64\n    const h = 64\n    const m = 4\n    const sw = sensorVariant === ReflectedLightVariant.InfraredAnalog ? 32 : 16\n    const dx = w >> 1\n    const x = (w - sw - dx) / 2 + (actualBrightness / maxValue) * dx\n    const sh = 32\n    const dark = \"#000\"\n    const bright = \"#ddd\"\n\n    return (\n        <SvgWidget width={w} height={h} size={widgetSize}>\n            <rect\n                x={0}\n                y={0}\n                width={w >> 1}\n                height={h}\n                fill={dark}\n                aria-label=\"dark area\"\n                {...buttonProps}\n            />\n            <rect\n                x={w >> 1}\n                y={0}\n                width={w >> 1}\n                height={h}\n                fill={bright}\n                aria-label=\"bright area\"\n                {...buttonProps}\n            />\n            <g transform={`translate(${x}, ${h - m - sh})`}>\n                <rect\n                    x={0}\n                    y={0}\n                    width={sw}\n                    height={sh}\n                    fill={background}\n                    {...buttonProps}\n                />\n                <circle\n                    cx={sw >> 1}\n                    cy={sh / 3}\n                    r={sw / 2 - 4}\n                    fill={dark}\n                    stroke={controlBackground}\n                    strokeWidth={2}\n                    style={{ userSelect: \"none\", pointerEvents: \"none\" }}\n                />\n                <circle\n                    cx={sw >> 1}\n                    cy={(sh * 2) / 3}\n                    r={sw / 2 - 4}\n                    fill={bright}\n                    stroke={controlBackground}\n                    strokeWidth={2}\n                    style={{ userSelect: \"none\", pointerEvents: \"none\" }}\n                />\n            </g>\n        </SvgWidget>\n    )\n}\n"],"names":["brighessRegister","useRegister","ReflectedLightReg","variantRegister","useRegisterUnpackedValue","server","useServiceServer","color","useWidgetTheme","widgetSize","maxValue","handleDown","brightness","buttonProps","useSvgButtonProps","actualBrightness","useThrottledValue","w","h","m","sw","sensorVariant","ReflectedLightVariant","dx","x","sh","dark","bright","userSelect","pointerEvents"],"sourceRoot":""}