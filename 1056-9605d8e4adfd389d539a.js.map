{"version":3,"file":"1056-9605d8e4adfd389d539a.js","mappings":";;;;;;;;;;;;;;;;;AAce,+BAAuD,CAClE,GAAM,UAAN,MAEA,GAAMA,CAAAA,gBAAgB,CAAGC,uEAAW,SAAUC,6GAAV,CAApC,CACA,GAAMC,CAAAA,gBAAgB,CAAGF,uEAAW,SAAUC,6GAAV,CAApC,CACA,GAAME,CAAAA,gBAAgB,CAAGH,uEAAW,SAAUC,6GAAV,CAApC,CACA,GAAMG,CAAAA,cAAc,CAAGJ,uEAAW,SAAUC,iHAAV,CAAlC,CAEA,GAAMI,CAAAA,QAAQ,CAAGC,4FAAwB,kBAAzC,KAAyC,CAAzC,CACA,GAAMC,CAAAA,QAAQ,CAAGD,4FAAwB,kBAAzC,KAAyC,CAAzC,CACA,GAAME,CAAAA,QAAQ,CAAGF,4FAAwB,kBAAzC,KAAyC,CAAzC,CACA,GAAMG,CAAAA,MAAM,CAAGH,4FAAwB,gBAAvC,KAAuC,CAAvC,CAKA,GAAMI,CAAAA,UAAU,EAAML,QAAQ,EAAd,eAA8BE,QAAQ,EAAtC,MACZ,OAAM,GAAN,YAAM,OAAN,gBAAM,CAAN,CAAM,CAAN,GADY,MAEbC,QAAQ,EAFX,GAAgB,CAAhB,CAIAG,gDAAS,CACL,IACIC,OAAO,CAAPA,SAAAA,CAAAA,oFAAAA,CAAmCC,GAAD,EAAiB,CAC/C,GAAM,sBAAN,IACA,GAAIC,cAAc,GAAKC,6GAAvB,CAA2C,CACvCC,OAAO,CAAPA,GAAAA,CAAYC,0EAAK,CAAjBD,IAAiB,CAAjBA,EAEP,CAPA,CAEDJ,CAFC,CAQL,CARJD,OAQI,CARK,CAATA,CAWA,mBACI,kHAAM,SAAS,CAAf,KAAgB,OAAO,CAAvB,gBACI,kHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,IAFR,UAEQ,CADJ,CADJ,CAOH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardSerial.tsx"],"sourcesContent":["import React, { useEffect } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    SerialCmd,\n    SerialParityType,\n    SerialReg,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { Grid } from \"@mui/material\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useRegister from \"../hooks/useRegister\"\nimport { Packet } from \"../../../jacdac-ts/src/jdom/packet\"\nimport { REPORT_RECEIVE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { toHex } from \"../../../jacdac-ts/src/jdom/utils\"\n\nexport default function DashboardSerial(props: DashboardServiceProps) {\n    const { service } = props\n\n    const baudRateRegister = useRegister(service, SerialReg.BaudRate)\n    const dataBitsRegister = useRegister(service, SerialReg.DataBits)\n    const stopBitsRegister = useRegister(service, SerialReg.StopBits)\n    const parityRegister = useRegister(service, SerialReg.ParityMode)\n\n    const baudRate = useRegisterUnpackedValue<[number]>(baudRateRegister, props)\n    const dataBits = useRegisterUnpackedValue<[number]>(dataBitsRegister, props)\n    const stopBits = useRegisterUnpackedValue<[number]>(stopBitsRegister, props)\n    const parity = useRegisterUnpackedValue<[SerialParityType]>(\n        parityRegister,\n        props\n    )\n\n    const connection = `${baudRate || \"?\"} baud/${dataBits || \"?\"}${\n        parity?.[0] || \"?\"\n    }${stopBits || \"?\"}`\n\n    useEffect(\n        () =>\n            service.subscribe(REPORT_RECEIVE, (pkt: Packet) => {\n                const { data, serviceCommand } = pkt\n                if (serviceCommand === SerialCmd.Received) {\n                    console.log(toHex(data))\n                }\n            }),\n        [service]\n    )\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                {connection}\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["baudRateRegister","useRegister","SerialReg","dataBitsRegister","stopBitsRegister","parityRegister","baudRate","useRegisterUnpackedValue","dataBits","stopBits","parity","connection","useEffect","service","pkt","serviceCommand","SerialCmd","console","toHex"],"sourceRoot":""}