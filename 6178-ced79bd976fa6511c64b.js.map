{"version":3,"file":"6178-ced79bd976fa6511c64b.js","mappings":";;;;;;;;;;;;;;;;AAOe,8BAIZ,eACC,GAAM,kCAAN,MACA,GAAMA,CAAAA,YAAY,CAAGC,2EAAM,6GACnB,YAAW,GAAX,iBAAW,OAAX,qBAAW,CAAX,0BAAuCC,CAAC,EAAI,CAAC,CAA7C,KADmB,sGAEnB,yFAAQ,CAAR,YAAQ,CAAR,kDACMC,EAAE,0DAAIC,2GAAuC,CAA3C,EAA2C,CAA3C,gDAAIA,qBAAAA,CAAJ,QADR,UAEQF,CAAC,EAAI,CAAC,CAFd,KAFR,EAA2B,GAA3B,CAOA,GAAMG,CAAAA,KAAK,CAAGC,sDAAc,CAA5B,YAA4B,CAA5B,CAyCA,GAAMC,CAAAA,KAAK,CAAGC,8CAAO,CAAC,IAAM,CACxB;AACA,GAAID,CAAAA,KAAK,CAAGF,KAAK,CAALA,MAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAuBI,IAAI,EAAIA,IAAI,CAA/C,IAAYJ,CAAZ,CACA;AACA,GAAIL,YAAJ,OAAIA,EAAAA,YAAJ,SAAIA,EAAAA,YAAY,CAAhB,OACIO,KAAK,CAAGA,KAAK,CAALA,MAAAA,CAAaG,IAAI,EACrBV,YAAY,CAAZA,IAAAA,CACIW,CAAC,mCAAI,4BAAI,CAAJ,sGAAwC,CAA5C,EAFTJ,CACIP,CADIO,CAARA,CAKJ;AACAA,KAAK,CAAGA,KAAK,CAALA,IAAAA,CAAW,OAAU,mCACzB,GAAMK,CAAAA,EAAE,CAAGC,MAAM,iBAACC,CAAC,CAAF,oDAACA,cAAAA,CAAPD,KAAM,CAANA,EAAX,GACA,GAAME,CAAAA,EAAE,CAAGF,MAAM,iBAACG,CAAC,CAAF,oDAACA,cAAAA,CAAPH,KAAM,CAANA,EAAX,GACA,GAAMI,CAAAA,CAAC,CAAGL,EAAE,CAAZ,GACA,KAAO,SACP,MAAOE,CAAAA,CAAC,CAADA,MAAAA,CAAAA,IAAAA,CAAAA,aAAAA,CAA4BE,CAAC,CAADA,MAAAA,CAAnC,IAAOF,CAAP,CALJP,CAAQA,CAARA,CAOA,MAAOA,CAAAA,KAAK,CAALA,GAAAA,CAAU,UAAC,QAAD,WAAC,EAAD,WAA8B,CAC3CW,IAAI,CAAEC,MAAM,CAD+B,KAE3CC,KAAK,CAAEC,WAAW,CAFyB,MAG3CC,WAAW,CAAED,WAAW,CAHmB,YAI3CE,QAAQ,CAAEF,WAAW,CAJR,QAA8B,CAA9B,CAAjB,CAAOd,CAAP,CAlBiB,EAwBlB,CAACP,YAAY,CAAZA,IAAAA,CAxBJ,GAwBIA,CAAD,CAxBkB,CAArB,CA0BA,mBAAO,oHAAc,MAAM,CAApB,OAA8B,KAAK,CAA1C,KAAO,EAAP,CACH","sources":["webpack://jacdac-docs/./src/components/python/PythonProjects.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\"\nimport React, { useMemo } from \"react\"\nimport { ReactNode } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport { arrayify, unique } from \"../../../jacdac-ts/src/jdom/utils\"\nimport PageLinkList from \"../ui/PageLinkList\"\n\nexport default function PythonProjects(props: {\n    header?: ReactNode\n    serviceClass?: number | number[]\n    serviceName?: string\n}) {\n    const { serviceName, serviceClass, header } = props\n    const serviceNames = unique([\n        ...(serviceName?.split(/\\s*,\\s*/gi).filter(s => !!s) || []),\n        ...(arrayify(serviceClass)\n            ?.map(sc => serviceSpecificationFromClassIdentifier(sc)?.shortId)\n            .filter(s => !!s) || []),\n    ])\n\n    const query = useStaticQuery<{\n        allMdx: {\n            edges: {\n                node: {\n                    fields: {\n                        slug: string\n                    }\n                    frontmatter: {\n                        title?: string\n                        order?: number\n                        services?: string\n                        description?: string\n                    }\n                }\n            }[]\n        }\n    }>(graphql`\n        {\n            allMdx(\n                filter: {\n                    fields: { slug: { glob: \"/clients/python/projects/*\" } }\n                }\n            ) {\n                edges {\n                    node {\n                        id\n                        fields {\n                            slug\n                        }\n                        frontmatter {\n                            title\n                            order\n                            services\n                            description\n                        }\n                    }\n                }\n            }\n        }\n    `)\n\n    const nodes = useMemo(() => {\n        // grab the nodes\n        let nodes = query.allMdx.edges.map(edge => edge.node)\n        // filter out\n        if (serviceNames?.length)\n            nodes = nodes.filter(node =>\n                serviceNames.some(\n                    n => node.frontmatter.services?.indexOf(n) > -1\n                )\n            )\n        // order nodes\n        nodes = nodes.sort((l, r) => {\n            const lo = Number(l.frontmatter?.order) || 50\n            const ro = Number(r.frontmatter?.order) || 50\n            const c = lo - ro\n            if (c) return c\n            return l.fields.slug.localeCompare(r.fields.slug)\n        })\n        return nodes.map(({ fields, frontmatter }) => ({\n            slug: fields.slug,\n            title: frontmatter.title,\n            description: frontmatter.description,\n            services: frontmatter.services,\n        }))\n    }, [serviceNames.join(\",\")])\n\n    return <PageLinkList header={header} nodes={nodes} />\n}\n"],"names":["serviceNames","unique","s","sc","serviceSpecificationFromClassIdentifier","query","useStaticQuery","nodes","useMemo","edge","node","n","lo","Number","l","ro","r","c","slug","fields","title","frontmatter","description","services"],"sourceRoot":""}