{"version":3,"file":"4225-3ec9dde9b7b34bafff2a.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAoBe,8BAAsD,2BACjE,GAAM,2BAAN,MAEA,GAAMA,CAAAA,eAAe,CAAGC,uEAAW,SAAUC,8FAAV,CAAnC,CACA,GAAMC,CAAAA,mBAAmB,CAAGF,uEAAW,SAAUC,sGAAV,CAAvC,CACA,GAAME,CAAAA,qBAAqB,CAAGH,uEAAW,SAAUC,0GAAV,CAAzC,CACA,GAAMG,CAAAA,2BAA2B,CAAGJ,uEAAW,SAE3CC,sHAF2C,CAA/C,CAIA,GAAMI,CAAAA,yBAAyB,CAAGL,uEAAW,SAEzCC,kHAFyC,CAA7C,CAKA,GAAMK,CAAAA,OAAO,CAAGC,wFAAoB,iBAApC,KAAoC,CAApC,CACA,GAAM,cAAgBC,4FAAwB,qBAA9C,KAA8C,CAA9C,CAIA,GAAM,gBAAkBA,4FAAwB,uBAAhD,KAAgD,CAAhD,CAKA,GAAMC,CAAAA,MAAM,CAAGC,4EAAgB,CAA/B,OAA+B,CAA/B,CACA,GAAMC,CAAAA,KAAK,CAAGF,MAAM,aAApB,UAEA,GAAIG,WAAW,GAAf,UACI,mBAAO,mIAAgC,QAAQ,CAA/C,mBAAO,EAAP,CAEJ,GAAMC,CAAAA,GAAG,CAAG,CAAZ,QACA,GAAMC,CAAAA,KAAK,CAAGD,GAAG,OAEXD,WAAW,GAAKG,wGAAhBH,CAAAA,IAAAA,CAEAI,0FAAQ,wBAACD,sFAAgB,CAAjB,WAAiB,CAAjB,gDAACA,qBAAAA,CAJf,WAIeA,EAAD,CAJd,CAMA,GAAME,CAAAA,aAAa,CAAG,IAAMlB,eAAe,CAAfA,gBAAAA,CAAiC,CAAjCA,OAAAA,CAA5B,IAA4BA,CAA5B,CAEA,mBACI,mHAAM,SAAS,CAAf,KAAgB,OAAO,CAAvB,EAA4B,UAAU,CAAtC,uBACI,mHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,uHACI,KAAK,CACDa,WAAW,GAAKG,wGAAhBH,EACAA,WAAW,GAAKG,kHADhBH,CAAAA,OAAAA,CAFR,MAOI,KAAK,CAPT,MAQI,OAAO,CAAE,CARb,IASI,QAAQ,CAXpB,aAEQ,EADJ,CADJ,CAcKM,aAAa,GAAbA,SAAAA,EAAAA,aACG,mHAAM,IAAI,CAAV,mBACI,uHACI,KAAK,CADT,UAEI,KAAK,CAAEC,IAAI,CAAJA,KAAAA,CAAWD,aAAa,CAFnC,GAEWC,CAFX,CAGI,GAAG,CAHP,EAII,GAAG,CApBnB,GAgBY,EADJ,CAfR,CAwBKC,QAAQ,eACL,mHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,kHACI,QAAQ,CADZ,4BAEI,gBAAgB,CAFpB,MAGI,OAAO,CA7BvB,OA0BY,EADJ,CAzBR,CAiCKA,QAAQ,eACL,mHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,kHACI,QAAQ,CADZ,0BAEI,gBAAgB,CAFpB,MAGI,OAAO,CAvC3B,OAoCgB,EADJ,CAlCR,CADJ,CA6CH;;;;;;;;;;;;;;wBCrGc,+BAIb,CACE,GAAM,QAAN,MAAkBC,MAAlB,+HACA,GAAMC,CAAAA,OAAO,CAAGC,4CAAhB,GACA,GAAMC,CAAAA,QAAQ,CAAGF,OAAO,CAAxB,WAEA,mBACI,+GACI,iHAAY,EAAE,CAAd,QAAyB,OAAO,CAAhC,UAA2C,YAAY,CAAvD,MADJ,KACI,CADJ,cAII,gIACI,EAAE,CADN,SAEI,kBAFJ,QAGI,aAHJ,MAII,iBAAiB,CAJrB,QALR,MAKQ,EAJJ,CADJ,CAcH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardPower.tsx","webpack://jacdac-docs/./src/components/ui/SliderWithLabel.tsx"],"sourcesContent":["import React from \"react\"\nimport {\n    PowerPowerStatus,\n    PowerReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { ReflectedLightServer } from \"../../../jacdac-ts/src/servers/reflectedlightserver\"\nimport useRegister from \"../hooks/useRegister\"\nimport { humanify } from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\nimport { Grid } from \"@mui/material\"\nimport RegisterInput from \"../RegisterInput\"\nimport SliderWithLabel from \"../ui/SliderWithLabel\"\nimport SwitchWithLabel from \"../ui/SwitchWithLabel\"\n\nexport default function DashboardPower(props: DashboardServiceProps) {\n    const { service, expanded, visible } = props\n\n    const allowedRegister = useRegister(service, PowerReg.Allowed)\n    const powerStatusRegister = useRegister(service, PowerReg.PowerStatus)\n    const batteryChargeRegister = useRegister(service, PowerReg.BatteryCharge)\n    const keepOnPulseDurationRegister = useRegister(\n        service,\n        PowerReg.KeepOnPulseDuration\n    )\n    const keepOnPulsePeriodRegister = useRegister(\n        service,\n        PowerReg.KeepOnPulsePeriod\n    )\n\n    const allowed = useRegisterBoolValue(allowedRegister, props)\n    const [powerStatus] = useRegisterUnpackedValue<[PowerPowerStatus]>(\n        powerStatusRegister,\n        props\n    )\n    const [batteryCharge] = useRegisterUnpackedValue<[number]>(\n        batteryChargeRegister,\n        props\n    )\n\n    const server = useServiceServer<ReflectedLightServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n\n    if (powerStatus === undefined)\n        return <DashboardRegisterValueFallback register={powerStatusRegister} />\n\n    const off = !allowed\n    const label = off\n        ? \"off\"\n        : powerStatus === PowerPowerStatus.Powering\n        ? \"on\"\n        : humanify(PowerPowerStatus[powerStatus]?.toLowerCase())\n\n    const toggleEnabled = () => allowedRegister.sendSetBoolAsync(!allowed, true)\n\n    return (\n        <Grid container spacing={1} alignItems=\"center\">\n            <Grid item xs={12}>\n                <SwitchWithLabel\n                    color={\n                        powerStatus === PowerPowerStatus.Overload ||\n                        powerStatus === PowerPowerStatus.Overprovision\n                            ? \"error\"\n                            : color\n                    }\n                    label={label}\n                    checked={!off}\n                    onChange={toggleEnabled}\n                />\n            </Grid>\n            {batteryCharge !== undefined && (\n                <Grid item>\n                    <SliderWithLabel\n                        label=\"battery\"\n                        value={Math.floor(batteryCharge * 100)}\n                        min={0}\n                        max={100}\n                    />\n                </Grid>\n            )}\n            {expanded && (\n                <Grid item xs={12}>\n                    <RegisterInput\n                        register={keepOnPulseDurationRegister}\n                        showRegisterName={false}\n                        visible={visible}\n                    />\n                </Grid>\n            )}\n            {expanded && (\n                <Grid item xs={12}>\n                    <RegisterInput\n                        register={keepOnPulsePeriodRegister}\n                        showRegisterName={false}\n                        visible={visible}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import { Slider, SliderProps, Typography } from \"@mui/material\"\nimport React from \"react\"\nimport { useId } from \"react\"\n\nexport default function SliderWithLabel(\n    props: {\n        label?: string\n    } & SliderProps\n) {\n    const { label, ...others } = props\n    const labelId = useId()\n    const sliderId = labelId + \"sliderId\"\n\n    return (\n        <>\n            <Typography id={labelId} variant=\"caption\" gutterBottom>\n                {label}\n            </Typography>\n            <Slider\n                id={sliderId}\n                aria-labelledby={labelId}\n                aria-label={label}\n                valueLabelDisplay=\"auto\"\n                {...others}\n            />\n        </>\n    )\n}\n"],"names":["allowedRegister","useRegister","PowerReg","powerStatusRegister","batteryChargeRegister","keepOnPulseDurationRegister","keepOnPulsePeriodRegister","allowed","useRegisterBoolValue","useRegisterUnpackedValue","server","useServiceServer","color","powerStatus","off","label","PowerPowerStatus","humanify","toggleEnabled","batteryCharge","Math","expanded","others","labelId","useId","sliderId"],"sourceRoot":""}