{"version":3,"file":"9253-2619311828b7458b2147.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardSevenSegmentDisplay.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useId, useState } from \"react\"\nimport {\n    SevenSegmentDisplayCmd,\n    SevenSegmentDisplayReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport { Grid, TextField } from \"@mui/material\"\nimport RegisterInput from \"../RegisterInput\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useRegister from \"../hooks/useRegister\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\n\nfunction DigitsInput(props: DashboardServiceProps) {\n    const { service } = props\n    const [value, setValue] = useState(\"\")\n    const handleValueChange = (ev: ChangeEvent<{ value: string }>) => {\n        setValue(ev.target.value)\n    }\n    const eid = useId()\n\n    useEffect(() => {\n        // encode numbers into digits\n        const v = parseFloat(value)\n        if (!isNaN(v))\n            service.sendCmdPackedAsync(SevenSegmentDisplayCmd.SetNumber, [v])\n    }, [value])\n\n    return (\n        <TextField\n            id={eid}\n            type=\"number\"\n            value={value}\n            size=\"small\"\n            label=\"digits\"\n            fullWidth={true}\n            onChange={handleValueChange}\n        />\n    )\n}\n\nexport default function DashboardSevenSegmentDisplay(\n    props: DashboardServiceProps\n) {\n    const { service, visible, expanded } = props\n\n    const digitsRegister = useRegister(service, SevenSegmentDisplayReg.Digits)\n    const brightnessRegister = useRegister(\n        service,\n        SevenSegmentDisplayReg.Brightness\n    )\n    const digitCountRegister = useRegister(\n        service,\n        SevenSegmentDisplayReg.DigitCount\n    )\n    const decimalPointRegister = useRegister(\n        service,\n        SevenSegmentDisplayReg.DecimalPoint\n    )\n\n    const [digits] = useRegisterUnpackedValue<[Uint8Array]>(digitsRegister) || [\n        new Uint8Array(0),\n    ]\n    const [brightness] = useRegisterUnpackedValue<[number]>(\n        brightnessRegister,\n        props\n    )\n    const [digitCount] = useRegisterUnpackedValue<[number]>(\n        digitCountRegister,\n        props\n    )\n    const decimalPoint = useRegisterBoolValue(decimalPointRegister, props)\n\n    const server = useServiceServer(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { textPrimary, controlBackground } = useWidgetTheme(color)\n    const active = textPrimary\n    const background = controlBackground\n\n    if (digitCount === undefined)\n        return <DashboardRegisterValueFallback register={digitCountRegister} />\n\n    const md = 4\n    const rs = 4\n    const hs = 32\n    const ws = 28\n    const wd = ws + 2 * rs\n    const hd = 2 * rs\n\n    const w = digitCount * (wd + 4 * md) + md\n    const h = 2 * md + 3 * hd + 2 * hs\n    const opacity = 0.5 + 0.5 * (brightness === undefined ? 1 : brightness)\n\n    /*\n    GFEDCBA DP\n    - A -\n    |   |\n    F   B\n    |   |\n    - G -\n    |   |   -\n    E   C  |DP|\n    - D -   -\n    */\n\n    const VerticalSegment = (props: {\n        digit: number\n        mask: number\n        mx: number\n        my: number\n    }) => {\n        const bit = (props.digit & props.mask) == props.mask\n        return (\n            <>\n                <path\n                    fill={background}\n                    stroke=\"none\"\n                    d={`M ${props.mx} ${\n                        props.my\n                    } l ${-rs} ${rs} v ${hs} l ${rs} ${rs} l ${rs} ${-rs} v ${-hs} Z`}\n                />\n                {bit && (\n                    <path\n                        opacity={opacity}\n                        fill={active}\n                        stroke=\"none\"\n                        d={`M ${props.mx} ${\n                            props.my\n                        } l ${-rs} ${rs} v ${hs} l ${rs} ${rs} l ${rs} ${-rs} v ${-hs} Z`}\n                    />\n                )}\n            </>\n        )\n    }\n    const HorizontalSegment = (props: {\n        digit: number\n        mask: number\n        mx: number\n        my: number\n    }) => {\n        const bit = (props.digit & props.mask) == props.mask\n        return (\n            <>\n                <path\n                    fill={background}\n                    stroke=\"none\"\n                    d={`M ${props.mx} ${\n                        props.my\n                    } l ${rs} ${-rs} h ${ws} l ${rs} ${rs} l ${-rs} ${rs} h ${-ws} Z`}\n                />\n                {bit && (\n                    <path\n                        opacity={opacity}\n                        fill={active}\n                        stroke=\"none\"\n                        d={`M ${props.mx} ${\n                            props.my\n                        } l ${rs} ${-rs} h ${ws} l ${rs} ${rs} l ${-rs} ${rs} h ${-ws} Z`}\n                    />\n                )}\n            </>\n        )\n    }\n\n    const DotSegment = (props: { digit: number }) => {\n        const bit = (props.digit & 0b10000000) == 0b10000000\n        const mx = rs + wd + 2 * rs\n        const my = rs + 2 * hd + 2 * hs\n        return (\n            <>\n                <circle\n                    fill={background}\n                    stroke=\"none\"\n                    r={rs}\n                    cx={mx}\n                    cy={my}\n                />\n                {bit && (\n                    <circle\n                        opacity={opacity}\n                        fill={active}\n                        stroke=\"none\"\n                        r={rs}\n                        cx={mx}\n                        cy={my}\n                    />\n                )}\n            </>\n        )\n    }\n\n    const Digit = (dprops: { x: number; y: number; digit: number }) => {\n        const { x, y, digit } = dprops\n        return (\n            <g transform={`translate(${x}, ${y})`}>\n                <HorizontalSegment\n                    key=\"G\"\n                    mx={rs}\n                    my={rs + hs + hd}\n                    digit={digit}\n                    mask={0b01000000}\n                />\n\n                <VerticalSegment\n                    key=\"F\"\n                    mx={rs}\n                    my={rs}\n                    digit={digit}\n                    mask={0b00100000}\n                />\n\n                <VerticalSegment\n                    key=\"E\"\n                    mx={rs}\n                    my={rs + hd + hs}\n                    digit={digit}\n                    mask={0b00010000}\n                />\n\n                <HorizontalSegment\n                    key=\"D\"\n                    mx={rs}\n                    my={rs + 2 * hd + 2 * hs}\n                    digit={digit}\n                    mask={0b00001000}\n                />\n\n                <VerticalSegment\n                    key=\"C\"\n                    mx={rs + wd}\n                    my={rs + hd + hs}\n                    digit={digit}\n                    mask={0b00000100}\n                />\n                <VerticalSegment\n                    key=\"B\"\n                    mx={rs + wd}\n                    my={rs}\n                    digit={digit}\n                    mask={0b00000010}\n                />\n\n                <HorizontalSegment\n                    key=\"A\"\n                    mx={rs}\n                    my={rs}\n                    digit={digit}\n                    mask={0b00000001}\n                />\n\n                {decimalPoint && <DotSegment digit={digit} />}\n            </g>\n        )\n    }\n\n    return (\n        <Grid container spacing={1} direction=\"column\">\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h}>\n                    {Array(digitCount)\n                        .fill(0)\n                        .map((_, i) => (\n                            <Digit\n                                key={i}\n                                x={md + (wd + 4 * md) * i}\n                                y={md}\n                                digit={digits?.[i] || 0}\n                            />\n                        ))}\n                </SvgWidget>\n            </Grid>\n            {expanded && (\n                <Grid item xs={12}>\n                    <DigitsInput {...props} />\n                </Grid>\n            )}\n            {expanded && brightness !== undefined && (\n                <Grid item>\n                    <RegisterInput\n                        register={brightnessRegister}\n                        visible={visible}\n                        showRegisterName={true}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"names":["useState","handleValueChange","ev","setValue","eid","useId","v","parseFloat","isNaN","service","SevenSegmentDisplayCmd","digitsRegister","useRegister","SevenSegmentDisplayReg","brightnessRegister","digitCountRegister","decimalPointRegister","useRegisterUnpackedValue","decimalPoint","useRegisterBoolValue","server","useServiceServer","color","useWidgetTheme","active","background","digitCount","md","rs","hs","ws","wd","hd","w","h","opacity","brightness","VerticalSegment","props","bit","HorizontalSegment","DotSegment","mx","my","Digit","dprops","Array","expanded"],"sourceRoot":""}