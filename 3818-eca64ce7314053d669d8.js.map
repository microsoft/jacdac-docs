{"version":3,"file":"3818-eca64ce7314053d669d8.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardLED.tsx"],"sourcesContent":["import { Grid } from \"@mui/material\"\nimport React, { useCallback, useEffect, useRef, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport LightWidget from \"../widgets/LightWidget\"\nimport {\n    LedReg,\n    RENDER,\n    REPORT_UPDATE,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport ColorButtons, { DEFAULT_COLORS } from \"../widgets/ColorButtons\"\nimport useRegister from \"../hooks/useRegister\"\nimport RegisterInput from \"../RegisterInput\"\nimport { bufferEq } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { JDEventSource } from \"../../../jacdac-ts/src/jdom/eventsource\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { LedServer } from \"../../../jacdac-ts/src/servers/ledserver\"\nimport useChange from \"../../jacdac/useChange\"\n\nconst configureRegisters = [\n    LedReg.Brightness,\n    LedReg.ActualBrightness,\n    LedReg.MaxPower,\n]\n\nfunction RegisterInputItem(props: {\n    service: JDService\n    registerCode: number\n    visible: boolean\n}) {\n    const { service, registerCode, visible } = props\n    const register = useRegister(service, registerCode)\n    return (\n        <RegisterInput\n            register={register}\n            visible={visible}\n            showRegisterName={true}\n        />\n    )\n}\n\nexport default function DashboardLED(props: DashboardServiceProps) {\n    const { service, services, visible, expanded, controlled } = props\n    const pixelsRegister = useRegister(service, LedReg.Pixels)\n    const numPixelsRegister = useRegister(service, LedReg.NumPixels)\n    const [numPixels] = useRegisterUnpackedValue<[number]>(\n        numPixelsRegister,\n        props\n    )\n    const canEdit = expanded && numPixels !== undefined && numPixels <= 64\n    const [penColor, setPenColor] = useState<number>(DEFAULT_COLORS[0].value)\n    const colorsRef = useRef<Uint8Array>(new Uint8Array(0))\n    const clientRef = useRef(new JDEventSource())\n    const canLedClick = !isNaN(penColor) && canEdit && !controlled\n    const server = useServiceServer(\n        service,\n        () => (numPixels > 64 ? new LedServer() : undefined),\n        [numPixels]\n    )\n\n    const handleColorChange = (newColor: number) =>\n        setPenColor(current => (newColor === current ? undefined : newColor))\n    const handleLedClick: (index: number) => void = async (index: number) => {\n        const pixels = colorsRef.current\n        if (index >= pixels.length * 3) return\n\n        const newPixels = pixels.slice(0)\n        const k = index * 3\n        let r = (penColor >> 16) & 0xff\n        let g = (penColor >> 8) & 0xff\n        let b = penColor & 0xff\n        if (\n            newPixels[k] == r &&\n            newPixels[k + 1] == g &&\n            newPixels[k + 2] == b\n        ) {\n            r = 0\n            g = 0\n            b = 0\n        }\n        newPixels[k] = r\n        newPixels[k + 1] = g\n        newPixels[k + 2] = b\n        await pixelsRegister.sendSetPackedAsync([newPixels], true)\n        colorsRef.current = newPixels\n        clientRef.current.emit(RENDER)\n    }\n\n    const registers = {\n        numPixels: LedReg.NumPixels,\n        variant: LedReg.Variant,\n        actualBrightness: LedReg.ActualBrightness,\n        numColumns: LedReg.NumColumns,\n    }\n\n    useEffect(() => {\n        if (!pixelsRegister) return undefined\n        const updatePixels = () => {\n            const pixels = pixelsRegister.data\n            if (\n                pixels &&\n                pixels.length &&\n                !bufferEq(colorsRef.current, pixels)\n            ) {\n                colorsRef.current = pixels.slice(0)\n                clientRef.current.emit(RENDER)\n            }\n        }\n        updatePixels()\n        return pixelsRegister.subscribe(REPORT_UPDATE, updatePixels)\n    }, [pixelsRegister])\n\n    useChange(\n        server?.pixels,\n        _ => {\n            const pixels = _?.data\n            if (\n                pixels &&\n                pixels.length &&\n                !bufferEq(colorsRef.current, pixels)\n            ) {\n                colorsRef.current = pixels.slice(0)\n                clientRef.current.emit(RENDER)\n            }\n        },\n        [server]\n    )\n\n    const colors: () => Uint8Array = useCallback(() => colorsRef.current, [])\n    const subscribeColors = useCallback(\n        handler => clientRef.current.subscribe(RENDER, handler),\n        []\n    )\n\n    if (numPixels === undefined)\n        return <DashboardRegisterValueFallback register={numPixelsRegister} />\n    if (!numPixels) return null\n\n    return (\n        <>\n            <Grid item xs={12}>\n                <LightWidget\n                    colors={colors}\n                    subscribeColors={subscribeColors}\n                    registers={registers}\n                    widgetCount={services?.length}\n                    onLedClick={canLedClick ? handleLedClick : undefined}\n                    {...props}\n                />\n            </Grid>\n            {canEdit && (\n                <Grid item>\n                    <ColorButtons\n                        color={penColor}\n                        onColorChange={handleColorChange}\n                    />\n                </Grid>\n            )}\n            {expanded &&\n                configureRegisters.map(code => (\n                    <Grid item xs={12} key={code}>\n                        <RegisterInputItem\n                            service={service}\n                            registerCode={code}\n                            visible={visible}\n                        />\n                    </Grid>\n                ))}\n        </>\n    )\n}\n"],"names":["configureRegisters","LedReg","register","useRegister","pixelsRegister","numPixelsRegister","useRegisterUnpackedValue","canEdit","expanded","numPixels","useState","DEFAULT_COLORS","colorsRef","useRef","clientRef","canLedClick","isNaN","server","useServiceServer","handleColorChange","newColor","setPenColor","current","handleLedClick","pixels","index","newPixels","k","r","penColor","g","b","registers","variant","actualBrightness","numColumns","useEffect","updatePixels","bufferEq","useChange","_","colors","useCallback","subscribeColors","handler","services","code"],"sourceRoot":""}