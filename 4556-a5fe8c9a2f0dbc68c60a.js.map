{"version":3,"file":"4556-a5fe8c9a2f0dbc68c60a.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/hooks/useMicrophoneSpectrum.ts","webpack://jacdac-docs/./src/components/widgets/BytesBarGraphWidget.tsx","webpack://jacdac-docs/./src/components/dashboard/DashboardSoundSpectrum.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\"\nimport { AudioAnalyzerOptions, useMicrophoneAnalyzer } from \"./useAudioAnalyzer\"\n\nexport default function useMicrophoneSpectrum(\n    enabled: boolean,\n    options?: AudioAnalyzerOptions\n) {\n    const { analyser, onClickActivateMicrophone, closeMicrophone } =\n        useMicrophoneAnalyzer(options)\n    const frequencies = useRef(new Uint8Array(0))\n\n    useEffect(() => {\n        if (!enabled) closeMicrophone()\n    }, [enabled])\n\n    return {\n        onClickActivateMicrophone,\n        spectrum: () => {\n            const a = analyser()\n            if (!a) return frequencies.current\n\n            if (frequencies.current.length !== a.frequencyBinCount)\n                frequencies.current = new Uint8Array(a.frequencyBinCount)\n            a?.getByteFrequencyData(frequencies.current)\n            return frequencies.current\n        },\n    }\n}\n","import React, { useRef, useEffect } from \"react\"\nimport { REPORT_UPDATE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport SvgWidget from \"./SvgWidget\"\nimport useWidgetTheme from \"./useWidgetTheme\"\n\nexport default function BytesBarGraphWidget(props: {\n    register: JDRegister\n    size?: string\n    visible: boolean\n}) {\n    const { register, size, visible } = props\n    const server = useServiceServer(register.service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const pathRef = useRef<SVGPathElement>()\n\n    const w = 128\n    const h = w / 1.612\n    const m = 2\n    const dy = (h - 2 * m) / 0xff\n\n    useEffect(\n        () =>\n            visible\n                ? register?.subscribe(REPORT_UPDATE, () => {\n                      // render outside of react loop\n                      const { current } = pathRef\n                      const bins = register.data\n                      if (!current || !bins) return\n\n                      const dx = (w - 2 * m) / bins.length\n                      const dw = (w - 2 * m) / (bins.length * 6)\n                      let d = `M ${m} ${h - m} `\n                      for (let i = 0; i < bins.length; ++i) {\n                          const bin = bins[i]\n                          d += ` v ${-dy * bin} h ${dx - dw} v ${\n                              dy * bin\n                          } h ${dw}`\n                      }\n                      d += \" z\"\n                      current.setAttribute(\"d\", d)\n                  })\n                : undefined,\n        [register, visible, pathRef.current]\n    )\n\n    return (\n        <SvgWidget width={w} height={h} size={size} background={background}>\n            <path\n                fill={active}\n                stroke={controlBackground}\n                strokeWidth={m / 2}\n                ref={pathRef}\n            />\n        </SvgWidget>\n    )\n}\n","import React, { useEffect } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { Grid } from \"@mui/material\"\nimport MicIcon from \"@mui/icons-material/Mic\"\nimport {\n    REFRESH,\n    SoundSpectrumReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport useMicrophoneSpectrum from \"../hooks/useMicrophoneSpectrum\"\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport { SensorServer } from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport BytesBarGraphWidget from \"../widgets/BytesBarGraphWidget\"\nimport useRegister from \"../hooks/useRegister\"\nimport MicrophoneSettingsButton from \"../ui/MicrophoneSettingsButton\"\n\nfunction HostMicrophoneButton(props: {\n    service: JDService\n    server?: SensorServer<[Uint8Array]>\n    visible: boolean\n}) {\n    const { server, service, visible } = props\n\n    const enabledRegister = useRegister(service, SoundSpectrumReg.Enabled)\n    const minDecibelsRegister = useRegister(\n        service,\n        SoundSpectrumReg.MinDecibels\n    )\n    const maxDecibelsRegister = useRegister(\n        service,\n        SoundSpectrumReg.MaxDecibels\n    )\n    const fftPow2SizeRegister = useRegister(\n        service,\n        SoundSpectrumReg.FftPow2Size\n    )\n    const smoothingTimeConstantRegister = useRegister(\n        service,\n        SoundSpectrumReg.SmoothingTimeConstant\n    )\n\n    const enabled = useRegisterBoolValue(enabledRegister, props)\n    const [minDecibels] = useRegisterUnpackedValue<[number]>(\n        minDecibelsRegister,\n        props\n    )\n    const [maxDecibels] = useRegisterUnpackedValue<[number]>(\n        maxDecibelsRegister,\n        props\n    )\n    const [fftPow2Size] = useRegisterUnpackedValue<[number]>(\n        fftPow2SizeRegister,\n        props\n    )\n    const fftSize = 1 << (fftPow2Size || 5)\n    const [smoothingTimeConstant] = useRegisterUnpackedValue<[number]>(\n        smoothingTimeConstantRegister,\n        props\n    )\n    const { spectrum, onClickActivateMicrophone } = useMicrophoneSpectrum(\n        enabled && !!server,\n        {\n            fftSize,\n            smoothingTimeConstant,\n            minDecibels,\n            maxDecibels,\n        }\n    )\n    const title = enabled ? \"Stop microphone\" : \"Start microphone\"\n\n    const handleClick = async () => {\n        if (!enabled && server) await onClickActivateMicrophone()\n        await enabledRegister.sendSetBoolAsync(!enabled, true)\n    }\n\n    // update volume on demand\n    useEffect(\n        () =>\n            visible && enabled\n                ? server?.subscribe(REFRESH, () => {\n                      const v = spectrum?.()\n                      if (v !== undefined) {\n                          server.reading.setValues([v], true)\n                      }\n                  })\n                : undefined,\n        [server, spectrum, visible]\n    )\n\n    return (\n        <IconButtonWithProgress\n            aria-label={title}\n            title={title}\n            indeterminate={enabled}\n            onClick={handleClick}\n        >\n            <MicIcon />\n        </IconButtonWithProgress>\n    )\n}\n\nexport default function DashboardSoundSpectrum(props: DashboardServiceProps) {\n    const { service, visible } = props\n    const frequencyBinsRegister = useRegister(\n        service,\n        SoundSpectrumReg.FrequencyBins\n    )\n    const server = useServiceServer<SensorServer<[Uint8Array]>>(service)\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item>\n                <BytesBarGraphWidget\n                    visible={visible}\n                    register={frequencyBinsRegister}\n                />\n            </Grid>\n            <Grid item>\n                <Grid container spacing={1}>\n                    <Grid item>\n                        <HostMicrophoneButton\n                            service={service}\n                            server={server}\n                            visible={visible}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <MicrophoneSettingsButton />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["useMicrophoneAnalyzer","frequencies","useRef","useEffect","closeMicrophone","spectrum","a","analyser","server","useServiceServer","register","color","useWidgetTheme","pathRef","w","h","m","dy","visible","bins","dx","dw","d","i","bin","current","enabledRegister","useRegister","SoundSpectrumReg","minDecibelsRegister","maxDecibelsRegister","fftPow2SizeRegister","smoothingTimeConstantRegister","enabled","useRegisterBoolValue","useRegisterUnpackedValue","fftSize","fftPow2Size","useMicrophoneSpectrum","title","handleClick","onClickActivateMicrophone","v","frequencyBinsRegister"],"sourceRoot":""}