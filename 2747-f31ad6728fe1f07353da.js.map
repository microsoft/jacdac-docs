{"version":3,"file":"2747-f31ad6728fe1f07353da.js","mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA,QAAQ,UAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8BAA8B;AAC5C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4BAA4B;AACxC;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,MAAM;AACN,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,CAAC;AACD","sources":["webpack://jacdac-docs/./src/workers/devicescript/dist/node_modules/devicescript-worker.js"],"sourcesContent":["(() => {\n  // devicescript-worker.ts\n  importScripts(\n    \"https://microsoft.github.io/devicescript/dist/devicescript-compiler.js\"\n  );\n  var { compile } = self.deviceScript;\n  var WorkerHost = class {\n    constructor(specs) {\n      this.specs = specs;\n      this.files = {};\n      this.logs = \"\";\n      this.errors = [];\n      this.error = this.error.bind(this);\n    }\n    files;\n    logs;\n    errors;\n    mainFileName() {\n      return \"\";\n    }\n    write(filename, contents) {\n      this.files[filename] = contents;\n    }\n    log(msg) {\n      this.logs += msg + \"\\n\";\n    }\n    error(err) {\n      console.log(err);\n      const { filename, line, messageText } = err;\n      this.errors.push({\n        filename,\n        message: messageText,\n        line\n      });\n    }\n    getSpecs() {\n      return this.specs;\n    }\n    verifyBytecode(buf, dbg) {\n    }\n  };\n  var serviceSpecs;\n  var DEVICESCRIPT_PREFIX = 'import * as ds from \"@devicescript/core\"';\n  var handlers = {\n    compile: async (props) => {\n      let { source = \"\" } = props;\n      if (!serviceSpecs)\n        throw new Error(\"specs missing\");\n      let lineOffset = 0;\n      if (source.indexOf(DEVICESCRIPT_PREFIX) < 0) {\n        source = DEVICESCRIPT_PREFIX + \"\\n\\n\" + source;\n        lineOffset = 2;\n      }\n      const host = new WorkerHost(serviceSpecs);\n      const res = compile(source, { host });\n      return {\n        ...res,\n        files: host.files,\n        logs: host.logs,\n        errors: host.errors.map(({ line, ...rest }) => ({\n          ...rest,\n          line: line - lineOffset\n        }))\n      };\n    },\n    specs: async (props) => {\n      serviceSpecs = props.serviceSpecs;\n      return {};\n    }\n  };\n  function processMessage(message) {\n    try {\n      const handler = handlers[message.type];\n      return handler?.(message);\n    } catch (e) {\n      console.debug(e);\n      return void 0;\n    }\n  }\n  async function handleMessage(event) {\n    const message = event.data;\n    const { id, worker, type, ...rest } = message;\n    if (worker !== \"devicescript\")\n      return;\n    try {\n      const result = await processMessage(message);\n      if (result) {\n        const resp = { id, worker, ...rest, ...result };\n        self.postMessage(resp);\n      }\n    } catch (e) {\n      console.debug(`devicescript: error ${e + \"\"}`, e);\n      self.postMessage({\n        id,\n        type,\n        worker,\n        error: e + \"\"\n      });\n    }\n  }\n  self.addEventListener(\"message\", handleMessage);\n  console.debug(`devicescript: worker registered`);\n})();\n//# sourceMappingURL=devicescript-worker.js.map\n"],"names":[],"sourceRoot":""}