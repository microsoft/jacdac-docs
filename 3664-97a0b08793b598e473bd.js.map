{"version":3,"file":"3664-97a0b08793b598e473bd.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Send.js","webpack://jacdac-docs/./src/components/CmdButton.tsx","webpack://jacdac-docs/./src/components/dashboard/DashboardRos.tsx","webpack://jacdac-docs/./src/components/hooks/useMounted.ts"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\nexports.default = _default;","import { darken, lighten } from \"@mui/material\"\nimport { styled } from \"@mui/material/styles\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport React, { CSSProperties, ReactNode, useEffect, useState } from \"react\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport ErrorIcon from \"@mui/icons-material/Error\"\nimport IconButtonWithTooltip from \"./ui/IconButtonWithTooltip\"\nimport useAnalytics, { EventProperties } from \"./hooks/useAnalytics\"\nimport useMounted from \"./hooks/useMounted\"\nimport clsx from \"clsx\"\nimport useSnackbar from \"./hooks/useSnackbar\"\nimport useBus from \"../jacdac/useBus\"\nimport OptionalTooltip from \"./widgets/OptionalTooltip\"\n\nconst PREFIX = \"CmdButton\"\n\nconst classes = {\n    ack: `${PREFIX}Ack`,\n    error: `${PREFIX}Error`,\n}\n\nconst Root = styled(\"span\")(({ theme }) => ({\n    [`& .${classes.ack}`]: {\n        color: \"#fff\",\n        fontWeight: theme.typography.fontWeightMedium,\n        backgroundColor: theme.palette.success.main,\n    },\n\n    [`& .${classes.error}`]: {\n        color: \"#fff\",\n        backgroundColor: (theme.palette.mode === \"light\" ? lighten : darken)(\n            theme.palette.error.main,\n            0.6\n        ),\n    },\n}))\n\nconst ACK_RESET_DELAY = 500\nconst ERROR_RESET_DELAY = 2000\n\nexport default function CmdButton(props: {\n    onClick: (mounted: () => boolean) => Promise<void>\n    className?: string\n    style?: CSSProperties\n    title?: string\n    children?: ReactNode\n    icon?: JSX.Element\n    size?: \"small\" | \"large\" | undefined\n    variant?: \"outlined\" | \"contained\" | undefined\n    disabled?: boolean\n    disableReset?: boolean\n    autoRun?: boolean\n    trackName?: string\n    trackProperties?: EventProperties\n    ackResetDelay?: number\n    color?:\n        | \"inherit\"\n        | \"primary\"\n        | \"secondary\"\n        | \"error\"\n        | \"info\"\n        | \"success\"\n        | \"warning\"\n}) {\n    const {\n        onClick,\n        className,\n        style,\n        children,\n        icon,\n        title,\n        disabled,\n        disableReset,\n        autoRun,\n        trackName,\n        trackProperties,\n        ackResetDelay,\n        color,\n        ...others\n    } = props\n    const bus = useBus()\n    const { setError: setAppError } = useSnackbar()\n\n    const [working, setWorking] = useState(false)\n    const [ack, setAck] = useState(false)\n    const [error, setError] = useState(undefined)\n    const { trackEvent } = useAnalytics()\n    const mounted = useMounted()\n\n    const _disabled = disabled || working\n\n    const run = async () => {\n        if (working) return // already working\n\n        if (trackName) trackEvent(\"cmd.\" + trackName, trackProperties)\n        try {\n            setError(undefined)\n            setAck(false)\n            setWorking(true)\n            await onClick(mounted)\n            if (!mounted()) return\n            setAck(true)\n            if (!disableReset) {\n                await bus.delay(ackResetDelay || ACK_RESET_DELAY)\n                if (!mounted()) return\n                setAck(false)\n            }\n        } catch (e) {\n            if (!mounted()) return\n            setAppError(e)\n            setError(e)\n            if (!disableReset) {\n                await bus.delay(ERROR_RESET_DELAY)\n                if (!mounted()) return\n                setError(undefined)\n            }\n        } finally {\n            if (mounted()) setWorking(false)\n        }\n    }\n\n    const handleClick = async (ev: React.MouseEvent<HTMLButtonElement>) => {\n        ev.stopPropagation()\n        ev.preventDefault()\n        run()\n    }\n\n    const statusIcon = error ? <ErrorIcon /> : undefined\n    const modeClassName = error ? classes.error : ack ? classes.ack : undefined\n    const elClassName = clsx(className, modeClassName)\n\n    // run once\n    useEffect(() => {\n        if (autoRun && mounted()) run()\n    }, [autoRun])\n\n    return (\n        <Root>\n            {!children && icon ? (\n                <IconButtonWithTooltip\n                    className={elClassName}\n                    style={style}\n                    onClick={handleClick}\n                    aria-label={title}\n                    title={title}\n                    disabled={_disabled}\n                    color={color}\n                    {...others}\n                >\n                    {statusIcon || icon}\n                </IconButtonWithTooltip>\n            ) : (\n                <OptionalTooltip title={title} placement=\"bottom\">\n                    <Button\n                        className={elClassName}\n                        style={style}\n                        startIcon={icon}\n                        endIcon={statusIcon}\n                        onClick={handleClick}\n                        aria-label={title}\n                        title=\"\"\n                        disabled={_disabled}\n                        color={color}\n                        {...others}\n                    >\n                        {children}\n                    </Button>\n                </OptionalTooltip>\n            )}\n        </Root>\n    )\n}\n","import React, { useId, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { Grid, TextField } from \"@mui/material\"\nimport useChange from \"../../jacdac/useChange\"\nimport { JDService, JSONTryParse, RosCmd, RosServer } from \"../../../jacdac-ts/src/jacdac\"\nimport CmdButton from \"../CmdButton\"\nimport SendIcon from \"@mui/icons-material/Send\"\n\nfunction RosMessageEditor(props: { service: JDService }) {\n    const { service } = props\n    const id = useId()\n    const nodeId = id + \"-node\"\n    const topicId = id + \"-topic\"\n    const messageId = id + \"-message\"\n\n    const [node, setNode] = useState(\"dashboard\")\n    const [topic, setTopic] = useState(\"\")\n    const [message, setMessage] = useState(\"\")\n    const handleNode = (event: React.ChangeEvent<HTMLInputElement>) => setNode(event.target.value)\n    const handleTopic = (event: React.ChangeEvent<HTMLInputElement>) => setTopic(event.target.value)\n    const handleMessage = (event: React.ChangeEvent<HTMLInputElement>) => setMessage(event.target.value)\n    const handlePublish = async () => {\n        await service.sendCmdPackedAsync(RosCmd.PublishMessage, [node, topic, message])\n    }\n\n    const jmsg = JSONTryParse(message)\n    const disabled = !node || !topic || !jmsg\n    const error = message && !jmsg ? \"Invalid JSON\" : undefined\n\n    return <>\n        <Grid item xs={12}>\n            <TextField\n                id={nodeId}\n                margin=\"normal\"\n                type=\"text\"\n                spellCheck=\"false\"\n                size=\"small\"\n                variant=\"outlined\"\n                label=\"Node\"\n                aria-label=\"Node name\"\n                fullWidth={true}\n                value={node}\n                onChange={handleNode}\n            />\n        </Grid>\n        <Grid item xs={12}>\n            <TextField\n                id={topicId}\n                margin=\"normal\"\n                type=\"text\"\n                spellCheck=\"false\"\n                size=\"small\"\n                variant=\"outlined\"\n                label=\"Topic\"\n                aria-label=\"Topic\"\n                fullWidth={true}\n                value={topic}\n                onChange={handleTopic}\n            />\n        </Grid>\n        <Grid item xs={12}>\n        <TextField\n                id={messageId}\n                margin=\"normal\"\n                type=\"text\"\n                spellCheck=\"false\"\n                size=\"small\"\n                variant=\"outlined\"\n                label=\"Message (JSON)\"\n                aria-label=\"Message (JSON)\"\n                fullWidth={true}\n                value={message}\n                onChange={handleMessage}\n                helperText={error}\n                error={!!error}\n            />\n\n        </Grid>\n        <Grid item xs={12}>\n            <CmdButton onClick={handlePublish} disabled={disabled} variant=\"outlined\" icon={<SendIcon />\n            }>Publish</CmdButton>\n        </Grid>\n    </>\n}\n\nexport default function DashboardRos(props: DashboardServiceProps) {\n    const { service, expanded } = props\n    const server = useServiceServer<RosServer>(service)\n\n    const subscriptions = useChange(server, _ => _?.subscriptions)\n    const messages = useChange(server, _ => _?.messages)\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                ROS\n            </Grid>\n            {expanded && <Grid item xs={12}><RosMessageEditor service={service} /></Grid>}\n            <Grid item xs={12}>\n                <pre style={{ width: \"100%\", whiteSpace: \"pre-wrap\", fontSize: \"70%\" }}>\n                    {`subscriptions: ${subscriptions?.join(\"   \\n\")}\nmessages: ${messages?.map(({ node, topic, message }) => `${node} ${topic} ${JSON.stringify(message)}`).join(\"    \\n\")}`}</pre>\n            </Grid>\n        </Grid>\n    )\n}","import { useEffect, useRef } from \"react\"\n\nexport default function useMounted(): () => boolean {\n    const mounted = useRef(false)\n    useEffect(() => {\n        mounted.current = true\n        return () => {\n            mounted.current = false\n        }\n    }, [])\n    return () => mounted.current\n}\n"],"names":["PREFIX","classes","ack","error","Root","styled","color","fontWeight","theme","backgroundColor","ACK_RESET_DELAY","ERROR_RESET_DELAY","others","bus","useBus","setError","useSnackbar","useState","useAnalytics","mounted","useMounted","_disabled","disabled","run","trackEvent","setAck","setWorking","onClick","ackResetDelay","setAppError","handleClick","ev","statusIcon","modeClassName","elClassName","clsx","useEffect","autoRun","id","useId","nodeId","topicId","messageId","handleNode","event","setNode","handleTopic","setTopic","handleMessage","setMessage","handlePublish","service","RosCmd","jmsg","JSONTryParse","message","server","useServiceServer","subscriptions","useChange","_","messages","expanded","width","whiteSpace","fontSize","node","JSON","useRef"],"sourceRoot":""}