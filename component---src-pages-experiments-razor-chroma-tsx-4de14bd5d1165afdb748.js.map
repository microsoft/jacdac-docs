{"version":3,"file":"component---src-pages-experiments-razor-chroma-tsx-4de14bd5d1165afdb748.js","mappings":"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","sources":["webpack://jacdac-docs/./src/pages/experiments/razor-chroma.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { JDClient } from \"../../../jacdac-ts/src/jdom/client\"\nimport { CHANGE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport useChange from \"../../jacdac/useChange\"\nimport { Button, Grid } from \"@mui/material\"\n\n/**\n * Razor Chroma SDK client\n * Docs: https://assets.razerzone.com/dev_portal/REST/html/index.html\n */\nclass ChromaClient extends JDClient {\n    private connectionInfo: {\n        sessionid: string\n        uri: string\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private heartbeatInterval: any\n    private supported = true\n\n    constructor() {\n        super()\n        this.mount(() => this.stop())\n    }\n\n    get connected() {\n        return !!this.connectionInfo\n    }\n\n    private startHeartbeat() {\n        this.heartbeatInterval = setInterval(() => {\n            if (this.unmounted) clearInterval(this.heartbeatInterval)\n            this.fetch(\"/heartbeat\", \"PUT\")\n        }, 2000)\n    }\n\n    async start() {\n        if (!this.supported || this.connected) return\n\n        console.debug(\"razor: connecting\", { conn: this.connectionInfo })\n        const resp = await fetch(\"https://chromasdk.io:54236/razer/chromasdk\", {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                title: \"Microsoft Jacdac\",\n                description: \"Jacdac interface to Razer\",\n                author: {\n                    name: \"Microsoft\",\n                    contact: \"jacdac@microsoft.com\",\n                },\n                device_supported: [\n                    \"keyboard\",\n                    \"mouse\",\n                    \"headset\",\n                    \"mousepad\",\n                    \"keypad\",\n                    \"chromalink\",\n                ],\n                category: \"application\",\n            }),\n        })\n        console.log({ resp })\n        if (this.unmounted) return\n        if (resp.status === 200) {\n            this.connectionInfo = await resp.json()\n            if (this.unmounted) return\n            this.startHeartbeat()\n            this.emit(CHANGE)\n        } else if (resp.status == 404) {\n            this.supported = false\n            console.log(`razor not supported`)\n            this.emit(CHANGE)\n        }\n    }\n\n    private async stop() {\n        console.debug(\"razor: disconnecting\")\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval)\n            this.heartbeatInterval = undefined\n        }\n        if (this.connectionInfo) {\n            const { uri } = this.connectionInfo\n            this.connectionInfo = undefined\n            try {\n                await fetch(uri, {\n                    method: \"DELETE\",\n                    headers: { \"content-type\": \"application/json\" },\n                })\n            } catch (e) {\n                console.debug(e)\n            }\n        }\n    }\n\n    async startHeadsetEffect(\n        effect: \"none\" | \"custom\" | \"static\",\n        data: number | [number, number, number, number, number]\n    ) {\n        let body: unknown\n        const ceffect = `CHROMA_${effect.toUpperCase()}`\n        if (ceffect === \"CHROMA_NONE\") {\n            body = { effect: ceffect }\n        } else if (ceffect === \"CHROMA_CUSTOM\") {\n            body = { effect: ceffect, param: data }\n        } else if (ceffect === \"CHROMA_STATIC\") {\n            const color = { color: data }\n            body = { effect: ceffect, param: color }\n        }\n        await this.fetch(\"/headset\", \"PUT\", body)\n    }\n\n    private async fetch(path: string, method: string, body?: unknown) {\n        await this.start()\n        if (!this.connected) return\n        try {\n            await fetch(this.connectionInfo.uri + path, {\n                method,\n                body: body && JSON.stringify(body),\n                headers: { \"content-type\": \"application/json\" },\n            })\n        } catch (e) {\n            this.connectionInfo = undefined\n        }\n    }\n}\n\nexport default function Chroma() {\n    const [client] = useState(new ChromaClient())\n    const connected = useChange(client, c => c.connected)\n    // make sure to cleanup\n    useEffect(() => {\n        client.start() // async\n        return () => client.unmount()\n    }, [])\n\n    const handleStatic = (v: number) => async () => {\n        await client.startHeadsetEffect(\"static\", v)\n    }\n    const handleCustom =\n        (v: [number, number, number, number, number]) => async () => {\n            await client.startHeadsetEffect(\"custom\", v)\n        }\n\n    // color: BGR\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item>\n                <div>connected: {connected ? \"connected\" : \"disconnected\"}</div>\n            </Grid>\n            <Grid item>\n                <Button onClick={handleStatic(0xff0000)}>headset 255</Button>\n                <Button onClick={handleStatic(0x00ff00)}>headset 128</Button>\n                <Button onClick={handleStatic(0x0000ff)}>headset 0</Button>\n                <Button onClick={handleCustom([0, 64, 128, 196, 255])}>\n                    headset custom\n                </Button>\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["ChromaClient","JDClient","supported","startHeartbeat","setInterval","clearInterval","start","console","conn","connectionInfo","resp","fetch","method","headers","body","title","description","author","name","contact","device_supported","category","stop","uri","startHeadsetEffect","ceffect","effect","param","data","color","JSON","client","useState","connected","useChange","c","useEffect","handleStatic","v","handleCustom"],"sourceRoot":""}