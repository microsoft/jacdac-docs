{"version":3,"file":"350-3d5c546a55d49c129a7d.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Edit.js","webpack://jacdac-docs/./src/components/ui/CodeSandboxButton.tsx","webpack://jacdac-docs/./src/components/ui/VanillaCodeButton.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;","import React, { useState } from \"react\"\nimport EditIcon from \"@mui/icons-material/Edit\"\nimport IconButtonWithTooltip from \"./IconButtonWithTooltip\"\nimport useMediaQueries from \"../hooks/useMediaQueries\"\nimport { Button } from \"gatsby-material-ui-components\"\nimport useSnackbar from \"../hooks/useSnackbar\"\n\nexport default function CodeSandboxButton(props: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    files: () => Record<string, any>\n    startFile?: string\n}) {\n    const { files, startFile } = props\n    const { setError } = useSnackbar()\n    const { mobile } = useMediaQueries()\n    const [importing, setImporting] = useState(false)\n\n    const handleClick = async () => {\n        const f = files()\n        const file =\n            startFile ||\n            Object.keys(f).filter(fn => /\\.js$/.test(fn))[0] ||\n            \"index.js\"\n        try {\n            setImporting(true)\n            const x = await fetch(\n                \"https://codesandbox.io/api/v1/sandboxes/define?json=1\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Accept: \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        files: f,\n                    }),\n                }\n            )\n            const data = await x.json()\n            const url = `https://codesandbox.io/s/${data.sandbox_id}?file=/${file}`\n            window.open(url, \"_blank\", \"noreferrer\")\n        } catch (error) {\n            setError(error)\n        } finally {\n            setImporting(false)\n        }\n    }\n\n    return mobile ? (\n        <IconButtonWithTooltip\n            color=\"primary\"\n            onClick={handleClick}\n            disabled={importing}\n            title=\"Try in CodeSandbox\"\n        >\n            <EditIcon />\n        </IconButtonWithTooltip>\n    ) : (\n        <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={handleClick}\n            startIcon={<EditIcon />}\n            disabled={importing}\n        >\n            Try in CodeSandbox\n        </Button>\n    )\n}\n","import React, { useCallback } from \"react\"\nimport CodeSandboxButton from \"./CodeSandboxButton\"\nimport packageJson from \"../../../jacdac-ts/package.json\"\n\nexport default function VanillaCodeButton(props: {\n    title?: string\n    source: { js?: string; html?: string }\n}) {\n    const { title, source } = props\n    const { js = \"\", html = \"\" } = source\n\n    const files = useCallback(() => {\n        // find imports\n        const i = js.indexOf(\"\\n\\n\")\n        const imports = js.slice(0, i)\n        const code = js.slice(i + 2).trim()\n\n        const indexTs = `\nimport \"milligram\";\nimport { createWebBus, injectDevTools, CONNECTION_STATE, CHANGE } from \"jacdac-ts\";\n${imports}\n\nconst connectEl = document.getElementById(\"connectbtn\") as HTMLButtonElement;\nconst devtoolsEl = document.getElementById(\"devtoolsbtn\") as HTMLButtonElement;\nconst logEl = document.getElementById(\"log\") as HTMLPreElement;\nconst log = (msg: any) => {\n  console.log(msg);\n  logEl.innerText += msg + \"\\\\n\";\n};\n// create WebUSB bus\nconst bus = createWebBus();\n// track connection state and update button\nbus.on(CONNECTION_STATE, () => {\n  connectEl.innerText = bus.connected\n    ? \"connected ðŸŽ‰\"\n    : bus.disconnected\n    ? \"connect\"\n    : \"ðŸ‘€ðŸ‘€ðŸ‘€\";\n});\n// connect must be triggered by a user interaction\nconnectEl.onclick = async () =>\n  bus.connected ? bus.disconnect() : bus.connect();\n// inject dev tools window\ndevtoolsEl.onclick = () => injectDevTools(bus);\n// we're ready\nlog(\"click connect to start\")\n\n${code}\n`\n        const indexHtml = `\n<html>\n    <body>\n        <h1>Jacdac ${title || \"demo\"}</h1>\n        <div>\n        <button id=\"connectbtn\">connect</button>\n        <button id=\"devtoolsbtn\" class=\"button-clear\">dev tools</button>\n        </div>    \n\n${html}\n        <pre id=\"log\"></pre>\n\n    <footer>\n        <small>\n        Need to learn more about Jacdac?\n        <a target=\"_blank\" href=\"https://aka.ms/jacdac\">Read the docs</a>\n        or\n        <a\n            target=\"_blank\"\n            href=\"https://github.com/microsoft/jacdac/discussions\"\n            >start a discussion</a\n        >.\n        </small>\n    </footer>\n    <script src=\"./index.ts\"></script>\n    </body>\n</html>    \n        `\n\n        return {\n            \"package.json\": {\n                content: {\n                    name: \"vanilla-jacdac-typescript\",\n                    version: \"0.0.0\",\n                    description:\n                        \"Vanilla Jacdac + TypeScript sandbox - https://aka.ms/jacdac\",\n                    main: \"index.html\",\n                    scripts: {\n                        start: \"parcel index.html --open\",\n                        build: \"parcel build index.html\",\n                    },\n                    dependencies: {\n                        \"jacdac-ts\": `^${packageJson.version}`,\n                        milligram: \"^1.4.1\",\n                        \"parcel-bundler\": \"^2.0.0\",\n                    },\n                    devDependencies: {\n                        typescript: \"^4.4.3\",\n                    },\n                    resolutions: {\n                        \"@babel/preset-env\": \"^7.15.8\",\n                    },\n                    keywords: [\"jacdac\", \"typescript\", \"javascript\"],\n                    browserslist: [\"defaults\"],\n                },\n            },\n            \"index.ts\": {\n                content: indexTs,\n            },\n            \"index.html\": {\n                content: indexHtml,\n            },\n        }\n    }, [title, source, js, html])\n\n    return <CodeSandboxButton files={files} />\n}\n"],"names":["useSnackbar","useMediaQueries","useState","handleClick","f","files","file","startFile","Object","fn","setImporting","x","fetch","method","headers","Accept","body","JSON","data","url","window","setError","mobile","js","html","useCallback","i","imports","code","indexTs","indexHtml","title","content","name","version","description","main","scripts","start","build","dependencies","packageJson","milligram","devDependencies","typescript","resolutions","keywords","browserslist"],"sourceRoot":""}