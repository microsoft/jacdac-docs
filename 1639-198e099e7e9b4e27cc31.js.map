{"version":3,"file":"1639-198e099e7e9b4e27cc31.js","mappings":";;;;;;;;;;;;;;;;;AAKA;AAQe,yCAAgE,kDAC3E,GAAM,SAAN,MACA,GAAMA,CAAAA,aAAa,CAAGC,oFAAsB,CAA5C,MAA4C,CAA5C,CACA,GAAMC,CAAAA,OAAO,CAAGC,uEAAU,QAA1B,2FAA0B,CAA1B,CACA,GAAMC,CAAAA,yBAAyB,CAAGC,uEAAW,SAEzCC,oHAFyC,CAA7C,CAIA,GAAM,oBAAsBC,4FAAwB,CAApD,yBAAoD,CAApD,CAGA,GAAMC,CAAAA,uBAAuB,CAAGH,uEAAW,SAEvCC,gHAFuC,CAA3C,CAIA,GAAM,kBAAoBC,4FAAwB,CAAlD,uBAAkD,CAAlD,CAGA,GAAIE,eAAe,EAAnB,UAAkC,YAElC,GAAMC,CAAAA,YAAY,CACd,CAAC,CAAD,oBACAV,aADA,OACAA,EAAAA,aADA,SACAA,CADA,MACAA,CADA,uBACAA,aAAa,CADb,iFACAA,qBAAAA,CAAAA,IAAAA,CACIW,EAAE,EAAIA,EAAE,CAAFA,iBAAAA,GAFV,iBACAX,CADA,iDACAA,sBAAAA,CAFJ,IACI,CADJ,CAMA,mBACI,iHACI,IAAI,CADR,QAEI,KAAK,CAAE,sCAAuCY,CAAC,EAAI,CAAC,CAA7C,QAHf,GAGe,CAFX,EADJ,CAMH","sources":["webpack://jacdac-docs/./src/components/devices/DeviceFirmwareVersionChip.tsx"],"sourcesContent":["import {\n    ControlReg,\n    JD_SERVICE_INDEX_CTRL,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { Chip } from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport React from \"react\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useDeviceSpecification from \"../../jacdac/useDeviceSpecification\"\nimport useRegister from \"../hooks/useRegister\"\nimport useService from \"../../jacdac/useService\"\n\nexport default function DeviceFirmwareVersionChip(props: { device: JDDevice }) {\n    const { device } = props\n    const specification = useDeviceSpecification(device)\n    const control = useService(device, JD_SERVICE_INDEX_CTRL)\n    const productIdentifierRegister = useRegister(\n        control,\n        ControlReg.ProductIdentifier\n    )\n    const [productIdentifier] = useRegisterUnpackedValue<[number]>(\n        productIdentifierRegister\n    )\n    const firmwareVersionRegister = useRegister(\n        control,\n        ControlReg.FirmwareVersion\n    )\n    const [firmwareVersion] = useRegisterUnpackedValue<[string]>(\n        firmwareVersionRegister\n    )\n    if (firmwareVersion == undefined) return null\n\n    const firmwareName =\n        !!productIdentifier &&\n        specification?.firmwares?.find(\n            fw => fw.productIdentifier === productIdentifier\n        )?.name\n\n    return (\n        <Chip\n            size=\"small\"\n            label={[firmwareName, firmwareVersion].filter(f => !!f).join(\" \")}\n        />\n    )\n}\n"],"names":["specification","useDeviceSpecification","control","useService","productIdentifierRegister","useRegister","ControlReg","useRegisterUnpackedValue","firmwareVersionRegister","firmwareVersion","firmwareName","fw","f"],"sourceRoot":""}