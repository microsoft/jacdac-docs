{"version":3,"file":"7327-75ba85181bd81a81fafc.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardAccelerometer.tsx"],"sourcesContent":["import React, { lazy, useCallback } from \"react\"\nimport { AccelerometerReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { SensorServer } from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport { Grid, NoSsr } from \"@mui/material\"\nimport { roundWithPrecision } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { Vector } from \"../widgets/threeutils\"\nimport Suspense from \"../ui/Suspense\"\nimport SliderWithLabel from \"../ui/SliderWithLabel\"\nimport useRegister from \"../hooks/useRegister\"\nimport { useId } from \"react\"\nimport MaxReadingField from \"./MaxReadingField\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\n\nconst CanvasWidget = lazy(() => import(\"../widgets/CanvasWidget\"))\n\nconst valueDisplay = (v: number) => roundWithPrecision(v, 1)\nfunction Sliders(props: {\n    server?: SensorServer<[number, number, number]>\n    register: JDRegister\n    visible?: boolean\n}) {\n    const { server, register } = props\n    const xId = useId()\n    const yId = xId + \"-y\"\n    const zId = xId + \"-z\"\n    const forces = useRegisterUnpackedValue<[number, number, number]>(\n        register,\n        props\n    )\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeX: any = async (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [, y] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        const nz = -Math.sqrt(1 - (n * n + y * y))\n        server.reading.setValues([n, y, nz])\n        await register.sendGetAsync()\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeY: any = async (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [x] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        const nz = -Math.sqrt(1 - (x * x + n * n))\n        server.reading.setValues([x, n, nz])\n        await register.sendGetAsync()\n    }\n\n    if (!forces?.length)\n        return <DashboardRegisterValueFallback register={register} />\n\n    const [x, y, z] = forces\n    const min = -2\n    const max = 2\n    const step = 0.1\n    const marks = [\n        {\n            value: 0,\n        },\n        {\n            value: -1,\n        },\n        {\n            value: 1,\n        },\n    ]\n    return (\n        <>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    id={xId}\n                    label=\"X\"\n                    valueLabelDisplay=\"on\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"x\"\n                    min={min}\n                    max={max}\n                    step={step}\n                    value={x}\n                    onChange={server ? handleChangeX : undefined}\n                    marks={marks}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    id={yId}\n                    label=\"Y\"\n                    valueLabelDisplay=\"on\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"y\"\n                    min={min}\n                    max={max}\n                    step={step}\n                    value={y}\n                    onChange={server ? handleChangeY : undefined}\n                    marks={marks}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    id={zId}\n                    label=\"Z\"\n                    valueLabelDisplay=\"on\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"z\"\n                    min={min}\n                    max={max}\n                    step={step}\n                    value={z}\n                    marks={marks}\n                />\n            </Grid>\n        </>\n    )\n}\n\nfunction lerp(v0: number, v1: number, t: number) {\n    return v0 * (1 - t) + v1 * t\n}\n\nexport default function DashboardAccelerometer(props: DashboardServiceProps) {\n    const { service, visible, expanded } = props\n    const register = useRegister(service, AccelerometerReg.Forces)\n    useRegisterUnpackedValue<[number, number, number]>(register, props)\n    const server =\n        useServiceServer<SensorServer<[number, number, number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { active } = useWidgetTheme(color)\n    const rotator = useCallback(\n        (delta: number, rotation: Vector) => {\n            const forces = register.unpackedValue\n            if (!forces) return undefined\n            const [x, y, z] = forces\n            let roll = Math.atan2(-y, z)\n            if (y >= 0)\n                roll += Math.PI\n            else\n                roll -= Math.PI\n            const pitch = Math.atan(x / (y * y + z * z))\n\n            return {\n                x: lerp(rotation.x, roll, 0.1),\n                y: 0,\n                z: lerp(rotation.z, pitch, 0.1),\n            }\n        },\n        [register]\n    )\n\n    return (\n        <Grid container direction=\"row\">\n            <Grid item>\n                <NoSsr>\n                    <Suspense>\n                        <CanvasWidget color={active} rotator={rotator} />\n                    </Suspense>\n                </NoSsr>\n            </Grid>\n            {expanded && (\n                <Sliders\n                    server={server}\n                    register={register}\n                    visible={visible}\n                />\n            )}\n            {expanded && (\n                <MaxReadingField\n                    registerCode={AccelerometerReg.MaxForce}\n                    {...props}\n                />\n            )}\n        </Grid>\n    )\n}\n"],"names":["CanvasWidget","lazy","valueDisplay","v","roundWithPrecision","xId","useId","yId","zId","forces","useRegisterUnpackedValue","handleChangeX","server","n","nz","Math","y","register","handleChangeY","x","min","max","step","marks","value","v0","v1","useRegister","AccelerometerReg","useServiceServer","color","useWidgetTheme","rotator","useCallback","roll","pitch","z","lerp","rotation","expanded"],"sourceRoot":""}