{"version":3,"file":"component---src-pages-tools-device-tester-tsx-27753a24872a3b24c397.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/CloudDone.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/CloudOff.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/CloudUpload.js","webpack://jacdac-docs/./src/components/firmware/FirmwareFlashInstructions.tsx","webpack://jacdac-docs/./src/components/firmware/FlashDeviceButton.tsx","webpack://jacdac-docs/./src/components/firmware/useDeviceFirmwareBlob.ts","webpack://jacdac-docs/./src/components/firmware/useDeviceFirmwareInfo.ts","webpack://jacdac-docs/./src/components/shell/Head.tsx","webpack://jacdac-docs/./src/components/ui/AlertSwitch.tsx","webpack://jacdac-docs/./src/components/ui/CircularProgressWithLabel.tsx","webpack://jacdac-docs/./src/jacdac/useProxy.ts","webpack://jacdac-docs/./src/components/testdom/TestUploadStateIcon.tsx","webpack://jacdac-docs/./src/components/testdom/TestUploadStateMessage.tsx","webpack://jacdac-docs/./src/components/testdom/DeviceTestItem.tsx","webpack://jacdac-docs/./src/components/testdom/useDeviceTest.ts","webpack://jacdac-docs/./src/components/testdom/PowerSupplySection.tsx","webpack://jacdac-docs/./src/pages/tools/device-tester.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM10 17l-3.5-3.5 1.41-1.41L10 14.17 15.18 9l1.41 1.41L10 17z\"\n}), 'CloudDone');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19.35 10.04C18.67 6.59 15.64 4 12 4c-1.48 0-2.85.43-4.01 1.17l1.46 1.46C10.21 6.23 11.08 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3 0 1.13-.64 2.11-1.56 2.62l1.45 1.45C23.16 18.16 24 16.68 24 15c0-2.64-2.05-4.78-4.65-4.96zM3 5.27l2.75 2.74C2.56 8.15 0 10.77 0 14c0 3.31 2.69 6 6 6h11.73l2 2L21 20.73 4.27 4 3 5.27zM7.73 10l8 8H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h1.73z\"\n}), 'CloudOff');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\"\n}), 'CloudUpload');\nexports.default = _default;","import React from \"react\"\n\nexport default function FirmwareFlashInstructions(props: {\n    specification: jdspec.DeviceSpec\n}) {\n    const { specification } = props\n    const { bootloader } = specification || {}\n    const { driveName, sequence, ledAnimation, firmwareUploader } =\n        bootloader || {}\n\n    return (\n        <>\n            {sequence === \"reset\" && (\n                <li>\n                    Press the &nbsp;<b>Reset (RST)</b>&nbsp; button.\n                </li>\n            )}\n            {sequence === \"reset-boot\" && (\n                <li>\n                    Press the &nbsp;<b>Reset (RST)</b>&nbsp; then &nbsp;\n                    <b>Bootloader (BOOT)</b>&nbsp; button.\n                </li>\n            )}\n            {sequence === \"boot-power\" && (\n                <li>\n                    Unplug the device, press the &nbsp;<b>Bootloader (BOOT)</b>\n                    &nbsp; button, plug the device.\n                </li>\n            )}\n            {ledAnimation === \"blue-glow\" && driveName && (\n                <li>\n                    You should see the status LED glow in Blue and the&nbsp;\n                    <b>{driveName}</b>&nbsp; drive should appear.\n                </li>\n            )}\n            {driveName && (\n                <>\n                    <li>\n                        Drag and drop the file into the&nbsp;\n                        <b>{driveName}</b>&nbsp; drive.\n                    </li>\n                    <li>\n                        Once the file is copied, the device will automatically\n                        restart with the new firmware.\n                    </li>\n                </>\n            )}\n            {firmwareUploader && (\n                <li>\n                    Open the &nbsp;\n                    <a href={firmwareUploader} rel=\"noreferrer\" target=\"_blank\">\n                        Firmware Uploader\n                    </a>\n                    &nbsp; and follow the instruction to upload the firmware.\n                </li>\n            )}\n        </>\n    )\n}\n","import {\n    Button,\n    Typography,\n    Dialog,\n    DialogContent,\n    Grid,\n    AlertTitle,\n} from \"@mui/material\"\nimport { Alert } from \"@mui/material\"\nimport React, { useEffect, useState } from \"react\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport {\n    updateApplicable,\n    FirmwareBlob,\n    FirmwareUpdater,\n} from \"../../../jacdac-ts/src/jdom/flashing\"\nimport CircularProgressWithLabel from \"../ui/CircularProgressWithLabel\"\nimport useChange from \"../../jacdac/useChange\"\nimport useAnalytics from \"../hooks/useAnalytics\"\nimport useDeviceSpecification from \"../../jacdac/useDeviceSpecification\"\nimport { Link } from \"gatsby-material-ui-components\"\nimport DialogTitleWithClose from \"../ui/DialogTitleWithClose\"\nimport { useLatestReleaseAsset } from \"../github\"\nimport useBus from \"../../jacdac/useBus\"\nimport useSnackbar from \"../hooks/useSnackbar\"\nimport { PROGRESS } from \"../../../jacdac-ts/src/jdom/constants\"\nimport useDeviceFirmwareInfo from \"./useDeviceFirmwareInfo\"\nimport { semverCmp } from \"../../../jacdac-ts/src/jdom/semver\"\nimport FirmwareFlashInstructions from \"./FirmwareFlashInstructions\"\n\nfunction DragAndDropUpdateButton(props: {\n    firmwareVersion: string\n    productIdentifier: number\n    specification: jdspec.DeviceSpec\n    info: { name: string; url: string; productIdentifier?: number }\n}) {\n    const bus = useBus()\n    const { firmwareVersion, specification, info, productIdentifier } = props\n    const { name, url } = info\n    const [open, setOpen] = useState(false)\n    const { trackEvent } = useAnalytics()\n    const handleOpen = () => {\n        trackEvent(\"flash.download\", {\n            device: specification.name,\n            firmwareName: name,\n        })\n        setOpen(true)\n    }\n    const handleClose = () => setOpen(false)\n    const { version, assertUrl } = useLatestReleaseAsset(url)\n    const current =\n        !!productIdentifier && productIdentifier === info.productIdentifier\n    const hasUpdate =\n        current &&\n        version &&\n        firmwareVersion &&\n        semverCmp(firmwareVersion, version) > 0\n\n    // device dissapears after reset\n    useEffect(() => {\n        if (open) {\n            bus.pushDeviceFrozen()\n            return () => bus.popDeviceFrozen()\n        }\n    }, [open])\n\n    return (\n        <>\n            <Button\n                variant={hasUpdate ? \"contained\" : \"outlined\"}\n                color={current ? \"primary\" : \"inherit\"}\n                onClick={handleOpen}\n            >\n                {name}\n                {version && (\n                    <Typography sx={{ ml: 1 }} variant=\"caption\">\n                        {version}\n                    </Typography>\n                )}\n            </Button>\n            <Dialog open={open}>\n                <DialogTitleWithClose onClose={handleClose}>\n                    Updating your {specification.name}\n                </DialogTitleWithClose>\n                <DialogContent>\n                    <p>\n                        Follow these instruction to upgrade your{\" \"}\n                        {specification.name} with <b>{name}</b>.\n                    </p>\n                    <ol>\n                        <li>\n                            <Link href={assertUrl || url}>\n                                Download the firmware file\n                            </Link>\n                        </li>\n                        <FirmwareFlashInstructions\n                            specification={specification}\n                        />\n                    </ol>\n                </DialogContent>\n            </Dialog>\n        </>\n    )\n}\n\nexport function FlashDeviceButton(props: {\n    device: JDDevice\n    blob: FirmwareBlob\n    ignoreFirmwareCheck?: boolean\n    hideUpToDate?: boolean\n}) {\n    const { device, blob, ignoreFirmwareCheck, hideUpToDate } = props\n    const bus = useBus()\n    const { setError } = useSnackbar()\n    const { trackEvent, trackError } = useAnalytics()\n    const [progress, setProgress] = useState(0)\n    const specification = useDeviceSpecification(device)\n    const firmwares = specification?.firmwares\n    const bootloader = useChange(device, _ => _?.bootloader)\n    const firmwareUpdater = useChange(device, _ => _?.firmwareUpdater)\n    const firmwareInfo = useDeviceFirmwareInfo(device)\n    const update =\n        ignoreFirmwareCheck ||\n        (blob?.version &&\n            firmwareInfo?.version &&\n            updateApplicable(firmwareInfo, blob))\n    const upToDate =\n        blob?.version &&\n        firmwareInfo?.version &&\n        blob.version === firmwareInfo.version\n    const unsupported = specification && !specification.repo\n    const missing = !device || !blob\n    const disabled = !!firmwareUpdater\n    const color = update && !upToDate ? \"primary\" : \"inherit\"\n\n    useEffect(\n        () =>\n            firmwareUpdater?.subscribe(PROGRESS, (v: number) =>\n                setProgress(v * 100)\n            ),\n        [firmwareUpdater]\n    )\n\n    const handleFlashing = async () => {\n        if (device.firmwareUpdater) return\n        const props = {\n            productId: firmwareInfo.productIdentifier,\n            name: firmwareInfo.name,\n            version: firmwareInfo.version,\n        }\n        console.debug(\"start flash\", { ...props, device })\n        trackEvent(\"flash.start\", props)\n        const updater = new FirmwareUpdater(device.bus, blob)\n        try {\n            device.firmwareUpdater = updater\n            setProgress(0)\n            const updateCandidates = [firmwareInfo]\n            await updater.flash(updateCandidates, ignoreFirmwareCheck)\n            trackEvent(\"flash.success\", props)\n        } catch (e) {\n            trackError(e, props)\n            trackEvent(\"flash.error\", props)\n            setError(e)\n        } finally {\n            console.debug(\"end flash\", { ...props, device })\n            // rebuild device\n            bus.removeDevice(device.deviceId)\n        }\n    }\n\n    useEffect(() => {\n        if (device && firmwareInfo && !bootloader && update && !upToDate) {\n            handleFlashing()\n        }\n    }, [device, firmwareInfo, bootloader, update, upToDate])\n\n    if (hideUpToDate && upToDate) return null\n\n    if (firmwares?.length)\n        return (\n            <Grid container spacing={1} direction=\"row\">\n                {firmwares.map(fw => (\n                    <Grid item key={fw.name}>\n                        <DragAndDropUpdateButton\n                            firmwareVersion={firmwareInfo?.version}\n                            productIdentifier={firmwareInfo?.productIdentifier}\n                            specification={specification}\n                            info={fw}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n        )\n\n    return unsupported ? (\n        <Alert severity=\"info\">No registered firmware</Alert>\n    ) : missing ? (\n        <Alert severity=\"info\">No firmware available</Alert>\n    ) : firmwareUpdater ? (\n        <>\n            <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">\n                Updating firmware\n            </Typography>\n            <CircularProgressWithLabel value={progress} />\n        </>\n    ) : firmwareInfo || update ? (\n        <Alert severity={upToDate ? \"success\" : \"info\"}>\n            <AlertTitle>\n                {upToDate ? \"Up to date!\" : `${blob.version} available`}\n            </AlertTitle>\n            {(!upToDate || ignoreFirmwareCheck) && firmwareInfo && (\n                <Button\n                    title={`Flash ${blob.version}`}\n                    disabled={disabled}\n                    variant=\"contained\"\n                    color={color}\n                    onClick={handleFlashing}\n                >\n                    Update\n                </Button>\n            )}\n        </Alert>\n    ) : (\n        <Alert severity=\"info\">No firmware available</Alert>\n    )\n}\n","import { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport useBus from \"../../jacdac/useBus\"\nimport useChange from \"../../jacdac/useChange\"\nimport useDeviceFirmwareInfo from \"./useDeviceFirmwareInfo\"\n\nexport default function useDeviceFirmwareBlob(device: JDDevice) {\n    const bus = useBus()\n    const blobs = useChange(bus, _ => _.firmwareBlobs)\n    const firmwareInfo = useDeviceFirmwareInfo(device)\n    const blob =\n        firmwareInfo &&\n        blobs?.find(b => firmwareInfo.productIdentifier == b.productIdentifier)\n\n    return blob\n}\n","import { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport useChange from \"../../jacdac/useChange\"\n\nexport default function useDeviceFirmwareInfo(device: JDDevice) {\n    const firmwareInfo = useChange(\n        device,\n        _ => _?.firmwareInfo,\n        undefined,\n        (a, b) =>\n            !!a == !!b &&\n            (!a ||\n                (a.deviceId === b.deviceId &&\n                    a.version === b.version &&\n                    a.productIdentifier === b.productIdentifier &&\n                    a.bootloaderProductIdentifier ==\n                        b.bootloaderProductIdentifier))\n    )\n\n    return firmwareInfo\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport type { HeadProps } from \"gatsby\"\n\nexport default function Head(\n    props: HeadProps & {\n        description?: string\n        image?: string\n        title?: string\n        meta?: { name: string; content: string }[]\n    }\n) {\n    const {\n        pageContext,\n        data,\n        description,\n        image,\n        title,\n        meta = [],\n    }: {\n        pageContext: { title?: string }\n        data?: { page?: { description?: string } }\n        description?: string\n        image?: string\n        title?: string\n        meta?: { name: string; content: string }[]\n    } = props\n    const { site } = useStaticQuery(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        author\n                    }\n                }\n            }\n        `\n    )\n    let metaTitle = title || pageContext?.title || site?.siteMetadata?.title\n    if (!/^(Jacdac|DeviceScript)/i.test(metaTitle))\n        metaTitle = `Jacdac - ${metaTitle}`\n    const metaDescription =\n        description ||\n        data?.page?.description ||\n        site?.siteMetadata?.description\n    return (\n        <>\n            <title key=\"title\">{metaTitle}</title>\n            {[\n                {\n                    name: `description`,\n                    content: metaDescription,\n                },\n                {\n                    name: \"og:image\",\n                    content: image,\n                },\n                {\n                    name: `og:title`,\n                    content: metaTitle,\n                },\n                {\n                    name: `og:description`,\n                    content: metaDescription,\n                },\n                {\n                    name: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: `summary`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: site.siteMetadata.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: metaDescription,\n                },\n                ...meta,\n            ]\n                .filter(({ content }) => !!content)\n                .map(({ name, content }) => (\n                    <meta key={name} name={name} content={content} />\n                ))}\n            <link\n                key=\"fontsgoogle\"\n                rel=\"preconnect\"\n                href=\"https://fonts.googleapis.com\"\n                crossOrigin=\"anonymous\"\n            />\n            <link\n                key=\"gitusercontent\"\n                rel=\"preconnect\"\n                href=\"https://raw.githubusercontent.com\"\n                crossOrigin=\"anonymous\"\n            />\n            <meta\n                key=\"viewport\"\n                name=\"viewport\"\n                content=\"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\"\n            />\n        </>\n    )\n}\n","import React, { ReactNode } from \"react\"\nimport { AlertColor, Box, Typography } from \"@mui/material\"\nimport SwitchWithLabel from \"./SwitchWithLabel\"\nimport Alert from \"./Alert\"\n\nexport default function AlertSwitch(props: {\n    severity?: AlertColor\n    title: string\n    checked: boolean\n    onChecked: (checked: boolean) => void\n    children?: ReactNode\n}) {\n    const { severity, title, checked, onChecked, children } = props\n    const handleChecked = (ev: unknown, newChecked: boolean) =>\n        onChecked(newChecked)\n    return (\n        <Alert severity={severity}>\n            <SwitchWithLabel\n                checked={checked}\n                onChange={handleChecked}\n                label={\n                    <Typography component=\"span\" variant=\"body1\">\n                        {title}\n                    </Typography>\n                }\n            />\n            <Box mr={1}>\n                <Typography component=\"span\" variant=\"caption\">\n                    {children}\n                </Typography>\n            </Box>\n        </Alert>\n    )\n}\n","import React from \"react\"\nimport {\n    CircularProgressProps,\n    Box,\n    CircularProgress,\n    Typography,\n} from \"@mui/material\"\n\nexport default function CircularProgressWithLabel(\n    props: CircularProgressProps & { value: number }\n) {\n    const { value } = props\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" {...props} />\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography\n                    variant=\"caption\"\n                    component=\"div\"\n                    color=\"textSecondary\"\n                >{`${Math.round(value)}%`}</Typography>\n            </Box>\n        </Box>\n    )\n}\n","import { Packet } from \"../../jacdac-ts/src/jdom/packet\"\nimport { useEffect } from \"react\"\nimport {\n    ControlCmd,\n    DEVICE_ANNOUNCE,\n    SRV_CONTROL,\n} from \"../../jacdac-ts/src/jdom/constants\"\nimport useBus from \"./useBus\"\n\n/**\n * A hook to force brains into proxy mode.\n * @param force\n */\nexport default function useProxy(force: boolean) {\n    const bus = useBus()\n    useEffect(() => {\n        if (!force) return\n\n        const forceProxy = () => {\n            const pkt = Packet.onlyHeader(ControlCmd.Proxy)\n            pkt.sendAsMultiCommandAsync(bus, SRV_CONTROL)\n        }\n        const unsub = bus.subscribe(DEVICE_ANNOUNCE, forceProxy)\n        forceProxy()\n        return unsub\n    }, [force])\n}\n","import React from \"react\"\nimport useChange from \"../../jacdac/useChange\"\nimport { TestNode } from \"../../../jacdac-ts/src/testdom/nodes\"\nimport { TestUploadState } from \"../../../jacdac-ts/src/testdom/spec\"\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\"\nimport CloudDoneIcon from \"@mui/icons-material/CloudDone\"\nimport CloudOffIcon from \"@mui/icons-material/CloudOff\"\n\nexport default function TestUploadStateIcon(props: { node: TestNode }) {\n    const { node } = props\n    const state = useChange(node, _ => _?.uploadState)\n    switch (state) {\n        case TestUploadState.Uploading:\n            return <CloudUploadIcon aria-label=\"uploading\" color=\"disabled\" />\n        case TestUploadState.Uploaded:\n            return <CloudDoneIcon aria-label=\"uploaded\" color=\"success\" />\n        case TestUploadState.UploadError:\n            return <CloudOffIcon aria-label=\"upload error\" color=\"error\" />\n        default:\n            return null\n    }\n}\n","import React from \"react\"\nimport useChange from \"../../jacdac/useChange\"\nimport { TestNode } from \"../../../jacdac-ts/src/testdom/nodes\"\nimport { TestUploadState } from \"../../../jacdac-ts/src/testdom/spec\"\nimport { Typography } from \"@mui/material\"\n\nexport default function TestUploadStateMessage(props: { node: TestNode }) {\n    const { node } = props\n    const state = useChange(node, _ => _?.uploadState)\n    const msg = {\n        [TestUploadState.Uploaded]: \"uploaded\",\n        [TestUploadState.UploadError]: \"upload error\",\n        [TestUploadState.Uploading]: \"uploading...\",\n    }[state]\n    if (!msg) return null\n    return (\n        <Typography component=\"span\" variant=\"subtitle2\">\n            {msg}\n        </Typography>\n    )\n}\n","import { Grid } from \"@mui/material\"\nimport React from \"react\"\nimport DashboardDeviceItem from \"../../components/dashboard/DashboardDeviceItem\"\nimport TestTreeView from \"./TestTreeView\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport { TestNode } from \"../../../jacdac-ts/src/testdom/nodes\"\nimport { FlashDeviceButton } from \"../../components/firmware/FlashDeviceButton\"\nimport useDeviceFirmwareBlob from \"../../components/firmware/useDeviceFirmwareBlob\"\nimport { useDeviceTestExporter } from \"./DeviceTestExporter\"\nimport useChange from \"../../jacdac/useChange\"\nimport { TestUploadState } from \"../../../jacdac-ts/src/testdom/spec\"\nimport TestUploadStateIcon from \"./TestUploadStateIcon\"\nimport TestUploadStateMessage from \"./TestUploadStateMessage\"\n\nexport default function DeviceTestItem(props: {\n    test: TestNode\n    device: JDDevice\n}) {\n    const { device, test } = props\n    const blob = useDeviceFirmwareBlob(device)\n    const uploadState = useChange(test, _ => _?.uploadState)\n\n    useDeviceTestExporter(test)\n\n    return (\n        <Grid container spacing={1}>\n            <DashboardDeviceItem\n                key={device.id}\n                device={device}\n                showAvatar={true}\n                showHeader={true}\n                showReset={true}\n            />\n            <Grid item xs>\n                <Grid container direction=\"column\" spacing={1}>\n                    {blob && (\n                        <Grid item>\n                            <FlashDeviceButton\n                                device={device}\n                                blob={blob}\n                                hideUpToDate={true}\n                            />\n                        </Grid>\n                    )}\n                    {test && (\n                        <Grid item xs={12}>\n                            <TestTreeView\n                                test={test}\n                                skipPanel={true}\n                                defaultExpanded={true}\n                            />\n                        </Grid>\n                    )}\n                    {uploadState !== TestUploadState.Local && (\n                        <Grid item xs={12}>\n                            <Grid container spacing={1} direction=\"row\">\n                                <Grid item>\n                                    <TestUploadStateIcon node={test} />\n                                </Grid>\n                                <Grid item>\n                                    <TestUploadStateMessage node={test} />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport {\n    DeviceTestSpec,\n    OracleTestSpec,\n} from \"../../../jacdac-ts/src/testdom/spec\"\nimport { DeviceTest } from \"../../../jacdac-ts/src/testdom/nodes\"\nimport { createDeviceTest } from \"../../../jacdac-ts/src/testdom/compiler\"\nimport useBus from \"../../jacdac/useBus\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\n\nexport default function useDeviceTest(\n    device: JDDevice,\n    deviceSpec: DeviceTestSpec,\n    oracles?: OracleTestSpec[]\n) {\n    const bus = useBus()\n    const [test, setTest] = useState<DeviceTest>(undefined)\n    useEffect(() => {\n        if (deviceSpec) {\n            try {\n                const p = createDeviceTest(bus, deviceSpec, oracles)\n                if (p) p.device = device\n                setTest(p)\n                return () => (p.device = undefined)\n            } catch (e) {\n                console.debug(e)\n            }\n        }\n        setTest(undefined)\n        return undefined\n    }, [deviceSpec, oracles])\n    return test\n}\n","import { Grid } from \"@mui/material\"\nimport {\n    SRV_DC_CURRENT_MEASUREMENT,\n    SRV_DC_VOLTAGE_MEASUREMENT,\n    SRV_POWER_SUPPLY,\n    SRV_RELAY,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport React, { useId } from \"react\"\nimport useDevices from \"../hooks/useDevices\"\nimport { isModuleTester } from \"./filters\"\nimport DashboardDevice from \"../dashboard/DashboardDevice\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\n\nfunction powerSupplyServiceFilter(service: JDService) {\n    return (\n        [\n            SRV_POWER_SUPPLY,\n            SRV_DC_VOLTAGE_MEASUREMENT,\n            SRV_DC_CURRENT_MEASUREMENT,\n            SRV_RELAY,\n        ].indexOf(service.serviceClass) > -1\n    )\n}\n\nexport default function PowerSupplySection() {\n    const sectionId = useId()\n    const devices = useDevices({\n        serviceClass: SRV_POWER_SUPPLY,\n        announced: true,\n    }).filter(isModuleTester)\n    if (!devices?.length) return null\n\n    return (\n        <section id={sectionId}>\n            <h2>Power Supply</h2>\n            <Grid container spacing={1}>\n                {devices.map(device => (\n                    <DashboardDevice\n                        key={device.nodeId}\n                        device={device}\n                        serviceFilter={powerSupplyServiceFilter}\n                    />\n                ))}\n            </Grid>\n        </section>\n    )\n}\n","import { Grid, Tab, Tabs } from \"@mui/material\"\nimport React, { useMemo, useState } from \"react\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport useDeviceProductIdentifier from \"../../jacdac/useDeviceProductIdentifier\"\nimport FirmwareLoader from \"../../components/firmware/FirmwareLoader\"\nimport FirmwareCardGrid from \"../../components/firmware/FirmwareCardGrid\"\nimport useChange from \"../../jacdac/useChange\"\nimport {\n    filterTestDevice,\n    filterTestService,\n} from \"../../components/testdom/filters\"\nimport DeviceTestItem from \"../../components/testdom/DeviceTestItem\"\nimport {\n    DeviceTestSpec,\n    OracleTestSpec,\n} from \"../../../jacdac-ts/src/testdom/spec\"\nimport useDeviceTest from \"../../components/testdom/useDeviceTest\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport { isDualDeviceId } from \"../../../jacdac-ts/src/jdom/spec\"\nimport PowerSupplySection from \"../../components/testdom/PowerSupplySection\"\nimport TabPanel from \"../../components/ui/TabPanel\"\nimport AlertSwitch from \"../../components/ui/AlertSwitch\"\nimport useProxy from \"../../jacdac/useProxy\"\nimport useBusWithMode from \"../../jacdac/useBusWithMode\"\nimport useLocalStorage from \"../../components/hooks/useLocalStorage\"\nimport DeviceTestExporter from \"../../components/testdom/DeviceTestExporter\"\nimport { Flags } from \"../../../jacdac-ts/src/jdom/flags\"\nimport DashboardDeviceItem from \"../../components/dashboard/DashboardDeviceItem\"\nimport SwitchWithLabel from \"../../components/ui/SwitchWithLabel\"\nimport { arrayConcatMany, splitFilter } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { resolveReadingTolerage } from \"../../../jacdac-ts/src/testdom/testrules\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\nconst FACTORY_MODE_STORAGE_KEY = \"device_tester_factory\"\nconst EXPORT_MODE_STORAGE_KEY = \"device_tester_export\"\nconst ORACLE_DEVICES_STORAGE_KEY = \"device_tester_oracles\"\n\nfunction DeviceItem(props: {\n    device: JDDevice\n    factory?: boolean\n    oracles?: OracleTestSpec[]\n}) {\n    const { device, factory, oracles } = props\n    const productIdentifier = useDeviceProductIdentifier(device)\n    const testSpec = useChange(\n        device,\n        _ =>\n            _ &&\n            !_.firmwareUpdater &&\n            ({\n                productIdentifier,\n                factory,\n                services: device.serviceClasses\n                    .filter(filterTestService)\n                    .map(sc => ({ serviceClass: sc })),\n            } as DeviceTestSpec),\n        [productIdentifier, factory],\n        (a, b) => JSON.stringify(a) === JSON.stringify(b)\n    )\n    const test = useDeviceTest(device, testSpec, oracles)\n    if (!device) return null\n    return <DeviceTestItem test={test} device={device} />\n}\n\nexport const frontmatter = {\n    title: \"Device Tester\",\n    description:\n        \"Validating services in devices. Designed for manual or factory floor testing.\",\n}\nimport CoreHead from \"../../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    const [tab, setTab] = useState(0)\n    const [proxy, setProxy] = useState(false)\n    const [factory, setFactory] = useLocalStorage(\n        FACTORY_MODE_STORAGE_KEY,\n        false\n    )\n    const [exporter, setExporter] = useLocalStorage(\n        EXPORT_MODE_STORAGE_KEY,\n        false\n    )\n    const [oracleDeviceIds, setOracleDeviceIds] = useLocalStorage<string[]>(\n        ORACLE_DEVICES_STORAGE_KEY,\n        []\n    )\n\n    // don't let a brain interfere\n    useProxy(proxy)\n    // auto-connect\n    useBusWithMode({ autoConnect: true })\n\n    const handleSetFactory = (checked: boolean) => setFactory(checked)\n    const handleSetExporter = (checked: boolean) => setExporter(checked)\n    const handleSetProxy = (checked: boolean) => setProxy(checked)\n    const devices = useDevices({\n        physical: !Flags.diagnostics,\n        announced: true,\n        ignoreInfrastructure: true,\n    })\n        .filter(\n            (dev, _, devs) =>\n                !dev.bootloader || // show non-bootloader devices\n                !devs.some(d => isDualDeviceId(d.deviceId, dev.deviceId)) // show bootloaders which don't have the application device listed\n        )\n        .filter(filterTestDevice)\n        .sort((l, r) => -(l.created - r.created))\n\n    const [deviceOracles, devicesNoOracles] = splitFilter(devices, d =>\n        oracleDeviceIds.includes(d.deviceId)\n    )\n    const oracles = useMemo(\n        () =>\n            arrayConcatMany(\n                devices\n                    ?.filter(d => oracleDeviceIds.includes(d.deviceId))\n                    .map(d =>\n                        d\n                            .services({ sensor: true })\n                            .map<OracleTestSpec>(\n                                ({ device, serviceClass, serviceIndex }) => ({\n                                    deviceId: device.deviceId,\n                                    serviceClass,\n                                    serviceIndex,\n                                    tolerance:\n                                        resolveReadingTolerage(serviceClass),\n                                })\n                            )\n                    )\n            ),\n        [devices, oracleDeviceIds]\n    )\n\n    const handleTabChange = (\n        event: React.ChangeEvent<unknown>,\n        newValue: number\n    ) => {\n        setTab(newValue)\n    }\n    const handleCheckOracle = (device: JDDevice) => () => {\n        const newOracles = oracleDeviceIds.slice(0)\n        const i = newOracles.indexOf(device.deviceId)\n        if (i > -1) newOracles.splice(i, 1)\n        else newOracles.push(device.deviceId)\n        setOracleDeviceIds(newOracles)\n    }\n\n    return (\n        <>\n            <h1>Device Tester</h1>\n            <Tabs\n                value={tab}\n                onChange={handleTabChange}\n                aria-label=\"Testing services in devices\"\n            >\n                <Tab label={`Devices`} />\n                <Tab label={`Oracles`} />\n            </Tabs>\n            <TabPanel value={tab} index={0}>\n                <PowerSupplySection />\n                {devicesNoOracles?.length ? (\n                    <Grid container spacing={1}>\n                        {devicesNoOracles?.map(device => (\n                            <Grid key={device.id} item xs={12}>\n                                <DeviceItem\n                                    device={device}\n                                    factory={factory}\n                                    oracles={oracles}\n                                />\n                            </Grid>\n                        ))}\n                    </Grid>\n                ) : (\n                    <p>\n                        Connect your device and follow the instructions to run a\n                        compliance test.\n                    </p>\n                )}\n                {!!deviceOracles?.length && (\n                    <Grid container spacing={1}>\n                        <GridHeader title=\"Oracles\" />\n                        {deviceOracles.map(d => (\n                            <DashboardDeviceItem\n                                device={d}\n                                key={d.id}\n                                showAvatar={true}\n                                showHeader={true}\n                                showReset={true}\n                            />\n                        ))}\n                    </Grid>\n                )}\n                <AlertSwitch\n                    severity=\"success\"\n                    title=\"factory mode\"\n                    checked={factory}\n                    onChecked={handleSetFactory}\n                >\n                    Tests should be fast and automated in factory mode. Manual\n                    tests are <b>disabled</b>.\n                </AlertSwitch>\n                <AlertSwitch\n                    severity=\"info\"\n                    title=\"upload test results\"\n                    checked={exporter}\n                    onChecked={handleSetExporter}\n                >\n                    Automatically upload test results to a web service.\n                    {exporter && <DeviceTestExporter />}\n                </AlertSwitch>\n                <AlertSwitch\n                    severity=\"info\"\n                    title=\"automatic dongle mode\"\n                    checked={proxy}\n                    onChecked={handleSetProxy}\n                >\n                    Force brains to enter dongle mode, to avoid application\n                    interfere with testing.\n                </AlertSwitch>\n            </TabPanel>\n            <TabPanel value={tab} index={1}>\n                <Grid container spacing={1}>\n                    <Grid item xs={12}>\n                        Use known device readings as oracles for the device\n                        under tests (within tolerance).\n                    </Grid>\n                    {devices?.map(device => (\n                        <Grid key={device.id} item xs={12}>\n                            <Grid container spacing={1}>\n                                <DashboardDeviceItem\n                                    key={device.id}\n                                    device={device}\n                                    showAvatar={true}\n                                    showHeader={true}\n                                    showReset={true}\n                                />\n                                <Grid item xs>\n                                    <SwitchWithLabel\n                                        label={\"reading oracle\"}\n                                        checked={oracleDeviceIds.includes(\n                                            device.deviceId\n                                        )}\n                                        onChange={handleCheckOracle(device)}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    ))}\n                </Grid>\n            </TabPanel>\n            <p>\n                Read the{\" \"}\n                <Link to=\"/ddk/design/manufacturing/\">\n                    Device Tester documentation\n                </Link>\n                .\n            </p>\n        </>\n    )\n}\n"],"names":["specification","bootloader","sequence","ledAnimation","driveName","firmwareUploader","bus","useBus","useState","useAnalytics","handleOpen","trackEvent","device","firmwareName","setOpen","handleClose","useLatestReleaseAsset","current","productIdentifier","info","hasUpdate","semverCmp","useEffect","version","ml","assertUrl","useSnackbar","useDeviceSpecification","firmwares","useChange","_","firmwareUpdater","firmwareInfo","useDeviceFirmwareInfo","update","ignoreFirmwareCheck","updateApplicable","upToDate","blob","unsupported","missing","disabled","color","v","setProgress","handleFlashing","props","productId","name","console","updater","updateCandidates","trackError","setError","hideUpToDate","fw","blobs","b","a","meta","useStaticQuery","metaTitle","title","pageContext","site","metaDescription","description","data","content","handleChecked","onChecked","Math","forceProxy","pkt","Packet","ControlCmd","unsub","state","TestUploadState","msg","useDeviceFirmwareBlob","uploadState","useDeviceTestExporter","test","p","createDeviceTest","setTest","service","sectionId","useId","devices","useDevices","serviceClass","announced","FACTORY_MODE_STORAGE_KEY","EXPORT_MODE_STORAGE_KEY","ORACLE_DEVICES_STORAGE_KEY","oracles","useDeviceProductIdentifier","testSpec","services","sc","JSON","useDeviceTest","frontmatter","Head","setTab","setProxy","useLocalStorage","useProxy","useBusWithMode","autoConnect","handleSetFactory","checked","setFactory","handleSetExporter","setExporter","handleSetProxy","physical","Flags","ignoreInfrastructure","dev","devs","d","isDualDeviceId","l","r","splitFilter","oracleDeviceIds","useMemo","arrayConcatMany","sensor","serviceIndex","deviceId","tolerance","resolveReadingTolerage","handleTabChange","handleCheckOracle","newOracles","i","setOracleDeviceIds","devicesNoOracles","deviceOracles","exporter"],"sourceRoot":""}