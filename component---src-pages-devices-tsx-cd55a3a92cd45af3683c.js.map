{"version":3,"file":"component---src-pages-devices-tsx-cd55a3a92cd45af3683c.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/shell/Head.tsx","webpack://jacdac-docs/./src/components/specification/FilteredDeviceSpecificationList.tsx","webpack://jacdac-docs/./src/components/ui/FilterChip.tsx","webpack://jacdac-docs/./src/pages/devices.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport type { HeadProps } from \"gatsby\"\n\nexport default function Head(\n    props: HeadProps & {\n        description?: string\n        image?: string\n        title?: string\n        meta?: { name: string; content: string }[]\n    }\n) {\n    const {\n        pageContext,\n        data,\n        description,\n        image,\n        title,\n        meta = [],\n    }: {\n        pageContext: { title?: string }\n        data?: { page?: { description?: string } }\n        description?: string\n        image?: string\n        title?: string\n        meta?: { name: string; content: string }[]\n    } = props\n    const { site } = useStaticQuery(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        author\n                    }\n                }\n            }\n        `\n    )\n    let metaTitle = title || pageContext?.title || site?.siteMetadata?.title\n    if (!/^(Jacdac|DeviceScript)/i.test(metaTitle))\n        metaTitle = `Jacdac - ${metaTitle}`\n    const metaDescription =\n        description ||\n        data?.page?.description ||\n        site?.siteMetadata?.description\n    return (\n        <>\n            <title key=\"title\">{metaTitle}</title>\n            {[\n                {\n                    name: `description`,\n                    content: metaDescription,\n                },\n                {\n                    name: \"og:image\",\n                    content: image,\n                },\n                {\n                    name: `og:title`,\n                    content: metaTitle,\n                },\n                {\n                    name: `og:description`,\n                    content: metaDescription,\n                },\n                {\n                    name: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: `summary`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: site.siteMetadata.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: metaDescription,\n                },\n                ...meta,\n            ]\n                .filter(({ content }) => !!content)\n                .map(({ name, content }) => (\n                    <meta key={name} name={name} content={content} />\n                ))}\n            <link\n                key=\"fontsgoogle\"\n                rel=\"preconnect\"\n                href=\"https://fonts.googleapis.com\"\n                crossOrigin=\"anonymous\"\n            />\n            <link\n                key=\"gitusercontent\"\n                rel=\"preconnect\"\n                href=\"https://raw.githubusercontent.com\"\n                crossOrigin=\"anonymous\"\n            />\n            <meta\n                key=\"viewport\"\n                name=\"viewport\"\n                content=\"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\"\n            />\n        </>\n    )\n}\n","import { Grid, TextField } from \"@mui/material\"\nimport React, { ChangeEvent, startTransition, useState } from \"react\"\nimport { arrayConcatMany, unique } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useBus from \"../../jacdac/useBus\"\nimport useChange from \"../../jacdac/useChange\"\nimport FilterChip from \"../ui/FilterChip\"\nimport DeviceSpecificationList from \"./DeviceSpecificationList\"\nimport ServiceSpecificationSelect from \"./ServiceSpecificationSelect\"\n\nexport default function FilteredDeviceSpecificationList(props: {\n    showSearch?: boolean\n    showServiceList?: boolean\n    count?: number\n    company?: string\n}) {\n    const { showSearch, showServiceList, ...others } = props\n    const bus = useBus()\n    const { deviceCatalog } = bus\n\n    const [serviceClass, setServiceClass] = useState<number>(NaN)\n    const handleServiceChanged = value => setServiceClass(value)\n\n    const [query, setQuery] = useState(\"\")\n    const [firmwareSources, setFirmwareSources] = useState(false)\n    const [hardwareDesign, setHardwareDesign] = useState(false)\n\n    const tags = useChange(deviceCatalog, _ =>\n        unique(\n            arrayConcatMany(\n                _.specifications()\n                    .map(spec => spec.tags)\n                    .filter(tags => !!tags)\n            )\n        )\n    )\n    const [selectedTags, setSelectedTags] = useState<string[]>([])\n\n    const handleSearchQueryChange = (e: ChangeEvent<HTMLInputElement>) =>\n        startTransition(() => setQuery(e.target.value))\n    const handleSetFirmwareSources = () => setFirmwareSources(c => !c)\n    const handleSetHardwareDesign = () => setHardwareDesign(c => !c)\n    const handleSetSelectedTag = (tag: string) => () =>\n        setSelectedTags(ts => {\n            const i = ts.indexOf(tag)\n            if (i < 0) return [...ts, tag]\n            else return [...ts.slice(0, i), ...ts.slice(i + 1)]\n        })\n    return (\n        <>\n            <Grid sx={{ mb: 1 }} container spacing={1}>\n                {showSearch && (\n                    <Grid item xs={12}>\n                        <TextField\n                            tabIndex={0}\n                            type=\"search\"\n                            value={query}\n                            fullWidth={true}\n                            size=\"small\"\n                            label=\"Search devices\"\n                            aria-label=\"Search devices\"\n                            onChange={handleSearchQueryChange}\n                        />\n                    </Grid>\n                )}\n                {showServiceList && (\n                    <Grid item xs>\n                        <ServiceSpecificationSelect\n                            label=\"Filter by Service\"\n                            serviceClass={serviceClass}\n                            setServiceClass={handleServiceChanged}\n                            hasRegisteredDevice={true}\n                        />\n                    </Grid>\n                )}\n                <Grid item>\n                    <FilterChip\n                        label=\"firmware code\"\n                        value={firmwareSources}\n                        onClick={handleSetFirmwareSources}\n                    />\n                </Grid>\n                <Grid item>\n                    <FilterChip\n                        label=\"hardware design\"\n                        value={hardwareDesign}\n                        onClick={handleSetHardwareDesign}\n                    />\n                </Grid>\n                {tags\n                    ?.filter(t => t !== \"ec30\")\n                    .map(tag => (\n                        <Grid item key={tag}>\n                            <FilterChip\n                                label={tag}\n                                value={selectedTags.indexOf(tag) > -1}\n                                onClick={handleSetSelectedTag(tag)}\n                            />\n                        </Grid>\n                    ))}\n            </Grid>\n            <DeviceSpecificationList\n                {...others}\n                query={query}\n                buyNow={true}\n                connector={\"jacdac\"}\n                firmwareSources={firmwareSources}\n                hardwareDesign={hardwareDesign}\n                serviceClass={serviceClass}\n                tags={selectedTags}\n            />\n            <div style={{ marginTop: \"5rem\" }} />\n            <DeviceSpecificationList\n                {...others}\n                header={\"Grove, Qwiic, STEMMA QT connectors\"}\n                query={query}\n                buyNow={true}\n                connector={\"grove\"}\n                firmwareSources={firmwareSources}\n                hardwareDesign={hardwareDesign}\n                serviceClass={serviceClass}\n                tags={selectedTags}\n            />\n            <div style={{ marginTop: \"5rem\" }} />\n            <DeviceSpecificationList\n                {...others}\n                header={\n                    \"No PCB Edge connector (does not connect with Jacdac cables)\"\n                }\n                query={query}\n                buyNow={true}\n                connector={\"none\"}\n                firmwareSources={firmwareSources}\n                hardwareDesign={hardwareDesign}\n                serviceClass={serviceClass}\n                tags={selectedTags}\n            />\n            <div style={{ marginTop: \"5rem\" }} />\n            <DeviceSpecificationList\n                {...others}\n                header={\"Prototypes (not available for purchase)\"}\n                query={query}\n                buyNow={false}\n                firmwareSources={firmwareSources}\n                hardwareDesign={hardwareDesign}\n                serviceClass={serviceClass}\n                tags={selectedTags}\n            />\n        </>\n    )\n}\n","import React from \"react\"\nimport { Chip } from \"@mui/material\"\n\nexport default function FilterChip(props: {\n    label: string\n    value: boolean\n    icon?: JSX.Element\n    onClick: () => void\n}) {\n    const { label, value, icon, onClick } = props\n    const descr = value\n        ? `Disable ${label} filter`\n        : `Filter by ${label} support`\n    return (\n        <Chip\n            label={label}\n            aria-label={descr}\n            title={descr}\n            icon={icon}\n            variant={value ? undefined : \"outlined\"}\n            color={value ? \"secondary\" : undefined}\n            onClick={onClick}\n        />\n    )\n}","import React from \"react\"\nimport FilteredDeviceSpecificationList from \"../components/specification/FilteredDeviceSpecificationList\"\n\nexport const frontmatter = {\n    title: \"Devices\",\n}\nimport CoreHead from \"../components/shell/Head\"\nexport const Head = props => <CoreHead {...props} {...frontmatter} />\n\nexport default function Page() {\n    return (\n        <FilteredDeviceSpecificationList\n            showServiceList={true}\n            showSearch={true}\n        />\n    )\n}\n"],"names":["meta","useStaticQuery","metaTitle","title","pageContext","site","metaDescription","description","data","name","content","others","bus","useBus","useState","handleServiceChanged","value","setServiceClass","tags","useChange","_","unique","arrayConcatMany","spec","handleSearchQueryChange","e","startTransition","setQuery","handleSetFirmwareSources","setFirmwareSources","c","handleSetHardwareDesign","setHardwareDesign","handleSetSelectedTag","tag","setSelectedTags","ts","i","mb","showSearch","showServiceList","t","selectedTags","marginTop","descr","frontmatter","Head","props"],"sourceRoot":""}