{"version":3,"file":"3111-8196761e06984517d3ca.js","mappings":";;;;;;;;;;;;;;;;;;AAUe,8BAAsD,CACjE,GAAM,UAAN,MACA,GAAMA,CAAAA,cAAc,CAAGC,uEAAW,SAAUC,wGAAV,CAAlC,CACA,GAAMC,CAAAA,MAAM,CAAGC,wFAAoB,gBAAnC,KAAmC,CAAnC,CACA,GAAMC,CAAAA,MAAM,CAAGC,4EAAgB,CAA/B,OAA+B,CAA/B,CACA,GAAMC,CAAAA,KAAK,CAAGF,MAAM,aAApB,UACA,GAAM,cAAkBG,4EAAc,CAAtC,KAAsC,CAAtC,CAEA,GAAMC,CAAAA,WAAW,CAAG,iBAChBT,cADgB,OAChBA,EAAAA,cADgB,SAChBA,CADgB,MAChBA,CAAAA,cAAc,CAAdA,gBAAAA,CAAAA,OAAAA,CADJ,IACIA,CADJ,CAGA,GAAIG,MAAM,GAAV,UACI,mBAAO,mIAAgC,QAAQ,CAA/C,cAAO,EAAP,CAEJ,GAAMO,CAAAA,UAAyB,CAAG,CAC9BH,KAAK,CADT,WAAkC,CAAlC,CAGA,mBACI,uHACI,KAAK,CAAEJ,MAAM,UADjB,WAEI,OAAO,CAFX,OAGI,QAAQ,CAHZ,YAII,UAAU,CALlB,UACI,EADJ,CAQH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardRelay.tsx"],"sourcesContent":["import React, { CSSProperties } from \"react\"\nimport { RelayReg } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { useRegisterBoolValue } from \"../../jacdac/useRegisterValue\"\nimport useRegister from \"../hooks/useRegister\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport SwitchWithLabel from \"../ui/SwitchWithLabel\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\n\nexport default function DashboardRelay(props: DashboardServiceProps) {\n    const { service } = props\n    const activeRegister = useRegister(service, RelayReg.Active)\n    const active = useRegisterBoolValue(activeRegister, props)\n    const server = useServiceServer(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { textPrimary } = useWidgetTheme(color)\n\n    const handleClose = (event: unknown, checked) =>\n        activeRegister?.sendSetBoolAsync(checked, true)\n\n    if (active === undefined)\n        return <DashboardRegisterValueFallback register={activeRegister} />\n\n    const labelStyle: CSSProperties = {\n        color: textPrimary,\n    }\n    return (\n        <SwitchWithLabel\n            label={active ? \"active\" : \"inactive\"}\n            checked={active}\n            onChange={handleClose}\n            labelStyle={labelStyle}\n        />\n    )\n}\n"],"names":["activeRegister","useRegister","RelayReg","active","useRegisterBoolValue","server","useServiceServer","color","useWidgetTheme","handleClose","labelStyle"],"sourceRoot":""}