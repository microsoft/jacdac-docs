{"version":3,"file":"9800-32f1d046adbf352630f9.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAgBe,kCAA0D,CACrE,GAAM,UAAN,MACA,GAAMA,CAAAA,MAAM,CAAGC,4EAAgB,CAA/B,OAA+B,CAA/B,CACA,GAAMC,CAAAA,KAAK,CAAGF,MAAM,aAApB,UACA,GAAM,qCAA2CG,4EAAc,CAA/D,KAA+D,CAA/D,CACA,GAAMC,CAAAA,kBAAkB,CAAGC,uEAAW,SAAUC,wGAAV,CAAtC,CACA,GAAM,aAAeC,4FAAwB,oBAA7C,KAA6C,CAA7C,CAIA,GAAMC,CAAAA,iBAAiB,CAAGC,IAAI,CAAJA,KAAAA,CAAWC,UAAU,CAA/C,GAA0BD,CAA1B,CACA,GAAME,CAAAA,iBAAiB,CAAGN,uEAAW,SAAUC,oGAAV,CAArC,CACA,GAAMM,CAAAA,SAAS,CAAGC,wFAAoB,mBAAtC,KAAsC,CAAtC,CAEA,GAAIH,UAAU,GAAd,UACI,mBAAO,mIAAgC,QAAQ,CAA/C,kBAAO,EAAP,CAEJ,GAAMI,CAAAA,aAAa,CAAG,IAClBV,kBAAkB,CAAlBA,kBAAAA,CAAsC,CAACM,UAAU,CAAVA,CAAAA,CAAAA,CAAAA,CAAvCN,CAAsC,CAAtCA,CADJ,IACIA,CADJ,CAEA;AACA,GAAMW,CAAAA,YAAiB,CAAG,eAA8C,CACpE,GAAMC,CAAAA,CAAC,CAAIC,KAAD,CAAV,IACAb,kBAAkB,CAAlBA,kBAAAA,CAAsC,CAAtCA,CAAsC,CAAtCA,CAAAA,IAAAA,EAFJ,EAKA,GAAMc,CAAAA,CAAC,CAAP,GACA,GAAMC,CAAAA,EAAE,CAAR,EACA,GAAMC,CAAAA,EAAE,CAAGF,CAAC,CAAZ,EACA,GAAMG,CAAAA,EAAE,CAAGH,CAAC,CAAZ,EACA,GAAMI,CAAAA,CAAC,CAAGJ,CAAC,CAADA,CAAAA,CAAV,EACA,GAAMK,CAAAA,EAAE,CAAID,CAAC,CAAF,iBAACA,CAAZ,IACA,GAAME,CAAAA,IAAI,CAAGF,CAAC,CAAd,EACA,GAAMG,CAAAA,IAAI,CAAGD,IAAI,CAAjB,EACA,GAAME,CAAAA,EAAE,CAAGlB,iBAAiB,CAA5B,EACA,GAAMmB,CAAAA,GAAG,CAAG,CAAZ,GACA,GAAMC,CAAAA,MAAM,CAAGhB,SAAS,CACfH,IAAI,CAAJA,KAAAA,CADe,iBACfA,EADe,IAElBiB,EAAE,MAFR,MAKA,GAAMG,CAAAA,UAAU,CAAhB,0BAEA,mBACI,kHAAM,SAAS,CAAf,KAAgB,OAAO,CAAvB,gBACI,kHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,sHAAW,QAAQ,CAAnB,EAAwB,KAAK,CAA7B,EAAkC,MAAM,CAAxC,EAA6C,IAAI,CAAjD,yBACI,2DACI,EAAE,CADN,GAEI,EAAE,CAFN,GAGI,CAAC,CAHL,EAII,IAAI,CAJR,kBAKI,WAAW,CANnB,EACI,EADJ,cAQI,2DACI,EAAE,CADN,GAEI,EAAE,CAFN,GAGI,CAAC,CAHL,GAII,IAAI,CAJR,OAKI,MAAM,CALV,kBAMI,WAAW,CAdnB,EAQI,EARJ,CAgBKjB,SAAS,GAATA,IAAAA,CAAAA,aACG,wHACI,GAAG,CADP,IAEI,KAAK,CAFT,OAGI,EAAE,CAHN,GAII,EAAE,CAJN,GAKI,CAAC,CALL,KAMI,EAAE,CANN,KAOI,KAAK,CAPT,MAQI,OAAO,CATdA,aACG,EADHA,CAAAA,aAYG,oFAAqB,CAAC,CAAtB,GAA4B,CAAC,CAA7B,GAAmC,aAAnC,SA9BhB,MA8BgB,CA5BR,CADJ,CADJ,CAoCKA,SAAS,GAATA,IAAAA,EAAAA,aACG,kHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,mHACI,KAAK,CADT,kBAEI,GAAG,CAFP,EAGI,GAAG,CAHP,IAII,iBAAiB,CAJrB,MAKI,QAAQ,CA5C5B,YAuCgB,EADJ,CArCR,CADJ,CAkDH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardLightBulb.tsx"],"sourcesContent":["import React from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport { SensorServer } from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport { LightBulbReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport useRegister from \"../hooks/useRegister\"\nimport { Grid, Slider } from \"@mui/material\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport PowerButton from \"../widgets/PowerButton\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\n\nexport default function DashboardLightBulb(props: DashboardServiceProps) {\n    const { service } = props\n    const server = useServiceServer<SensorServer<[boolean]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { controlBackground, active, textProps } = useWidgetTheme(color)\n    const brightnessRegister = useRegister(service, LightBulbReg.Brightness)\n    const [brightness] = useRegisterUnpackedValue<[number]>(\n        brightnessRegister,\n        props\n    )\n    const brightnessPercent = Math.round(brightness * 100)\n    const dimmeableRegister = useRegister(service, LightBulbReg.Dimmable)\n    const dimmeable = useRegisterBoolValue(dimmeableRegister, props)\n\n    if (brightness === undefined)\n        return <DashboardRegisterValueFallback register={brightnessRegister} />\n\n    const handleChecked = () =>\n        brightnessRegister.sendSetPackedAsync([brightness > 0 ? 0 : 1], true)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChange: any = (event: unknown, value: number | number[]) => {\n        const b = (value as number) / 100\n        brightnessRegister.sendSetPackedAsync([b], true)\n    }\n\n    const w = 96\n    const sw = 2\n    const cx = w / 2\n    const cy = w / 2\n    const r = w / 2 - 4\n    const ri = (r * brightnessPercent) / 100\n    const roff = r / 3\n    const riff = roff - 4\n    const on = brightnessPercent > 0\n    const off = !on\n    const tvalue = dimmeable\n        ? `${Math.round(brightnessPercent)}%`\n        : on\n        ? \"on\"\n        : \"off\"\n    const widgetSize = `clamp(4rem, 12vw, 12vh)`\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                <SvgWidget tabIndex={0} width={w} height={w} size={widgetSize}>\n                    <circle\n                        cx={cx}\n                        cy={cx}\n                        r={r}\n                        fill={controlBackground}\n                        strokeWidth={sw}\n                    />\n                    <circle\n                        cx={cy}\n                        cy={cy}\n                        r={ri}\n                        fill={active}\n                        stroke={controlBackground}\n                        strokeWidth={sw}\n                    />\n                    {dimmeable !== true ? (\n                        <PowerButton\n                            off={off}\n                            label={tvalue}\n                            cx={cx}\n                            cy={cy}\n                            r={roff}\n                            ri={riff}\n                            color={color}\n                            onClick={handleChecked}\n                        />\n                    ) : (\n                        <text {...textProps} x={cx} y={cy} aria-label={tvalue}>\n                            {tvalue}\n                        </text>\n                    )}\n                </SvgWidget>\n            </Grid>\n            {dimmeable === true && (\n                <Grid item xs={12}>\n                    <Slider\n                        value={brightnessPercent}\n                        min={0}\n                        max={100}\n                        valueLabelDisplay=\"off\"\n                        onChange={handleChange}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"names":["server","useServiceServer","color","useWidgetTheme","brightnessRegister","useRegister","LightBulbReg","useRegisterUnpackedValue","brightnessPercent","Math","brightness","dimmeableRegister","dimmeable","useRegisterBoolValue","handleChecked","handleChange","b","value","w","sw","cx","cy","r","ri","roff","riff","on","off","tvalue","widgetSize"],"sourceRoot":""}