{"version":3,"file":"3656-a387458ef408783f2b3e.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardWaterLevel.tsx"],"sourcesContent":["import React from \"react\"\nimport { WaterLevelReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useWidgetSize from \"../widgets/useWidgetSize\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport { Grid, Slider } from \"@mui/material\"\nimport { SensorServer } from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashbaordWaterLevel(props: DashboardServiceProps) {\n    const { service, services, variant } = props\n\n    const levelRegister = useRegister(service, WaterLevelReg.Level)\n    const [value] = useRegisterUnpackedValue<[number]>(levelRegister, props)\n    const server = useServiceServer<SensorServer<[number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active, textProps } =\n        useWidgetTheme(color)\n    const hasValue = !isNaN(value)\n    const widgetSize = useWidgetSize(variant, services?.length)\n    const tvalue = hasValue ? `${Math.round(value * 100)}%` : `--`\n\n    const mx = 5\n    const wx = 6\n    const n = 8\n    const w = (wx + mx) * n + 2 * mx\n    const mty = 42\n    const mby = mx\n    const hy = w * 2\n    const h = hy + mty + mby\n    const r = 1\n\n    const onChange = (event: unknown, newValue: number | number[]): void => {\n        const svalue = newValue as number\n        server?.reading.setValues([svalue])\n        levelRegister.refresh()\n    }\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h} size={widgetSize}>\n                    <rect\n                        fill={background}\n                        x={0}\n                        y={0}\n                        width={w}\n                        height={h}\n                        r={r}\n                    />\n                    {Array(n)\n                        .fill(0)\n                        .map((_, i) => (\n                            <path\n                                key={`back${i}`}\n                                stroke={controlBackground}\n                                d={`M ${2 * mx + i * (wx + mx)} ${\n                                    h - mby\n                                } v ${-hy}`}\n                                strokeWidth={wx}\n                                strokeLinecap={i % 2 === 0 ? \"round\" : \"square\"}\n                            />\n                        ))}\n                    {hasValue &&\n                        Array(n)\n                            .fill(0)\n                            .map((_, i) => (\n                                <path\n                                    key={`water${i}`}\n                                    stroke={active}\n                                    d={`M ${2 * mx + i * (wx + mx)} ${\n                                        h - mby - 2\n                                    } v ${-hy * value}`}\n                                    strokeWidth={wx + 2}\n                                    strokeLinecap={\"square\"}\n                                />\n                            ))}\n                    {tvalue && (\n                        <text\n                            key=\"text\"\n                            x={w >> 1}\n                            y={mty >> 1}\n                            {...textProps}\n                            fill={\"#fff\"}\n                        >\n                            {tvalue}\n                        </text>\n                    )}\n                </SvgWidget>\n            </Grid>\n            {server && hasValue && (\n                <Grid item xs>\n                    <Slider\n                        valueLabelDisplay=\"off\"\n                        min={0}\n                        max={1}\n                        step={0.05}\n                        value={value}\n                        onChange={onChange}\n                        color={color}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"names":["levelRegister","useRegister","WaterLevelReg","useRegisterUnpackedValue","server","useServiceServer","color","useWidgetTheme","hasValue","isNaN","widgetSize","useWidgetSize","services","tvalue","Math","value","mx","wx","n","w","mty","mby","hy","h","r","onChange","svalue","Array","i"],"sourceRoot":""}